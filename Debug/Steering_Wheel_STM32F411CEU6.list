
Steering_Wheel_STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000654c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080066e4  080066e4  000076e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800672c  0800672c  000080f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800672c  0800672c  0000772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006734  08006734  000080f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006734  08006734  00007734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006738  08006738  00007738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  0800673c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  200000f4  08006830  000080f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  08006830  00008af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd37  00000000  00000000  00008124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002960  00000000  00000000  00014e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  000177c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000827  00000000  00000000  000182d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a37  00000000  00000000  00018aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ede8  00000000  00000000  00030536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e72  00000000  00000000  0003f31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc8  00000000  00000000  000c61d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000c8d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f4 	.word	0x200000f4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080066cc 	.word	0x080066cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f8 	.word	0x200000f8
 80001d4:	080066cc 	.word	0x080066cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	4b31      	ldr	r3, [pc, #196]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a30      	ldr	r2, [pc, #192]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b2e      	ldr	r3, [pc, #184]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a29      	ldr	r2, [pc, #164]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	4b23      	ldr	r3, [pc, #140]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a22      	ldr	r2, [pc, #136]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b20      	ldr	r3, [pc, #128]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000574:	481c      	ldr	r0, [pc, #112]	@ (80005e8 <MX_GPIO_Init+0xe4>)
 8000576:	f000 fd2b 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800057a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000584:	2301      	movs	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4815      	ldr	r0, [pc, #84]	@ (80005e8 <MX_GPIO_Init+0xe4>)
 8000594:	f000 fb80 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000598:	2301      	movs	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4619      	mov	r1, r3
 80005ac:	480f      	ldr	r0, [pc, #60]	@ (80005ec <MX_GPIO_Init+0xe8>)
 80005ae:	f000 fb73 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b2:	2302      	movs	r3, #2
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	4809      	ldr	r0, [pc, #36]	@ (80005ec <MX_GPIO_Init+0xe8>)
 80005c6:	f000 fb67 	bl	8000c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2006      	movs	r0, #6
 80005d0:	f000 fb2b 	bl	8000c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005d4:	2006      	movs	r0, #6
 80005d6:	f000 fb44 	bl	8000c62 <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020800 	.word	0x40020800
 80005ec:	40020000 	.word	0x40020000

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  RotateWheel(wheel_centre, 0);
 80005f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <main+0x34>)
 80005f6:	f993 3000 	ldrsb.w	r3, [r3]
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f87b 	bl	80006f8 <RotateWheel>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 f9a1 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f80f 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f7ff ff7b 	bl	8000504 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800060e:	f005 fc03 	bl	8005e18 <MX_USB_DEVICE_Init>
  while (1)
  {



	  RotateWheel(wheel_centre, 0);
 8000612:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <main+0x34>)
 8000614:	f993 3000 	ldrsb.w	r3, [r3]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f86c 	bl	80006f8 <RotateWheel>
 8000620:	e7f7      	b.n	8000612 <main+0x22>
 8000622:	bf00      	nop
 8000624:	20000002 	.word	0x20000002

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	@ 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 f81c 	bl	8006674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a26      	ldr	r2, [pc, #152]	@ (80006f0 <SystemClock_Config+0xc8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a20      	ldr	r2, [pc, #128]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000698:	2319      	movs	r3, #25
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800069c:	2390      	movs	r3, #144	@ 0x90
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a4:	2303      	movs	r3, #3
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fefb 	bl	80024a8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f89c 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2102      	movs	r1, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f95d 	bl	8002998 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e4:	f000 f886 	bl	80007f4 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	@ 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <RotateWheel>:

/* USER CODE BEGIN 4 */
void RotateWheel(int8_t positionx, int8_t positiony){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]

        report[0] = positionx;
 8000708:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <RotateWheel+0x3c>)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	7013      	strb	r3, [r2, #0]
        report[1] = positiony;
 800070e:	4a09      	ldr	r2, [pc, #36]	@ (8000734 <RotateWheel+0x3c>)
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	7053      	strb	r3, [r2, #1]
        USBD_HID_SendReport(&hUsbDeviceFS, report, 2);
 8000714:	2202      	movs	r2, #2
 8000716:	4907      	ldr	r1, [pc, #28]	@ (8000734 <RotateWheel+0x3c>)
 8000718:	4807      	ldr	r0, [pc, #28]	@ (8000738 <RotateWheel+0x40>)
 800071a:	f003 fff3 	bl	8004704 <USBD_HID_SendReport>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <RotateWheel+0x44>)
 8000726:	f000 fc53 	bl	8000fd0 <HAL_GPIO_WritePin>





}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000110 	.word	0x20000110
 8000738:	2000011c 	.word	0x2000011c
 800073c:	40020800 	.word	0x40020800

08000740 <Counter>:
void Counter(){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	uint8_t B = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000746:	2102      	movs	r1, #2
 8000748:	4817      	ldr	r0, [pc, #92]	@ (80007a8 <Counter+0x68>)
 800074a:	f000 fc29 	bl	8000fa0 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]

	if(B==1){
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d109      	bne.n	800076c <Counter+0x2c>
		//counter++;
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
		wheel_centre+=5;
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <Counter+0x6c>)
 800075a:	f993 3000 	ldrsb.w	r3, [r3]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	3305      	adds	r3, #5
 8000762:	b2db      	uxtb	r3, r3
 8000764:	b25a      	sxtb	r2, r3
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <Counter+0x6c>)
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e008      	b.n	800077e <Counter+0x3e>


	}else {
		//counter--;
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
		wheel_centre-=5;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <Counter+0x6c>)
 800076e:	f993 3000 	ldrsb.w	r3, [r3]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	3b05      	subs	r3, #5
 8000776:	b2db      	uxtb	r3, r3
 8000778:	b25a      	sxtb	r2, r3
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <Counter+0x6c>)
 800077c:	701a      	strb	r2, [r3, #0]

    //}else if (counter == -20) {
        //counter = 0;


   if (wheel_centre > 120) wheel_centre = 120;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <Counter+0x6c>)
 8000780:	f993 3000 	ldrsb.w	r3, [r3]
 8000784:	2b78      	cmp	r3, #120	@ 0x78
 8000786:	dd02      	ble.n	800078e <Counter+0x4e>
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <Counter+0x6c>)
 800078a:	2278      	movs	r2, #120	@ 0x78
 800078c:	701a      	strb	r2, [r3, #0]
   if (wheel_centre < -120) wheel_centre = -120;
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <Counter+0x6c>)
 8000790:	f993 3000 	ldrsb.w	r3, [r3]
 8000794:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 8000798:	da02      	bge.n	80007a0 <Counter+0x60>
 800079a:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <Counter+0x6c>)
 800079c:	2288      	movs	r2, #136	@ 0x88
 800079e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	}
	*/


}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40020000 	.word	0x40020000
 80007ac:	20000002 	.word	0x20000002

080007b0 <HAL_GPIO_EXTI_Callback>:

//PA0 interrupt function

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	80fb      	strh	r3, [r7, #6]
	static uint16_t last = 0;

	if(GPIO_Pin == GPIO_PIN_0){
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d110      	bne.n	80007e2 <HAL_GPIO_EXTI_Callback+0x32>
		uint16_t current_time = HAL_GetTick();
 80007c0:	f000 f928 	bl	8000a14 <HAL_GetTick>
 80007c4:	4603      	mov	r3, r0
 80007c6:	81fb      	strh	r3, [r7, #14]
		if((current_time - last)>debounce){
 80007c8:	89fb      	ldrh	r3, [r7, #14]
 80007ca:	4a08      	ldr	r2, [pc, #32]	@ (80007ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80007cc:	8812      	ldrh	r2, [r2, #0]
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x40>)
 80007d2:	8812      	ldrh	r2, [r2, #0]
 80007d4:	4293      	cmp	r3, r2
 80007d6:	dd01      	ble.n	80007dc <HAL_GPIO_EXTI_Callback+0x2c>
				Counter();
 80007d8:	f7ff ffb2 	bl	8000740 <Counter>
			}
			last=current_time;
 80007dc:	4a03      	ldr	r2, [pc, #12]	@ (80007ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80007de:	89fb      	ldrh	r3, [r7, #14]
 80007e0:	8013      	strh	r3, [r2, #0]
}



}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000112 	.word	0x20000112
 80007f0:	20000000 	.word	0x20000000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	@ (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000814:	6453      	str	r3, [r2, #68]	@ 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	@ 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <NMI_Handler+0x4>

08000858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <MemManage_Handler+0x4>

08000868 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <UsageFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a6:	f000 f8a1 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}

080008ae <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f000 fba6 	bl	8001004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <OTG_FS_IRQHandler+0x10>)
 80008c2:	f000 fcfb 	bl	80012bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200005f8 	.word	0x200005f8

080008d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800092c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f8:	f7ff ffea 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	@ (8000934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	@ (8000940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f005 feaf 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000926:	f7ff fe63 	bl	80005f0 <main>
  bx  lr    
 800092a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800092c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000938:	0800673c 	.word	0x0800673c
  ldr r2, =_sbss
 800093c:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000940:	20000af0 	.word	0x20000af0

08000944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800094c:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <HAL_Init+0x40>)
 8000952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000958:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <HAL_Init+0x40>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <HAL_Init+0x40>)
 800095e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <HAL_Init+0x40>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	@ (8000988 <HAL_Init+0x40>)
 800096a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800096e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f94f 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	200f      	movs	r0, #15
 8000978:	f000 f808 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff ff40 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023c00 	.word	0x40023c00

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f967 	bl	8000c7e <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f92f 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	@ (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000004 	.word	0x20000004
 80009e4:	2000000c 	.word	0x2000000c
 80009e8:	20000008 	.word	0x20000008

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_IncTick+0x20>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_IncTick+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <HAL_IncTick+0x24>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	20000114 	.word	0x20000114

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000114 	.word	0x20000114

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a34:	f7ff ffee 	bl	8000a14 <HAL_GetTick>
 8000a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d005      	beq.n	8000a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_Delay+0x44>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a52:	bf00      	nop
 8000a54:	f7ff ffde 	bl	8000a14 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8f7      	bhi.n	8000a54 <HAL_Delay+0x28>
  {
  }
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000000c 	.word	0x2000000c

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	@ (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	@ (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	@ (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	@ 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	@ 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff29 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff3e 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff8e 	bl	8000b68 <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff31 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffa2 	bl	8000bd0 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e159      	b.n	8000f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f040 8148 	bne.w	8000f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d005      	beq.n	8000cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d130      	bne.n	8000d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	f003 0201 	and.w	r2, r3, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d017      	beq.n	8000d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d123      	bne.n	8000ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	69b9      	ldr	r1, [r7, #24]
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0203 	and.w	r2, r3, #3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80a2 	beq.w	8000f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b57      	ldr	r3, [pc, #348]	@ (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	4a56      	ldr	r2, [pc, #344]	@ (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2e:	4b54      	ldr	r3, [pc, #336]	@ (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3a:	4a52      	ldr	r2, [pc, #328]	@ (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a49      	ldr	r2, [pc, #292]	@ (8000f88 <HAL_GPIO_Init+0x2f0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x202>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a48      	ldr	r2, [pc, #288]	@ (8000f8c <HAL_GPIO_Init+0x2f4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x1fe>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a47      	ldr	r2, [pc, #284]	@ (8000f90 <HAL_GPIO_Init+0x2f8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x1fa>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a46      	ldr	r2, [pc, #280]	@ (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x1f6>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a45      	ldr	r2, [pc, #276]	@ (8000f98 <HAL_GPIO_Init+0x300>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x1f2>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4935      	ldr	r1, [pc, #212]	@ (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eba:	4b38      	ldr	r3, [pc, #224]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ede:	4a2f      	ldr	r2, [pc, #188]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f08:	4a24      	ldr	r2, [pc, #144]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f32:	4a1a      	ldr	r2, [pc, #104]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f38:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f aea2 	bls.w	8000cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40013c00 	.word	0x40013c00

08000fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e001      	b.n	8000fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fec:	e003      	b.n	8000ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	041a      	lsls	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001010:	695a      	ldr	r2, [r3, #20]
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fbc4 	bl	80007b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40013c00 	.word	0x40013c00

08001034 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
 800103a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e101      	b.n	800124a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d106      	bne.n	8001066 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f005 f80f 	bl	8006084 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2203      	movs	r2, #3
 800106a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001074:	d102      	bne.n	800107c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f001 ff58 	bl	8002f36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7c1a      	ldrb	r2, [r3, #16]
 800108e:	f88d 2000 	strb.w	r2, [sp]
 8001092:	3304      	adds	r3, #4
 8001094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001096:	f001 fe37 	bl	8002d08 <USB_CoreInit>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0ce      	b.n	800124a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 ff50 	bl	8002f58 <USB_SetCurrentMode>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2202      	movs	r2, #2
 80010c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0bf      	b.n	800124a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e04a      	b.n	8001166 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	3315      	adds	r3, #21
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	3314      	adds	r3, #20
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	b298      	uxth	r0, r3
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	332e      	adds	r3, #46	@ 0x2e
 800110c:	4602      	mov	r2, r0
 800110e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	3318      	adds	r3, #24
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	331c      	adds	r3, #28
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	3320      	adds	r3, #32
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	3324      	adds	r3, #36	@ 0x24
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	3301      	adds	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	791b      	ldrb	r3, [r3, #4]
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3af      	bcc.n	80010d0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e044      	b.n	8001200 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3301      	adds	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	429a      	cmp	r2, r3
 8001208:	d3b5      	bcc.n	8001176 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7c1a      	ldrb	r2, [r3, #16]
 8001212:	f88d 2000 	strb.w	r2, [sp]
 8001216:	3304      	adds	r3, #4
 8001218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121a:	f001 fee9 	bl	8002ff0 <USB_DevInit>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e00c      	b.n	800124a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f002 ff33 	bl	80040ae <USB_DevDisconnect>

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_PCD_Start+0x1c>
 800126a:	2302      	movs	r3, #2
 800126c:	e022      	b.n	80012b4 <HAL_PCD_Start+0x62>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001286:	2b01      	cmp	r3, #1
 8001288:	d105      	bne.n	8001296 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fe3a 	bl	8002f14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fee1 	bl	800406c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08d      	sub	sp, #52	@ 0x34
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 ff9f 	bl	8004216 <USB_GetMode>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 848c 	bne.w	8001bf8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 ff03 	bl	80040f0 <USB_ReadInterrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 8482 	beq.w	8001bf6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fef0 	bl	80040f0 <USB_ReadInterrupts>
 8001310:	4603      	mov	r3, r0
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b02      	cmp	r3, #2
 8001318:	d107      	bne.n	800132a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f002 0202 	and.w	r2, r2, #2
 8001328:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fede 	bl	80040f0 <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b10      	cmp	r3, #16
 800133c:	d161      	bne.n	8001402 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0210 	bic.w	r2, r2, #16
 800134c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f003 020f 	and.w	r2, r3, #15
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	3304      	adds	r3, #4
 800136c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001374:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001378:	d124      	bne.n	80013c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d035      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001394:	b29b      	uxth	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	6a38      	ldr	r0, [r7, #32]
 800139a:	f002 fd15 	bl	8003dc8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013aa:	441a      	add	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	695a      	ldr	r2, [r3, #20]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013bc:	441a      	add	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	615a      	str	r2, [r3, #20]
 80013c2:	e016      	b.n	80013f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80013ce:	d110      	bne.n	80013f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013d6:	2208      	movs	r2, #8
 80013d8:	4619      	mov	r1, r3
 80013da:	6a38      	ldr	r0, [r7, #32]
 80013dc:	f002 fcf4 	bl	8003dc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ec:	441a      	add	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0210 	orr.w	r2, r2, #16
 8001400:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fe72 	bl	80040f0 <USB_ReadInterrupts>
 800140c:	4603      	mov	r3, r0
 800140e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001412:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001416:	f040 80a7 	bne.w	8001568 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fe77 	bl	8004116 <USB_ReadDevAllOutEpInterrupt>
 8001428:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800142a:	e099      	b.n	8001560 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800142c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 808e 	beq.w	8001554 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fe9b 	bl	800417e <USB_ReadDevOutEPInterrupt>
 8001448:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001460:	461a      	mov	r2, r3
 8001462:	2301      	movs	r3, #1
 8001464:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001466:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fe8b 	bl	8002184 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	4413      	add	r3, r2
 8001480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001484:	461a      	mov	r2, r3
 8001486:	2308      	movs	r3, #8
 8001488:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800148a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 ff61 	bl	8002354 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014a8:	461a      	mov	r2, r3
 80014aa:	2310      	movs	r3, #16
 80014ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d030      	beq.n	800151a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c0:	2b80      	cmp	r3, #128	@ 0x80
 80014c2:	d109      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	3304      	adds	r3, #4
 80014ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	78db      	ldrb	r3, [r3, #3]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2200      	movs	r2, #0
 80014fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f004 feba 	bl	800627c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001514:	461a      	mov	r2, r3
 8001516:	2302      	movs	r3, #2
 8001518:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001530:	461a      	mov	r2, r3
 8001532:	2320      	movs	r3, #32
 8001534:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d009      	beq.n	8001554 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800154c:	461a      	mov	r2, r3
 800154e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001552:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001556:	3301      	adds	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800155a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001562:	2b00      	cmp	r3, #0
 8001564:	f47f af62 	bne.w	800142c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fdbf 	bl	80040f0 <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001578:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800157c:	f040 80db 	bne.w	8001736 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fde0 	bl	800414a <USB_ReadDevAllInEpInterrupt>
 800158a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001590:	e0cd      	b.n	800172e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80c2 	beq.w	8001722 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fe06 	bl	80041ba <USB_ReadDevInEPInterrupt>
 80015ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d057      	beq.n	800166a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	2201      	movs	r2, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69f9      	ldr	r1, [r7, #28]
 80015d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015da:	4013      	ands	r3, r2
 80015dc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	015a      	lsls	r2, r3, #5
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	4413      	add	r3, r2
 80015e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ea:	461a      	mov	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	799b      	ldrb	r3, [r3, #6]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d132      	bne.n	800165e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3320      	adds	r3, #32
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4403      	add	r3, r0
 8001618:	331c      	adds	r3, #28
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4419      	add	r1, r3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4403      	add	r3, r0
 800162c:	3320      	adds	r3, #32
 800162e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	2b00      	cmp	r3, #0
 8001634:	d113      	bne.n	800165e <HAL_PCD_IRQHandler+0x3a2>
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	3324      	adds	r3, #36	@ 0x24
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d108      	bne.n	800165e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001656:	461a      	mov	r2, r3
 8001658:	2101      	movs	r1, #1
 800165a:	f002 fe0d 	bl	8004278 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f004 fd8e 	bl	8006186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001680:	461a      	mov	r2, r3
 8001682:	2308      	movs	r3, #8
 8001684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800169c:	461a      	mov	r2, r3
 800169e:	2310      	movs	r3, #16
 80016a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	015a      	lsls	r2, r3, #5
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016b8:	461a      	mov	r2, r3
 80016ba:	2340      	movs	r3, #64	@ 0x40
 80016bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016ca:	6a38      	ldr	r0, [r7, #32]
 80016cc:	f001 fdf4 	bl	80032b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	3310      	adds	r3, #16
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	3304      	adds	r3, #4
 80016e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	78db      	ldrb	r3, [r3, #3]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2200      	movs	r2, #0
 80016f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f004 fdd1 	bl	80062a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800170a:	461a      	mov	r2, r3
 800170c:	2302      	movs	r3, #2
 800170e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800171a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fca5 	bl	800206c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	f47f af2e 	bne.w	8001592 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f002 fcd8 	bl	80040f0 <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800174a:	d122      	bne.n	8001792 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fe8b 	bl	8002490 <HAL_PCDEx_LPM_Callback>
 800177a:	e002      	b.n	8001782 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f004 fd6f 	bl	8006260 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fcaa 	bl	80040f0 <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017a6:	d112      	bne.n	80017ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f004 fd2b 	bl	8006214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80017cc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fc8c 	bl	80040f0 <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e2:	f040 80b7 	bne.w	8001954 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2110      	movs	r1, #16
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fd59 	bl	80032b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800180a:	e046      	b.n	800189a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800180c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001818:	461a      	mov	r2, r3
 800181a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800181e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001830:	0151      	lsls	r1, r2, #5
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	440a      	add	r2, r1
 8001836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800183a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800183e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800184c:	461a      	mov	r2, r3
 800184e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001852:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4413      	add	r3, r2
 800185c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001864:	0151      	lsls	r1, r2, #5
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	440a      	add	r2, r1
 800186a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800186e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001872:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001884:	0151      	lsls	r1, r2, #5
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	440a      	add	r2, r1
 800188a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800188e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001892:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001896:	3301      	adds	r3, #1
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	791b      	ldrb	r3, [r3, #4]
 800189e:	461a      	mov	r2, r3
 80018a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d3b2      	bcc.n	800180c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7bdb      	ldrb	r3, [r3, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d016      	beq.n	80018f0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018d2:	f043 030b 	orr.w	r3, r3, #11
 80018d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e8:	f043 030b 	orr.w	r3, r3, #11
 80018ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ee:	e015      	b.n	800191c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001902:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001906:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001916:	f043 030b 	orr.w	r3, r3, #11
 800191a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800192a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800192e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800193e:	461a      	mov	r2, r3
 8001940:	f002 fc9a 	bl	8004278 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fbc9 	bl	80040f0 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001968:	d123      	bne.n	80019b2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fc5f 	bl	8004232 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f001 fd16 	bl	80033aa <USB_GetDevSpeed>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681c      	ldr	r4, [r3, #0]
 800198a:	f001 f9b1 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 800198e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001994:	461a      	mov	r2, r3
 8001996:	4620      	mov	r0, r4
 8001998:	f001 fa1a 	bl	8002dd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f004 fc1a 	bl	80061d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fb9a 	bl	80040f0 <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d10a      	bne.n	80019dc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f004 fbf7 	bl	80061ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f002 0208 	and.w	r2, r2, #8
 80019da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fb85 	bl	80040f0 <USB_ReadInterrupts>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ec:	2b80      	cmp	r3, #128	@ 0x80
 80019ee:	d123      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019fc:	2301      	movs	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a00:	e014      	b.n	8001a2c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d105      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 faf2 	bl	800200a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	3301      	adds	r3, #1
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	791b      	ldrb	r3, [r3, #4]
 8001a30:	461a      	mov	r2, r3
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d3e4      	bcc.n	8001a02 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 fb57 	bl	80040f0 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a4c:	d13c      	bne.n	8001ac8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4e:	2301      	movs	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a52:	e02b      	b.n	8001aac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3318      	adds	r3, #24
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d115      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da12      	bge.n	8001aa6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3317      	adds	r3, #23
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fab2 	bl	800200a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d3cd      	bcc.n	8001a54 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fb0f 	bl	80040f0 <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001adc:	d156      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ade:	2301      	movs	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae2:	e045      	b.n	8001b70 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d12e      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da2b      	bge.n	8001b6a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d121      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10a      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b66:	6053      	str	r3, [r2, #4]
            break;
 8001b68:	e008      	b.n	8001b7c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	461a      	mov	r2, r3
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d3b3      	bcc.n	8001ae4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f002 faad 	bl	80040f0 <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba0:	d10a      	bne.n	8001bb8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f004 fb8e 	bl	80062c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fa97 	bl	80040f0 <USB_ReadInterrupts>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d115      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f004 fb7e 	bl	80062e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	e000      	b.n	8001bf8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001bf6:	bf00      	nop
    }
  }
}
 8001bf8:	3734      	adds	r7, #52	@ 0x34
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}

08001bfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_SetAddress+0x1a>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e012      	b.n	8001c3e <HAL_PCD_SetAddress+0x40>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 f9f6 	bl	8004020 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	4608      	mov	r0, r1
 8001c50:	4611      	mov	r1, r2
 8001c52:	461a      	mov	r2, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	70fb      	strb	r3, [r7, #3]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	803b      	strh	r3, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da0f      	bge.n	8001c8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 020f 	and.w	r2, r3, #15
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	3304      	adds	r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	705a      	strb	r2, [r3, #1]
 8001c8a:	e00f      	b.n	8001cac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001cb8:	883b      	ldrh	r3, [r7, #0]
 8001cba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	78ba      	ldrb	r2, [r7, #2]
 8001cc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cda:	78bb      	ldrb	r3, [r7, #2]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d102      	bne.n	8001ce6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_PCD_EP_Open+0xae>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e00e      	b.n	8001d12 <HAL_PCD_EP_Open+0xcc>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68f9      	ldr	r1, [r7, #12]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 fb76 	bl	80033f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d10:	7afb      	ldrb	r3, [r7, #11]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da0f      	bge.n	8001d4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 020f 	and.w	r2, r3, #15
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	3310      	adds	r3, #16
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	3304      	adds	r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	705a      	strb	r2, [r3, #1]
 8001d4c:	e00f      	b.n	8001d6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 020f 	and.w	r2, r3, #15
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	3304      	adds	r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_PCD_EP_Close+0x6e>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e00e      	b.n	8001da6 <HAL_PCD_EP_Close+0x8c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 fbb4 	bl	8003504 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	f003 020f 	and.w	r2, r3, #15
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2200      	movs	r2, #0
 8001dee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df0:	7afb      	ldrb	r3, [r7, #11]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	799b      	ldrb	r3, [r3, #6]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d102      	bne.n	8001e0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	799b      	ldrb	r3, [r3, #6]
 8001e12:	461a      	mov	r2, r3
 8001e14:	6979      	ldr	r1, [r7, #20]
 8001e16:	f001 fc51 	bl	80036bc <USB_EPStartXfer>

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	460b      	mov	r3, r1
 8001e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	7afb      	ldrb	r3, [r7, #11]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3310      	adds	r3, #16
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2201      	movs	r2, #1
 8001e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	799b      	ldrb	r3, [r3, #6]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	799b      	ldrb	r3, [r3, #6]
 8001e86:	461a      	mov	r2, r3
 8001e88:	6979      	ldr	r1, [r7, #20]
 8001e8a:	f001 fc17 	bl	80036bc <USB_EPStartXfer>

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	7912      	ldrb	r2, [r2, #4]
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e04f      	b.n	8001f56 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da0f      	bge.n	8001ede <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	3310      	adds	r3, #16
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	705a      	strb	r2, [r3, #1]
 8001edc:	e00d      	b.n	8001efa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_PCD_EP_SetStall+0x82>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e01d      	b.n	8001f56 <HAL_PCD_EP_SetStall+0xbe>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 ffa5 	bl	8003e78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7999      	ldrb	r1, [r3, #6]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f46:	461a      	mov	r2, r3
 8001f48:	f002 f996 	bl	8004278 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	7912      	ldrb	r2, [r2, #4]
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e042      	b.n	8002002 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da0f      	bge.n	8001fa4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3310      	adds	r3, #16
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	705a      	strb	r2, [r3, #1]
 8001fa2:	e00f      	b.n	8001fc4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 020f 	and.w	r2, r3, #15
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_EP_ClrStall+0x86>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e00e      	b.n	8002002 <HAL_PCD_EP_ClrStall+0xa4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 ffae 	bl	8003f54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da0c      	bge.n	8002038 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 020f 	and.w	r2, r3, #15
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3310      	adds	r3, #16
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e00c      	b.n	8002052 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68f9      	ldr	r1, [r7, #12]
 8002058:	4618      	mov	r0, r3
 800205a:	f001 fdcd 	bl	8003bf8 <USB_EPStopXfer>
 800205e:	4603      	mov	r3, r0
 8002060:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002062:	7afb      	ldrb	r3, [r7, #11]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af02      	add	r7, sp, #8
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	3310      	adds	r3, #16
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d901      	bls.n	80020a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e06b      	b.n	800217c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d902      	bls.n	80020c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3303      	adds	r3, #3
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c8:	e02a      	b.n	8002120 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d902      	bls.n	80020e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3303      	adds	r3, #3
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68d9      	ldr	r1, [r3, #12]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f001 fe22 	bl	8003d4c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	441a      	add	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	441a      	add	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	429a      	cmp	r2, r3
 8002134:	d809      	bhi.n	800214a <PCD_WriteEmptyTxFifo+0xde>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213e:	429a      	cmp	r2, r3
 8002140:	d203      	bcs.n	800214a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1bf      	bne.n	80020ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	429a      	cmp	r2, r3
 8002154:	d811      	bhi.n	800217a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	2201      	movs	r2, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800216a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	43db      	mvns	r3, r3
 8002170:	6939      	ldr	r1, [r7, #16]
 8002172:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002176:	4013      	ands	r3, r2
 8002178:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	333c      	adds	r3, #60	@ 0x3c
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	799b      	ldrb	r3, [r3, #6]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d17b      	bne.n	80022b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4a61      	ldr	r2, [pc, #388]	@ (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	f240 80b9 	bls.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b3 	beq.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ec:	6093      	str	r3, [r2, #8]
 80021ee:	e0a7      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	2320      	movs	r3, #32
 800220a:	6093      	str	r3, [r2, #8]
 800220c:	e098      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8093 	bne.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a4b      	ldr	r2, [pc, #300]	@ (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d90f      	bls.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	e07e      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	0159      	lsls	r1, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	440b      	add	r3, r1
 8002264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d114      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800228c:	461a      	mov	r2, r3
 800228e:	2101      	movs	r1, #1
 8002290:	f001 fff2 	bl	8004278 <USB_EP0_OutStart>
 8002294:	e006      	b.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	441a      	add	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f003 ff50 	bl	8006150 <HAL_PCD_DataOutStageCallback>
 80022b0:	e046      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	4a26      	ldr	r2, [pc, #152]	@ (8002350 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d124      	bne.n	8002304 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	e032      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	2320      	movs	r3, #32
 80022f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f003 ff27 	bl	8006150 <HAL_PCD_DataOutStageCallback>
 8002302:	e01d      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d114      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800232c:	461a      	mov	r2, r3
 800232e:	2100      	movs	r1, #0
 8002330:	f001 ffa2 	bl	8004278 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f003 ff08 	bl	8006150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	4f54300a 	.word	0x4f54300a
 8002350:	4f54310a 	.word	0x4f54310a

08002354 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	333c      	adds	r3, #60	@ 0x3c
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a15      	ldr	r2, [pc, #84]	@ (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d90e      	bls.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f003 febf 	bl	800612c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d90c      	bls.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	799b      	ldrb	r3, [r3, #6]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023c8:	461a      	mov	r2, r3
 80023ca:	2101      	movs	r1, #1
 80023cc:	f001 ff54 	bl	8004278 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	4f54300a 	.word	0x4f54300a

080023e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023fe:	883b      	ldrh	r3, [r7, #0]
 8002400:	0419      	lsls	r1, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	430a      	orrs	r2, r1
 800240a:	629a      	str	r2, [r3, #40]	@ 0x28
 800240c:	e028      	b.n	8002460 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e00d      	b.n	800243e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	3340      	adds	r3, #64	@ 0x40
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4413      	add	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	3b01      	subs	r3, #1
 8002444:	429a      	cmp	r2, r3
 8002446:	d3ec      	bcc.n	8002422 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002448:	883b      	ldrh	r3, [r7, #0]
 800244a:	0418      	lsls	r0, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	3b01      	subs	r3, #1
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4302      	orrs	r2, r0
 8002458:	3340      	adds	r3, #64	@ 0x40
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e267      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d075      	beq.n	80025b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024c6:	4b88      	ldr	r3, [pc, #544]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b85      	ldr	r3, [pc, #532]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b82      	ldr	r3, [pc, #520]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b7e      	ldr	r3, [pc, #504]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05b      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d157      	bne.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e242      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x74>
 800250e:	4b76      	ldr	r3, [pc, #472]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a75      	ldr	r2, [pc, #468]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b70      	ldr	r3, [pc, #448]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6f      	ldr	r2, [pc, #444]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6d      	ldr	r3, [pc, #436]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6c      	ldr	r2, [pc, #432]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 8002540:	4b69      	ldr	r3, [pc, #420]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a68      	ldr	r2, [pc, #416]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b66      	ldr	r3, [pc, #408]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a65      	ldr	r2, [pc, #404]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fa58 	bl	8000a14 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe fa54 	bl	8000a14 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e207      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b5b      	ldr	r3, [pc, #364]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xc0>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fa44 	bl	8000a14 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fa40 	bl	8000a14 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1f3      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b51      	ldr	r3, [pc, #324]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025be:	4b4a      	ldr	r3, [pc, #296]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b44      	ldr	r3, [pc, #272]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1c7      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b3b      	ldr	r3, [pc, #236]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4937      	ldr	r1, [pc, #220]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b34      	ldr	r3, [pc, #208]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe f9f9 	bl	8000a14 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7fe f9f5 	bl	8000a14 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1a8      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b28      	ldr	r3, [pc, #160]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4925      	ldr	r1, [pc, #148]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe f9d8 	bl	8000a14 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002668:	f7fe f9d4 	bl	8000a14 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e187      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d036      	beq.n	8002700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_RCC_OscConfig+0x248>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe f9b8 	bl	8000a14 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe f9b4 	bl	8000a14 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e167      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x200>
 80026c6:	e01b      	b.n	8002700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <HAL_RCC_OscConfig+0x248>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe f9a1 	bl	8000a14 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e00e      	b.n	80026f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe f99d 	bl	8000a14 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d907      	bls.n	80026f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e150      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	42470000 	.word	0x42470000
 80026f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b88      	ldr	r3, [pc, #544]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1ea      	bne.n	80026d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8097 	beq.w	800283c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b81      	ldr	r3, [pc, #516]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b7d      	ldr	r3, [pc, #500]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	4a7c      	ldr	r2, [pc, #496]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	@ 0x40
 800272e:	4b7a      	ldr	r3, [pc, #488]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b77      	ldr	r3, [pc, #476]	@ (800291c <HAL_RCC_OscConfig+0x474>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b74      	ldr	r3, [pc, #464]	@ (800291c <HAL_RCC_OscConfig+0x474>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a73      	ldr	r2, [pc, #460]	@ (800291c <HAL_RCC_OscConfig+0x474>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7fe f95d 	bl	8000a14 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7fe f959 	bl	8000a14 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e10c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	4b6a      	ldr	r3, [pc, #424]	@ (800291c <HAL_RCC_OscConfig+0x474>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x2ea>
 8002784:	4b64      	ldr	r3, [pc, #400]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	4a63      	ldr	r2, [pc, #396]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x30c>
 800279a:	4b5f      	ldr	r3, [pc, #380]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	4a5e      	ldr	r2, [pc, #376]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 80027b4:	4b58      	ldr	r3, [pc, #352]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b8:	4a57      	ldr	r2, [pc, #348]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c0:	4b55      	ldr	r3, [pc, #340]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c4:	4a54      	ldr	r2, [pc, #336]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe f91e 	bl	8000a14 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe f91a 	bl	8000a14 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0cb      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	4b49      	ldr	r3, [pc, #292]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCC_OscConfig+0x334>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe f908 	bl	8000a14 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe f904 	bl	8000a14 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0b5      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281e:	4b3e      	ldr	r3, [pc, #248]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ee      	bne.n	8002808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800282a:	7dfb      	ldrb	r3, [r7, #23]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	4b39      	ldr	r3, [pc, #228]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	4a38      	ldr	r2, [pc, #224]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a1 	beq.w	8002988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002846:	4b34      	ldr	r3, [pc, #208]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	d05c      	beq.n	800290c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d141      	bne.n	80028de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <HAL_RCC_OscConfig+0x478>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe f8d8 	bl	8000a14 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe f8d4 	bl	8000a14 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e087      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	491b      	ldr	r1, [pc, #108]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HAL_RCC_OscConfig+0x478>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe f8ad 	bl	8000a14 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe f8a9 	bl	8000a14 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e05c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x416>
 80028dc:	e054      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b10      	ldr	r3, [pc, #64]	@ (8002920 <HAL_RCC_OscConfig+0x478>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe f896 	bl	8000a14 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe f892 	bl	8000a14 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e045      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x444>
 800290a:	e03d      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e038      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000
 8002920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002924:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <HAL_RCC_OscConfig+0x4ec>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d028      	beq.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d121      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d11a      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800295a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295c:	4293      	cmp	r3, r2
 800295e:	d111      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0cc      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b68      	ldr	r3, [pc, #416]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d90c      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b65      	ldr	r3, [pc, #404]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a58      	ldr	r2, [pc, #352]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a52      	ldr	r2, [pc, #328]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d044      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d119      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b3f      	ldr	r3, [pc, #252]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3b      	ldr	r3, [pc, #236]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e067      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4934      	ldr	r1, [pc, #208]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7fd ffc4 	bl	8000a14 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fd ffc0 	bl	8000a14 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e04f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b25      	ldr	r3, [pc, #148]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d20c      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd ff24 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00
 8002b54:	40023800 	.word	0x40023800
 8002b58:	0800671c 	.word	0x0800671c
 8002b5c:	20000004 	.word	0x20000004
 8002b60:	20000008 	.word	0x20000008

08002b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b68:	b090      	sub	sp, #64	@ 0x40
 8002b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7c:	4b59      	ldr	r3, [pc, #356]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d00d      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	f200 80a1 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x34>
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b96:	e09b      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b53      	ldr	r3, [pc, #332]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b9c:	e09b      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9e:	4b53      	ldr	r3, [pc, #332]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ba2:	e098      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bae:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4b47      	ldr	r3, [pc, #284]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd0:	fb03 f201 	mul.w	r2, r3, r1
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a43      	ldr	r2, [pc, #268]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bde:	fba0 1202 	umull	r1, r2, r0, r2
 8002be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002be4:	460a      	mov	r2, r1
 8002be6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bea:	4413      	add	r3, r2
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	61fa      	str	r2, [r7, #28]
 8002bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bfe:	f7fd faeb 	bl	80001d8 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4613      	mov	r3, r2
 8002c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c0a:	e053      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	2200      	movs	r2, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	617a      	str	r2, [r7, #20]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c1e:	f04f 0b00 	mov.w	fp, #0
 8002c22:	4652      	mov	r2, sl
 8002c24:	465b      	mov	r3, fp
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c3e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c56:	ebb2 0408 	subs.w	r4, r2, r8
 8002c5a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	00eb      	lsls	r3, r5, #3
 8002c68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6c:	00e2      	lsls	r2, r4, #3
 8002c6e:	4614      	mov	r4, r2
 8002c70:	461d      	mov	r5, r3
 8002c72:	eb14 030a 	adds.w	r3, r4, sl
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	eb45 030b 	adc.w	r3, r5, fp
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	028b      	lsls	r3, r1, #10
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c94:	4621      	mov	r1, r4
 8002c96:	028a      	lsls	r2, r1, #10
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca8:	f7fd fa96 	bl	80001d8 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cce:	e002      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3740      	adds	r7, #64	@ 0x40
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	017d7840 	.word	0x017d7840

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000004 	.word	0x20000004

08002d08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d08:	b084      	sub	sp, #16
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	f107 001c 	add.w	r0, r7, #28
 8002d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d123      	bne.n	8002d6a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f001 fae8 	bl	8004334 <USB_CoreReset>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e01b      	b.n	8002da2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f001 fadc 	bl	8004334 <USB_CoreReset>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d94:	e005      	b.n	8002da2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002da2:	7fbb      	ldrb	r3, [r7, #30]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d10b      	bne.n	8002dc0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f043 0206 	orr.w	r2, r3, #6
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dcc:	b004      	add	sp, #16
 8002dce:	4770      	bx	lr

08002dd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d165      	bne.n	8002eb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a41      	ldr	r2, [pc, #260]	@ (8002eec <USB_SetTurnaroundTime+0x11c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d906      	bls.n	8002dfa <USB_SetTurnaroundTime+0x2a>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4a40      	ldr	r2, [pc, #256]	@ (8002ef0 <USB_SetTurnaroundTime+0x120>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d202      	bcs.n	8002dfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002df4:	230f      	movs	r3, #15
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e062      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8002ef0 <USB_SetTurnaroundTime+0x120>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d306      	bcc.n	8002e10 <USB_SetTurnaroundTime+0x40>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef4 <USB_SetTurnaroundTime+0x124>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d202      	bcs.n	8002e10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e0a:	230e      	movs	r3, #14
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e057      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a38      	ldr	r2, [pc, #224]	@ (8002ef4 <USB_SetTurnaroundTime+0x124>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d306      	bcc.n	8002e26 <USB_SetTurnaroundTime+0x56>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a37      	ldr	r2, [pc, #220]	@ (8002ef8 <USB_SetTurnaroundTime+0x128>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d202      	bcs.n	8002e26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e20:	230d      	movs	r3, #13
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e04c      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4a33      	ldr	r2, [pc, #204]	@ (8002ef8 <USB_SetTurnaroundTime+0x128>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d306      	bcc.n	8002e3c <USB_SetTurnaroundTime+0x6c>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4a32      	ldr	r2, [pc, #200]	@ (8002efc <USB_SetTurnaroundTime+0x12c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d802      	bhi.n	8002e3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e36:	230c      	movs	r3, #12
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e041      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002efc <USB_SetTurnaroundTime+0x12c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d906      	bls.n	8002e52 <USB_SetTurnaroundTime+0x82>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <USB_SetTurnaroundTime+0x130>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d802      	bhi.n	8002e52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e4c:	230b      	movs	r3, #11
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e036      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	@ (8002f00 <USB_SetTurnaroundTime+0x130>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d906      	bls.n	8002e68 <USB_SetTurnaroundTime+0x98>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4a29      	ldr	r2, [pc, #164]	@ (8002f04 <USB_SetTurnaroundTime+0x134>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e62:	230a      	movs	r3, #10
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e02b      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4a26      	ldr	r2, [pc, #152]	@ (8002f04 <USB_SetTurnaroundTime+0x134>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d906      	bls.n	8002e7e <USB_SetTurnaroundTime+0xae>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4a25      	ldr	r2, [pc, #148]	@ (8002f08 <USB_SetTurnaroundTime+0x138>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d202      	bcs.n	8002e7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e78:	2309      	movs	r3, #9
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e020      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4a21      	ldr	r2, [pc, #132]	@ (8002f08 <USB_SetTurnaroundTime+0x138>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d306      	bcc.n	8002e94 <USB_SetTurnaroundTime+0xc4>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4a20      	ldr	r2, [pc, #128]	@ (8002f0c <USB_SetTurnaroundTime+0x13c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d802      	bhi.n	8002e94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e8e:	2308      	movs	r3, #8
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e015      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <USB_SetTurnaroundTime+0x13c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d906      	bls.n	8002eaa <USB_SetTurnaroundTime+0xda>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <USB_SetTurnaroundTime+0x140>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d202      	bcs.n	8002eaa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e00a      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002eaa:	2306      	movs	r3, #6
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e007      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002eb6:	2309      	movs	r3, #9
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e001      	b.n	8002ec0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ebc:	2309      	movs	r3, #9
 8002ebe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	029b      	lsls	r3, r3, #10
 8002ed4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	00d8acbf 	.word	0x00d8acbf
 8002ef0:	00e4e1c0 	.word	0x00e4e1c0
 8002ef4:	00f42400 	.word	0x00f42400
 8002ef8:	01067380 	.word	0x01067380
 8002efc:	011a499f 	.word	0x011a499f
 8002f00:	01312cff 	.word	0x01312cff
 8002f04:	014ca43f 	.word	0x014ca43f
 8002f08:	016e3600 	.word	0x016e3600
 8002f0c:	01a6ab1f 	.word	0x01a6ab1f
 8002f10:	01e84800 	.word	0x01e84800

08002f14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 0201 	bic.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d115      	bne.n	8002fa6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f86:	200a      	movs	r0, #10
 8002f88:	f7fd fd50 	bl	8000a2c <HAL_Delay>
      ms += 10U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	330a      	adds	r3, #10
 8002f90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f001 f93f 	bl	8004216 <USB_GetMode>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d01e      	beq.n	8002fdc <USB_SetCurrentMode+0x84>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2bc7      	cmp	r3, #199	@ 0xc7
 8002fa2:	d9f0      	bls.n	8002f86 <USB_SetCurrentMode+0x2e>
 8002fa4:	e01a      	b.n	8002fdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d115      	bne.n	8002fd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fb8:	200a      	movs	r0, #10
 8002fba:	f7fd fd37 	bl	8000a2c <HAL_Delay>
      ms += 10U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	330a      	adds	r3, #10
 8002fc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f001 f926 	bl	8004216 <USB_GetMode>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <USB_SetCurrentMode+0x84>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2bc7      	cmp	r3, #199	@ 0xc7
 8002fd4:	d9f0      	bls.n	8002fb8 <USB_SetCurrentMode+0x60>
 8002fd6:	e001      	b.n	8002fdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e005      	b.n	8002fe8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2bc8      	cmp	r3, #200	@ 0xc8
 8002fe0:	d101      	bne.n	8002fe6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	e009      	b.n	8003024 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	3340      	adds	r3, #64	@ 0x40
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3301      	adds	r3, #1
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b0e      	cmp	r3, #14
 8003028:	d9f2      	bls.n	8003010 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800302a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11c      	bne.n	800306c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003056:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003062:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	639a      	str	r2, [r3, #56]	@ 0x38
 800306a:	e00b      	b.n	8003084 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003070:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800308a:	461a      	mov	r2, r3
 800308c:	2300      	movs	r3, #0
 800308e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003090:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10d      	bne.n	80030b4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030a0:	2100      	movs	r1, #0
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f968 	bl	8003378 <USB_SetDevSpeed>
 80030a8:	e008      	b.n	80030bc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030aa:	2101      	movs	r1, #1
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f963 	bl	8003378 <USB_SetDevSpeed>
 80030b2:	e003      	b.n	80030bc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030b4:	2103      	movs	r1, #3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f95e 	bl	8003378 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030bc:	2110      	movs	r1, #16
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8fa 	bl	80032b8 <USB_FlushTxFifo>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f924 	bl	800331c <USB_FlushRxFifo>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e4:	461a      	mov	r2, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f0:	461a      	mov	r2, r3
 80030f2:	2300      	movs	r3, #0
 80030f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030fc:	461a      	mov	r2, r3
 80030fe:	2300      	movs	r3, #0
 8003100:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	e043      	b.n	8003190 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800311a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800311e:	d118      	bne.n	8003152 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003132:	461a      	mov	r2, r3
 8003134:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e013      	b.n	8003164 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003148:	461a      	mov	r2, r3
 800314a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e008      	b.n	8003164 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800315e:	461a      	mov	r2, r3
 8003160:	2300      	movs	r3, #0
 8003162:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003170:	461a      	mov	r2, r3
 8003172:	2300      	movs	r3, #0
 8003174:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003182:	461a      	mov	r2, r3
 8003184:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003188:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	3301      	adds	r3, #1
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003194:	461a      	mov	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4293      	cmp	r3, r2
 800319a:	d3b5      	bcc.n	8003108 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e043      	b.n	800322a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031b8:	d118      	bne.n	80031ec <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031cc:	461a      	mov	r2, r3
 80031ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e013      	b.n	80031fe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031e2:	461a      	mov	r2, r3
 80031e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e008      	b.n	80031fe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f8:	461a      	mov	r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800320a:	461a      	mov	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003222:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	3301      	adds	r3, #1
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800322e:	461a      	mov	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4293      	cmp	r3, r2
 8003234:	d3b5      	bcc.n	80031a2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003248:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003256:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003258:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f043 0210 	orr.w	r2, r3, #16
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <USB_DevInit+0x2c4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003278:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f043 0208 	orr.w	r2, r3, #8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800328c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032b0:	b004      	add	sp, #16
 80032b2:	4770      	bx	lr
 80032b4:	803c3800 	.word	0x803c3800

080032b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032d2:	d901      	bls.n	80032d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e01b      	b.n	8003310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	daf2      	bge.n	80032c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	019b      	lsls	r3, r3, #6
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032fc:	d901      	bls.n	8003302 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e006      	b.n	8003310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d0f0      	beq.n	80032f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003334:	d901      	bls.n	800333a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e018      	b.n	800336c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	daf2      	bge.n	8003328 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2210      	movs	r2, #16
 800334a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3301      	adds	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003358:	d901      	bls.n	800335e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e006      	b.n	800336c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b10      	cmp	r3, #16
 8003368:	d0f0      	beq.n	800334c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b087      	sub	sp, #28
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0306 	and.w	r3, r3, #6
 80033c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80033ca:	2300      	movs	r3, #0
 80033cc:	75fb      	strb	r3, [r7, #23]
 80033ce:	e00a      	b.n	80033e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d002      	beq.n	80033dc <USB_GetDevSpeed+0x32>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b06      	cmp	r3, #6
 80033da:	d102      	bne.n	80033e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033dc:	2302      	movs	r3, #2
 80033de:	75fb      	strb	r3, [r7, #23]
 80033e0:	e001      	b.n	80033e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033e2:	230f      	movs	r3, #15
 80033e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	785b      	ldrb	r3, [r3, #1]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d13a      	bne.n	8003486 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	b29b      	uxth	r3, r3
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800342e:	4313      	orrs	r3, r2
 8003430:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d155      	bne.n	80034f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	791b      	ldrb	r3, [r3, #4]
 8003462:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003464:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	059b      	lsls	r3, r3, #22
 800346a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800346c:	4313      	orrs	r3, r2
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	0151      	lsls	r1, r2, #5
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	440a      	add	r2, r1
 8003476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800347e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	e036      	b.n	80034f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11a      	bne.n	80034f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	791b      	ldrb	r3, [r3, #4]
 80034d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034da:	430b      	orrs	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	0151      	lsls	r1, r2, #5
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	440a      	add	r2, r1
 80034e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d161      	bne.n	80035e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003532:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003536:	d11f      	bne.n	8003578 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	0151      	lsls	r1, r2, #5
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	440a      	add	r2, r1
 800354e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003552:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003556:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	0151      	lsls	r1, r2, #5
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	440a      	add	r2, r1
 800356e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003572:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003576:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800357e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	b29b      	uxth	r3, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	68f9      	ldr	r1, [r7, #12]
 8003594:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003598:	4013      	ands	r3, r2
 800359a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035bc:	4013      	ands	r3, r2
 80035be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	0159      	lsls	r1, r3, #5
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	440b      	add	r3, r1
 80035d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035da:	4619      	mov	r1, r3
 80035dc:	4b35      	ldr	r3, [pc, #212]	@ (80036b4 <USB_DeactivateEndpoint+0x1b0>)
 80035de:	4013      	ands	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
 80035e2:	e060      	b.n	80036a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035fa:	d11f      	bne.n	800363c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003616:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800361a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	0151      	lsls	r1, r2, #5
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	440a      	add	r2, r1
 8003632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003636:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800363a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	2101      	movs	r1, #1
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	43db      	mvns	r3, r3
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800365c:	4013      	ands	r3, r2
 800365e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	2101      	movs	r1, #1
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	43db      	mvns	r3, r3
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003680:	4013      	ands	r3, r2
 8003682:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0159      	lsls	r1, r3, #5
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	440b      	add	r3, r1
 800369a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800369e:	4619      	mov	r1, r3
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <USB_DeactivateEndpoint+0x1b4>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	ec337800 	.word	0xec337800
 80036b8:	eff37800 	.word	0xeff37800

080036bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	@ 0x28
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	f040 817f 	bne.w	80039dc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d132      	bne.n	800374c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	0151      	lsls	r1, r2, #5
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	440a      	add	r2, r1
 80036fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003700:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003704:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003708:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	0151      	lsls	r1, r2, #5
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	440a      	add	r2, r1
 8003720:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003724:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	440a      	add	r2, r1
 8003740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003744:	0cdb      	lsrs	r3, r3, #19
 8003746:	04db      	lsls	r3, r3, #19
 8003748:	6113      	str	r3, [r2, #16]
 800374a:	e097      	b.n	800387c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	0151      	lsls	r1, r2, #5
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	440a      	add	r2, r1
 8003762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003766:	0cdb      	lsrs	r3, r3, #19
 8003768:	04db      	lsls	r3, r3, #19
 800376a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	0151      	lsls	r1, r2, #5
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	440a      	add	r2, r1
 8003782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003786:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800378a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800378e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11a      	bne.n	80037cc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d903      	bls.n	80037aa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80037c8:	6113      	str	r3, [r2, #16]
 80037ca:	e044      	b.n	8003856 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4413      	add	r3, r2
 80037d6:	1e5a      	subs	r2, r3, #1
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	8afb      	ldrh	r3, [r7, #22]
 80037f2:	04d9      	lsls	r1, r3, #19
 80037f4:	4ba4      	ldr	r3, [pc, #656]	@ (8003a88 <USB_EPStartXfer+0x3cc>)
 80037f6:	400b      	ands	r3, r1
 80037f8:	69b9      	ldr	r1, [r7, #24]
 80037fa:	0148      	lsls	r0, r1, #5
 80037fc:	69f9      	ldr	r1, [r7, #28]
 80037fe:	4401      	add	r1, r0
 8003800:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003804:	4313      	orrs	r3, r2
 8003806:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	791b      	ldrb	r3, [r3, #4]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d122      	bne.n	8003856 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	440a      	add	r2, r1
 8003826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800382a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800382e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	8afb      	ldrh	r3, [r7, #22]
 8003840:	075b      	lsls	r3, r3, #29
 8003842:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003846:	69b9      	ldr	r1, [r7, #24]
 8003848:	0148      	lsls	r0, r1, #5
 800384a:	69f9      	ldr	r1, [r7, #28]
 800384c:	4401      	add	r1, r0
 800384e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003852:	4313      	orrs	r3, r2
 8003854:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386c:	69b9      	ldr	r1, [r7, #24]
 800386e:	0148      	lsls	r0, r1, #5
 8003870:	69f9      	ldr	r1, [r7, #28]
 8003872:	4401      	add	r1, r0
 8003874:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003878:	4313      	orrs	r3, r2
 800387a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d14b      	bne.n	800391a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003896:	461a      	mov	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	791b      	ldrb	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d128      	bne.n	80038f8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d110      	bne.n	80038d8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	0151      	lsls	r1, r2, #5
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	440a      	add	r2, r1
 80038cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00f      	b.n	80038f8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	0151      	lsls	r1, r2, #5
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	440a      	add	r2, r1
 80038ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003912:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e166      	b.n	8003be8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	0151      	lsls	r1, r2, #5
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	440a      	add	r2, r1
 8003930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003934:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003938:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	791b      	ldrb	r3, [r3, #4]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d015      	beq.n	800396e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 814e 	beq.w	8003be8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	69f9      	ldr	r1, [r7, #28]
 8003964:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003968:	4313      	orrs	r3, r2
 800396a:	634b      	str	r3, [r1, #52]	@ 0x34
 800396c:	e13c      	b.n	8003be8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d110      	bne.n	80039a0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	440a      	add	r2, r1
 8003994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003998:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00f      	b.n	80039c0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039be:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	68d9      	ldr	r1, [r3, #12]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	b298      	uxth	r0, r3
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	4603      	mov	r3, r0
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f9b9 	bl	8003d4c <USB_WritePacket>
 80039da:	e105      	b.n	8003be8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	0151      	lsls	r1, r2, #5
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	440a      	add	r2, r1
 80039f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039f6:	0cdb      	lsrs	r3, r3, #19
 80039f8:	04db      	lsls	r3, r3, #19
 80039fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003a1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003a1e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d132      	bne.n	8003a8c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a54:	69b9      	ldr	r1, [r7, #24]
 8003a56:	0148      	lsls	r0, r1, #5
 8003a58:	69f9      	ldr	r1, [r7, #28]
 8003a5a:	4401      	add	r1, r0
 8003a5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a60:	4313      	orrs	r3, r2
 8003a62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a82:	6113      	str	r3, [r2, #16]
 8003a84:	e062      	b.n	8003b4c <USB_EPStartXfer+0x490>
 8003a86:	bf00      	nop
 8003a88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d123      	bne.n	8003adc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aaa:	69b9      	ldr	r1, [r7, #24]
 8003aac:	0148      	lsls	r0, r1, #5
 8003aae:	69f9      	ldr	r1, [r7, #28]
 8003ab0:	4401      	add	r1, r0
 8003ab2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	0151      	lsls	r1, r2, #5
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	440a      	add	r2, r1
 8003ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ad4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ad8:	6113      	str	r3, [r2, #16]
 8003ada:	e037      	b.n	8003b4c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	1e5a      	subs	r2, r3, #1
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	8afa      	ldrh	r2, [r7, #22]
 8003af8:	fb03 f202 	mul.w	r2, r3, r2
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	8afb      	ldrh	r3, [r7, #22]
 8003b10:	04d9      	lsls	r1, r3, #19
 8003b12:	4b38      	ldr	r3, [pc, #224]	@ (8003bf4 <USB_EPStartXfer+0x538>)
 8003b14:	400b      	ands	r3, r1
 8003b16:	69b9      	ldr	r1, [r7, #24]
 8003b18:	0148      	lsls	r0, r1, #5
 8003b1a:	69f9      	ldr	r1, [r7, #28]
 8003b1c:	4401      	add	r1, r0
 8003b1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b22:	4313      	orrs	r3, r2
 8003b24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	0148      	lsls	r0, r1, #5
 8003b40:	69f9      	ldr	r1, [r7, #28]
 8003b42:	4401      	add	r1, r0
 8003b44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10d      	bne.n	8003b6e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	68d9      	ldr	r1, [r3, #12]
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	791b      	ldrb	r3, [r3, #4]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d128      	bne.n	8003bc8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d110      	bne.n	8003ba8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	0151      	lsls	r1, r2, #5
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ba0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e00f      	b.n	8003bc8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	0151      	lsls	r1, r2, #5
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	440a      	add	r2, r1
 8003bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003be2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003be6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	1ff80000 	.word	0x1ff80000

08003bf8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d14a      	bne.n	8003cac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c2e:	f040 8086 	bne.w	8003d3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	7812      	ldrb	r2, [r2, #0]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d902      	bls.n	8003c90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
          break;
 8003c8e:	e056      	b.n	8003d3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ca8:	d0e7      	beq.n	8003c7a <USB_EPStopXfer+0x82>
 8003caa:	e048      	b.n	8003d3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cc4:	d13b      	bne.n	8003d3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ce4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ce8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d902      	bls.n	8003d24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
          break;
 8003d22:	e00c      	b.n	8003d3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d3c:	d0e7      	beq.n	8003d0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	@ 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	71fb      	strb	r3, [r7, #7]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d123      	bne.n	8003dba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d72:	88bb      	ldrh	r3, [r7, #4]
 8003d74:	3303      	adds	r3, #3
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	e018      	b.n	8003db2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	031a      	lsls	r2, r3, #12
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	3301      	adds	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	3301      	adds	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3301      	adds	r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	3301      	adds	r3, #1
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d3e2      	bcc.n	8003d80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3724      	adds	r7, #36	@ 0x24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b08b      	sub	sp, #44	@ 0x2c
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	e014      	b.n	8003e1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	3301      	adds	r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	3301      	adds	r3, #1
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	3301      	adds	r3, #1
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	3301      	adds	r3, #1
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	623b      	str	r3, [r7, #32]
 8003e1e:	6a3a      	ldr	r2, [r7, #32]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3e6      	bcc.n	8003df4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e26:	8bfb      	ldrh	r3, [r7, #30]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01e      	beq.n	8003e6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e36:	461a      	mov	r2, r3
 8003e38:	f107 0310 	add.w	r3, r7, #16
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	701a      	strb	r2, [r3, #0]
      i++;
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	3301      	adds	r3, #1
 8003e56:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003e5e:	8bfb      	ldrh	r3, [r7, #30]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e64:	8bfb      	ldrh	r3, [r7, #30]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ea      	bne.n	8003e40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	372c      	adds	r7, #44	@ 0x2c
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d12c      	bne.n	8003eee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	db12      	blt.n	8003ecc <USB_EPSetStall+0x54>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00f      	beq.n	8003ecc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ec6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ee6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e02b      	b.n	8003f46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	db12      	blt.n	8003f26 <USB_EPSetStall+0xae>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00f      	beq.n	8003f26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d128      	bne.n	8003fc2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	0151      	lsls	r1, r2, #5
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	440a      	add	r2, r1
 8003f86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	791b      	ldrb	r3, [r3, #4]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d003      	beq.n	8003fa0 <USB_EPClearStall+0x4c>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	791b      	ldrb	r3, [r3, #4]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d138      	bne.n	8004012 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e027      	b.n	8004012 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fdc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fe0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	791b      	ldrb	r3, [r3, #4]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d003      	beq.n	8003ff2 <USB_EPClearStall+0x9e>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	791b      	ldrb	r3, [r3, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d10f      	bne.n	8004012 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004010:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800403e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004042:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004054:	68f9      	ldr	r1, [r7, #12]
 8004056:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800409a:	f023 0302 	bic.w	r3, r3, #2
 800409e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040c8:	f023 0303 	bic.w	r3, r3, #3
 80040cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040dc:	f043 0302 	orr.w	r3, r3, #2
 80040e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004108:	68fb      	ldr	r3, [r7, #12]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	4013      	ands	r3, r2
 8004138:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800414a:	b480      	push	{r7}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	b29b      	uxth	r3, r3
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041ac:	68bb      	ldr	r3, [r7, #8]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b087      	sub	sp, #28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	01db      	lsls	r3, r3, #7
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4013      	ands	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004208:	68bb      	ldr	r3, [r7, #8]
}
 800420a:	4618      	mov	r0, r3
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0301 	and.w	r3, r3, #1
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800424c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004250:	f023 0307 	bic.w	r3, r3, #7
 8004254:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004268:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	460b      	mov	r3, r1
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	333c      	adds	r3, #60	@ 0x3c
 800428e:	3304      	adds	r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4a26      	ldr	r2, [pc, #152]	@ (8004330 <USB_EP0_OutStart+0xb8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d90a      	bls.n	80042b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042ac:	d101      	bne.n	80042b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e037      	b.n	8004322 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	2300      	movs	r3, #0
 80042bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042e0:	f043 0318 	orr.w	r3, r3, #24
 80042e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042f4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80042f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10f      	bne.n	8004320 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800431a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800431e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	4f54300a 	.word	0x4f54300a

08004334 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800434c:	d901      	bls.n	8004352 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e01b      	b.n	800438a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	daf2      	bge.n	8004340 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3301      	adds	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004376:	d901      	bls.n	800437c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e006      	b.n	800438a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d0f0      	beq.n	800436a <USB_CoreReset+0x36>

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80043a4:	2010      	movs	r0, #16
 80043a6:	f002 f921 	bl	80065ec <USBD_static_malloc>
 80043aa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	32b0      	adds	r2, #176	@ 0xb0
 80043bc:	2100      	movs	r1, #0
 80043be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80043c2:	2302      	movs	r3, #2
 80043c4:	e048      	b.n	8004458 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	32b0      	adds	r2, #176	@ 0xb0
 80043d0:	68f9      	ldr	r1, [r7, #12]
 80043d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	32b0      	adds	r2, #176	@ 0xb0
 80043e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	7c1b      	ldrb	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80043f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004460 <USBD_HID_Init+0xc8>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	f003 020f 	and.w	r2, r3, #15
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	3326      	adds	r3, #38	@ 0x26
 8004408:	2207      	movs	r2, #7
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	e00c      	b.n	8004428 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800440e:	4b14      	ldr	r3, [pc, #80]	@ (8004460 <USBD_HID_Init+0xc8>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	f003 020f 	and.w	r2, r3, #15
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3326      	adds	r3, #38	@ 0x26
 8004424:	220a      	movs	r2, #10
 8004426:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004428:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <USBD_HID_Init+0xc8>)
 800442a:	7819      	ldrb	r1, [r3, #0]
 800442c:	2304      	movs	r3, #4
 800442e:	2203      	movs	r2, #3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f001 ffca 	bl	80063ca <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004436:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <USBD_HID_Init+0xc8>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	f003 020f 	and.w	r2, r3, #15
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	3324      	adds	r3, #36	@ 0x24
 800444c:	2201      	movs	r2, #1
 800444e:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	200000a3 	.word	0x200000a3

08004464 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8004470:	4b1f      	ldr	r3, [pc, #124]	@ (80044f0 <USBD_HID_DeInit+0x8c>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f001 ffcd 	bl	8006416 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800447c:	4b1c      	ldr	r3, [pc, #112]	@ (80044f0 <USBD_HID_DeInit+0x8c>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	3324      	adds	r3, #36	@ 0x24
 8004492:	2200      	movs	r2, #0
 8004494:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004496:	4b16      	ldr	r3, [pc, #88]	@ (80044f0 <USBD_HID_DeInit+0x8c>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	f003 020f 	and.w	r2, r3, #15
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	3326      	adds	r3, #38	@ 0x26
 80044ac:	2200      	movs	r2, #0
 80044ae:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	32b0      	adds	r2, #176	@ 0xb0
 80044ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d011      	beq.n	80044e6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	32b0      	adds	r2, #176	@ 0xb0
 80044cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f002 f899 	bl	8006608 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	32b0      	adds	r2, #176	@ 0xb0
 80044e0:	2100      	movs	r1, #0
 80044e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	200000a3 	.word	0x200000a3

080044f4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	32b0      	adds	r2, #176	@ 0xb0
 8004508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800451c:	2303      	movs	r3, #3
 800451e:	e0e8      	b.n	80046f2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004528:	2b00      	cmp	r3, #0
 800452a:	d046      	beq.n	80045ba <USBD_HID_Setup+0xc6>
 800452c:	2b20      	cmp	r3, #32
 800452e:	f040 80d8 	bne.w	80046e2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	3b02      	subs	r3, #2
 8004538:	2b09      	cmp	r3, #9
 800453a:	d836      	bhi.n	80045aa <USBD_HID_Setup+0xb6>
 800453c:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <USBD_HID_Setup+0x50>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	0800459b 	.word	0x0800459b
 8004548:	0800457b 	.word	0x0800457b
 800454c:	080045ab 	.word	0x080045ab
 8004550:	080045ab 	.word	0x080045ab
 8004554:	080045ab 	.word	0x080045ab
 8004558:	080045ab 	.word	0x080045ab
 800455c:	080045ab 	.word	0x080045ab
 8004560:	080045ab 	.word	0x080045ab
 8004564:	08004589 	.word	0x08004589
 8004568:	0800456d 	.word	0x0800456d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	885b      	ldrh	r3, [r3, #2]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]
          break;
 8004578:	e01e      	b.n	80045b8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f001 fbe5 	bl	8005d50 <USBD_CtlSendData>
          break;
 8004586:	e017      	b.n	80045b8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	885b      	ldrh	r3, [r3, #2]
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	b29b      	uxth	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	605a      	str	r2, [r3, #4]
          break;
 8004598:	e00e      	b.n	80045b8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3304      	adds	r3, #4
 800459e:	2201      	movs	r2, #1
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f001 fbd4 	bl	8005d50 <USBD_CtlSendData>
          break;
 80045a8:	e006      	b.n	80045b8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80045aa:	6839      	ldr	r1, [r7, #0]
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f001 fb52 	bl	8005c56 <USBD_CtlError>
          ret = USBD_FAIL;
 80045b2:	2303      	movs	r3, #3
 80045b4:	75fb      	strb	r3, [r7, #23]
          break;
 80045b6:	bf00      	nop
      }
      break;
 80045b8:	e09a      	b.n	80046f0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	785b      	ldrb	r3, [r3, #1]
 80045be:	2b0b      	cmp	r3, #11
 80045c0:	f200 8086 	bhi.w	80046d0 <USBD_HID_Setup+0x1dc>
 80045c4:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <USBD_HID_Setup+0xd8>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080045fd 	.word	0x080045fd
 80045d0:	080046df 	.word	0x080046df
 80045d4:	080046d1 	.word	0x080046d1
 80045d8:	080046d1 	.word	0x080046d1
 80045dc:	080046d1 	.word	0x080046d1
 80045e0:	080046d1 	.word	0x080046d1
 80045e4:	08004627 	.word	0x08004627
 80045e8:	080046d1 	.word	0x080046d1
 80045ec:	080046d1 	.word	0x080046d1
 80045f0:	080046d1 	.word	0x080046d1
 80045f4:	0800467f 	.word	0x0800467f
 80045f8:	080046a9 	.word	0x080046a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b03      	cmp	r3, #3
 8004606:	d107      	bne.n	8004618 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004608:	f107 030a 	add.w	r3, r7, #10
 800460c:	2202      	movs	r2, #2
 800460e:	4619      	mov	r1, r3
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 fb9d 	bl	8005d50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004616:	e063      	b.n	80046e0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 fb1b 	bl	8005c56 <USBD_CtlError>
            ret = USBD_FAIL;
 8004620:	2303      	movs	r3, #3
 8004622:	75fb      	strb	r3, [r7, #23]
          break;
 8004624:	e05c      	b.n	80046e0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	885b      	ldrh	r3, [r3, #2]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b22      	cmp	r3, #34	@ 0x22
 8004630:	d108      	bne.n	8004644 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	88db      	ldrh	r3, [r3, #6]
 8004636:	2b1f      	cmp	r3, #31
 8004638:	bf28      	it	cs
 800463a:	231f      	movcs	r3, #31
 800463c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800463e:	4b2f      	ldr	r3, [pc, #188]	@ (80046fc <USBD_HID_Setup+0x208>)
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	e015      	b.n	8004670 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	885b      	ldrh	r3, [r3, #2]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b21      	cmp	r3, #33	@ 0x21
 800464e:	d108      	bne.n	8004662 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8004650:	4b2b      	ldr	r3, [pc, #172]	@ (8004700 <USBD_HID_Setup+0x20c>)
 8004652:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	88db      	ldrh	r3, [r3, #6]
 8004658:	2b09      	cmp	r3, #9
 800465a:	bf28      	it	cs
 800465c:	2309      	movcs	r3, #9
 800465e:	82bb      	strh	r3, [r7, #20]
 8004660:	e006      	b.n	8004670 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 faf6 	bl	8005c56 <USBD_CtlError>
            ret = USBD_FAIL;
 800466a:	2303      	movs	r3, #3
 800466c:	75fb      	strb	r3, [r7, #23]
            break;
 800466e:	e037      	b.n	80046e0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004670:	8abb      	ldrh	r3, [r7, #20]
 8004672:	461a      	mov	r2, r3
 8004674:	6939      	ldr	r1, [r7, #16]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f001 fb6a 	bl	8005d50 <USBD_CtlSendData>
          break;
 800467c:	e030      	b.n	80046e0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b03      	cmp	r3, #3
 8004688:	d107      	bne.n	800469a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3308      	adds	r3, #8
 800468e:	2201      	movs	r2, #1
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 fb5c 	bl	8005d50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004698:	e022      	b.n	80046e0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800469a:	6839      	ldr	r1, [r7, #0]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f001 fada 	bl	8005c56 <USBD_CtlError>
            ret = USBD_FAIL;
 80046a2:	2303      	movs	r3, #3
 80046a4:	75fb      	strb	r3, [r7, #23]
          break;
 80046a6:	e01b      	b.n	80046e0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d106      	bne.n	80046c2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	885b      	ldrh	r3, [r3, #2]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046c0:	e00e      	b.n	80046e0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f001 fac6 	bl	8005c56 <USBD_CtlError>
            ret = USBD_FAIL;
 80046ca:	2303      	movs	r3, #3
 80046cc:	75fb      	strb	r3, [r7, #23]
          break;
 80046ce:	e007      	b.n	80046e0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f001 fabf 	bl	8005c56 <USBD_CtlError>
          ret = USBD_FAIL;
 80046d8:	2303      	movs	r3, #3
 80046da:	75fb      	strb	r3, [r7, #23]
          break;
 80046dc:	e000      	b.n	80046e0 <USBD_HID_Setup+0x1ec>
          break;
 80046de:	bf00      	nop
      }
      break;
 80046e0:	e006      	b.n	80046f0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f001 fab6 	bl	8005c56 <USBD_CtlError>
      ret = USBD_FAIL;
 80046ea:	2303      	movs	r3, #3
 80046ec:	75fb      	strb	r3, [r7, #23]
      break;
 80046ee:	bf00      	nop
  }

  return (uint8_t)ret;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000084 	.word	0x20000084
 8004700:	2000006c 	.word	0x2000006c

08004704 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	32b0      	adds	r2, #176	@ 0xb0
 800471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004720:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004728:	2303      	movs	r3, #3
 800472a:	e014      	b.n	8004756 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d10d      	bne.n	8004754 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	7b1b      	ldrb	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2201      	movs	r2, #1
 8004744:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8004746:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <USBD_HID_SendReport+0x5c>)
 8004748:	7819      	ldrb	r1, [r3, #0]
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f001 ff09 	bl	8006566 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200000a3 	.word	0x200000a3

08004764 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800476c:	2181      	movs	r1, #129	@ 0x81
 800476e:	4809      	ldr	r0, [pc, #36]	@ (8004794 <USBD_HID_GetFSCfgDesc+0x30>)
 8004770:	f000 fc3b 	bl	8004fea <USBD_GetEpDesc>
 8004774:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	220a      	movs	r2, #10
 8004780:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2222      	movs	r2, #34	@ 0x22
 8004786:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004788:	4b02      	ldr	r3, [pc, #8]	@ (8004794 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000048 	.word	0x20000048

08004798 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80047a0:	2181      	movs	r1, #129	@ 0x81
 80047a2:	4809      	ldr	r0, [pc, #36]	@ (80047c8 <USBD_HID_GetHSCfgDesc+0x30>)
 80047a4:	f000 fc21 	bl	8004fea <USBD_GetEpDesc>
 80047a8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2207      	movs	r2, #7
 80047b4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2222      	movs	r2, #34	@ 0x22
 80047ba:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80047bc:	4b02      	ldr	r3, [pc, #8]	@ (80047c8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000048 	.word	0x20000048

080047cc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80047d4:	2181      	movs	r1, #129	@ 0x81
 80047d6:	4809      	ldr	r0, [pc, #36]	@ (80047fc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80047d8:	f000 fc07 	bl	8004fea <USBD_GetEpDesc>
 80047dc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	220a      	movs	r2, #10
 80047e8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2222      	movs	r2, #34	@ 0x22
 80047ee:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80047f0:	4b02      	ldr	r3, [pc, #8]	@ (80047fc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000048 	.word	0x20000048

08004800 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	32b0      	adds	r2, #176	@ 0xb0
 8004816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481a:	2200      	movs	r2, #0
 800481c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	220a      	movs	r2, #10
 8004838:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800483a:	4b03      	ldr	r3, [pc, #12]	@ (8004848 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000078 	.word	0x20000078

0800484c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004860:	2303      	movs	r3, #3
 8004862:	e01f      	b.n	80048a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	79fa      	ldrb	r2, [r7, #7]
 8004896:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f001 fd2f 	bl	80062fc <USBD_LL_Init>
 800489e:	4603      	mov	r3, r0
 80048a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e025      	b.n	8004910 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	32ae      	adds	r2, #174	@ 0xae
 80048d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00f      	beq.n	8004900 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	32ae      	adds	r2, #174	@ 0xae
 80048ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	f107 020e 	add.w	r2, r7, #14
 80048f4:	4610      	mov	r0, r2
 80048f6:	4798      	blx	r3
 80048f8:	4602      	mov	r2, r0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 fd37 	bl	8006394 <USBD_LL_Start>
 8004926:	4603      	mov	r3, r0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004938:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d009      	beq.n	8004974 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	4611      	mov	r1, r2
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
 8004970:	4603      	mov	r3, r0
 8004972:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	4611      	mov	r1, r2
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80049a4:	2303      	movs	r3, #3
 80049a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80049c2:	6839      	ldr	r1, [r7, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 f90c 	bl	8005be2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80049d8:	461a      	mov	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d01a      	beq.n	8004a24 <USBD_LL_SetupStage+0x72>
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d822      	bhi.n	8004a38 <USBD_LL_SetupStage+0x86>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <USBD_LL_SetupStage+0x4a>
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d00a      	beq.n	8004a10 <USBD_LL_SetupStage+0x5e>
 80049fa:	e01d      	b.n	8004a38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fb63 	bl	80050d0 <USBD_StdDevReq>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a0e:	e020      	b.n	8004a52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a16:	4619      	mov	r1, r3
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fbcb 	bl	80051b4 <USBD_StdItfReq>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	73fb      	strb	r3, [r7, #15]
      break;
 8004a22:	e016      	b.n	8004a52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fc2d 	bl	800528c <USBD_StdEPReq>
 8004a32:	4603      	mov	r3, r0
 8004a34:	73fb      	strb	r3, [r7, #15]
      break;
 8004a36:	e00c      	b.n	8004a52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f001 fd04 	bl	8006454 <USBD_LL_StallEP>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a50:	bf00      	nop
  }

  return ret;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	460b      	mov	r3, r1
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004a6e:	7afb      	ldrb	r3, [r7, #11]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d16e      	bne.n	8004b52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004a7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	f040 8098 	bne.w	8004bb8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d913      	bls.n	8004abc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	1ad2      	subs	r2, r2, r3
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	bf28      	it	cs
 8004aae:	4613      	movcs	r3, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f001 f977 	bl	8005da8 <USBD_CtlContinueRx>
 8004aba:	e07d      	b.n	8004bb8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d014      	beq.n	8004af4 <USBD_LL_DataOutStage+0x98>
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d81d      	bhi.n	8004b0a <USBD_LL_DataOutStage+0xae>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <USBD_LL_DataOutStage+0x7c>
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d003      	beq.n	8004ade <USBD_LL_DataOutStage+0x82>
 8004ad6:	e018      	b.n	8004b0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	75bb      	strb	r3, [r7, #22]
            break;
 8004adc:	e018      	b.n	8004b10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fa64 	bl	8004fb6 <USBD_CoreFindIF>
 8004aee:	4603      	mov	r3, r0
 8004af0:	75bb      	strb	r3, [r7, #22]
            break;
 8004af2:	e00d      	b.n	8004b10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	4619      	mov	r1, r3
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fa66 	bl	8004fd0 <USBD_CoreFindEP>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75bb      	strb	r3, [r7, #22]
            break;
 8004b08:	e002      	b.n	8004b10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	75bb      	strb	r3, [r7, #22]
            break;
 8004b0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004b10:	7dbb      	ldrb	r3, [r7, #22]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d119      	bne.n	8004b4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d113      	bne.n	8004b4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004b22:	7dba      	ldrb	r2, [r7, #22]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	32ae      	adds	r2, #174	@ 0xae
 8004b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004b32:	7dba      	ldrb	r2, [r7, #22]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004b3a:	7dba      	ldrb	r2, [r7, #22]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	32ae      	adds	r2, #174	@ 0xae
 8004b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f001 f93d 	bl	8005dca <USBD_CtlSendStatus>
 8004b50:	e032      	b.n	8004bb8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004b52:	7afb      	ldrb	r3, [r7, #11]
 8004b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fa37 	bl	8004fd0 <USBD_CoreFindEP>
 8004b62:	4603      	mov	r3, r0
 8004b64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004b66:	7dbb      	ldrb	r3, [r7, #22]
 8004b68:	2bff      	cmp	r3, #255	@ 0xff
 8004b6a:	d025      	beq.n	8004bb8 <USBD_LL_DataOutStage+0x15c>
 8004b6c:	7dbb      	ldrb	r3, [r7, #22]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d122      	bne.n	8004bb8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d117      	bne.n	8004bae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004b7e:	7dba      	ldrb	r2, [r7, #22]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	32ae      	adds	r2, #174	@ 0xae
 8004b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00f      	beq.n	8004bae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004b8e:	7dba      	ldrb	r2, [r7, #22]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004b96:	7dba      	ldrb	r2, [r7, #22]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	32ae      	adds	r2, #174	@ 0xae
 8004b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	7afa      	ldrb	r2, [r7, #11]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	4798      	blx	r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
 8004bb6:	e000      	b.n	8004bba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d16f      	bne.n	8004cb6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3314      	adds	r3, #20
 8004bda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d15a      	bne.n	8004c9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d914      	bls.n	8004c1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f001 f8bc 	bl	8005d86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2200      	movs	r2, #0
 8004c12:	2100      	movs	r1, #0
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f001 fcc7 	bl	80065a8 <USBD_LL_PrepareReceive>
 8004c1a:	e03f      	b.n	8004c9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d11c      	bne.n	8004c62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d316      	bcc.n	8004c62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d20f      	bcs.n	8004c62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004c42:	2200      	movs	r2, #0
 8004c44:	2100      	movs	r1, #0
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f001 f89d 	bl	8005d86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c54:	2300      	movs	r3, #0
 8004c56:	2200      	movs	r2, #0
 8004c58:	2100      	movs	r1, #0
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f001 fca4 	bl	80065a8 <USBD_LL_PrepareReceive>
 8004c60:	e01c      	b.n	8004c9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d10f      	bne.n	8004c8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c8e:	2180      	movs	r1, #128	@ 0x80
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f001 fbdf 	bl	8006454 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f001 f8aa 	bl	8005df0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d03a      	beq.n	8004d1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff fe42 	bl	8004930 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004cb4:	e032      	b.n	8004d1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004cb6:	7afb      	ldrb	r3, [r7, #11]
 8004cb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f985 	bl	8004fd0 <USBD_CoreFindEP>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2bff      	cmp	r3, #255	@ 0xff
 8004cce:	d025      	beq.n	8004d1c <USBD_LL_DataInStage+0x15a>
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d122      	bne.n	8004d1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d11c      	bne.n	8004d1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004ce2:	7dfa      	ldrb	r2, [r7, #23]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	32ae      	adds	r2, #174	@ 0xae
 8004ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d014      	beq.n	8004d1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004cf2:	7dfa      	ldrb	r2, [r7, #23]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004cfa:	7dfa      	ldrb	r2, [r7, #23]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	32ae      	adds	r2, #174	@ 0xae
 8004d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	7afa      	ldrb	r2, [r7, #11]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	4798      	blx	r3
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004d12:	7dbb      	ldrb	r3, [r7, #22]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004d18:	7dbb      	ldrb	r3, [r7, #22]
 8004d1a:	e000      	b.n	8004d1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d014      	beq.n	8004d8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00e      	beq.n	8004d8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6852      	ldr	r2, [r2, #4]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d8c:	2340      	movs	r3, #64	@ 0x40
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2100      	movs	r1, #0
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 fb19 	bl	80063ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2240      	movs	r2, #64	@ 0x40
 8004da4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004da8:	2340      	movs	r3, #64	@ 0x40
 8004daa:	2200      	movs	r2, #0
 8004dac:	2180      	movs	r1, #128	@ 0x80
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f001 fb0b 	bl	80063ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2240      	movs	r2, #64	@ 0x40
 8004dbe:	621a      	str	r2, [r3, #32]

  return ret;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d006      	beq.n	8004e0c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d106      	bne.n	8004e44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d110      	bne.n	8004e88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	32ae      	adds	r2, #174	@ 0xae
 8004ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e01c      	b.n	8004eee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d115      	bne.n	8004eec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	32ae      	adds	r2, #174	@ 0xae
 8004eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	32ae      	adds	r2, #174	@ 0xae
 8004ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	32ae      	adds	r2, #174	@ 0xae
 8004f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e01c      	b.n	8004f52 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d115      	bne.n	8004f50 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	32ae      	adds	r2, #174	@ 0xae
 8004f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	32ae      	adds	r2, #174	@ 0xae
 8004f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00e      	beq.n	8004fac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6852      	ldr	r2, [r2, #4]
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004fc2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004fdc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	885b      	ldrh	r3, [r3, #2]
 8005006:	b29b      	uxth	r3, r3
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	7812      	ldrb	r2, [r2, #0]
 800500c:	4293      	cmp	r3, r2
 800500e:	d91f      	bls.n	8005050 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005016:	e013      	b.n	8005040 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005018:	f107 030a 	add.w	r3, r7, #10
 800501c:	4619      	mov	r1, r3
 800501e:	6978      	ldr	r0, [r7, #20]
 8005020:	f000 f81b 	bl	800505a <USBD_GetNextDesc>
 8005024:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	2b05      	cmp	r3, #5
 800502c:	d108      	bne.n	8005040 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	789b      	ldrb	r3, [r3, #2]
 8005036:	78fa      	ldrb	r2, [r7, #3]
 8005038:	429a      	cmp	r2, r3
 800503a:	d008      	beq.n	800504e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	885b      	ldrh	r3, [r3, #2]
 8005044:	b29a      	uxth	r2, r3
 8005046:	897b      	ldrh	r3, [r7, #10]
 8005048:	429a      	cmp	r2, r3
 800504a:	d8e5      	bhi.n	8005018 <USBD_GetEpDesc+0x2e>
 800504c:	e000      	b.n	8005050 <USBD_GetEpDesc+0x66>
          break;
 800504e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005050:	693b      	ldr	r3, [r7, #16]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	7812      	ldrb	r2, [r2, #0]
 8005070:	4413      	add	r3, r2
 8005072:	b29a      	uxth	r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005084:	68fb      	ldr	r3, [r7, #12]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3301      	adds	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80050b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	b21a      	sxth	r2, r3
 80050b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050bc:	4313      	orrs	r3, r2
 80050be:	b21b      	sxth	r3, r3
 80050c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80050c2:	89fb      	ldrh	r3, [r7, #14]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80050e6:	2b40      	cmp	r3, #64	@ 0x40
 80050e8:	d005      	beq.n	80050f6 <USBD_StdDevReq+0x26>
 80050ea:	2b40      	cmp	r3, #64	@ 0x40
 80050ec:	d857      	bhi.n	800519e <USBD_StdDevReq+0xce>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00f      	beq.n	8005112 <USBD_StdDevReq+0x42>
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d153      	bne.n	800519e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	32ae      	adds	r2, #174	@ 0xae
 8005100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	e04a      	b.n	80051a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	2b09      	cmp	r3, #9
 8005118:	d83b      	bhi.n	8005192 <USBD_StdDevReq+0xc2>
 800511a:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <USBD_StdDevReq+0x50>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005175 	.word	0x08005175
 8005124:	08005189 	.word	0x08005189
 8005128:	08005193 	.word	0x08005193
 800512c:	0800517f 	.word	0x0800517f
 8005130:	08005193 	.word	0x08005193
 8005134:	08005153 	.word	0x08005153
 8005138:	08005149 	.word	0x08005149
 800513c:	08005193 	.word	0x08005193
 8005140:	0800516b 	.word	0x0800516b
 8005144:	0800515d 	.word	0x0800515d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fa3c 	bl	80055c8 <USBD_GetDescriptor>
          break;
 8005150:	e024      	b.n	800519c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fba1 	bl	800589c <USBD_SetAddress>
          break;
 800515a:	e01f      	b.n	800519c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fbe0 	bl	8005924 <USBD_SetConfig>
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]
          break;
 8005168:	e018      	b.n	800519c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800516a:	6839      	ldr	r1, [r7, #0]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fc83 	bl	8005a78 <USBD_GetConfig>
          break;
 8005172:	e013      	b.n	800519c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fcb4 	bl	8005ae4 <USBD_GetStatus>
          break;
 800517c:	e00e      	b.n	800519c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800517e:	6839      	ldr	r1, [r7, #0]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fce3 	bl	8005b4c <USBD_SetFeature>
          break;
 8005186:	e009      	b.n	800519c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fd07 	bl	8005b9e <USBD_ClrFeature>
          break;
 8005190:	e004      	b.n	800519c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fd5e 	bl	8005c56 <USBD_CtlError>
          break;
 800519a:	bf00      	nop
      }
      break;
 800519c:	e004      	b.n	80051a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800519e:	6839      	ldr	r1, [r7, #0]
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fd58 	bl	8005c56 <USBD_CtlError>
      break;
 80051a6:	bf00      	nop
  }

  return ret;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop

080051b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80051ca:	2b40      	cmp	r3, #64	@ 0x40
 80051cc:	d005      	beq.n	80051da <USBD_StdItfReq+0x26>
 80051ce:	2b40      	cmp	r3, #64	@ 0x40
 80051d0:	d852      	bhi.n	8005278 <USBD_StdItfReq+0xc4>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <USBD_StdItfReq+0x26>
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d14e      	bne.n	8005278 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d840      	bhi.n	800526a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	889b      	ldrh	r3, [r3, #4]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d836      	bhi.n	8005260 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	889b      	ldrh	r3, [r3, #4]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fedb 	bl	8004fb6 <USBD_CoreFindIF>
 8005200:	4603      	mov	r3, r0
 8005202:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005204:	7bbb      	ldrb	r3, [r7, #14]
 8005206:	2bff      	cmp	r3, #255	@ 0xff
 8005208:	d01d      	beq.n	8005246 <USBD_StdItfReq+0x92>
 800520a:	7bbb      	ldrb	r3, [r7, #14]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d11a      	bne.n	8005246 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005210:	7bba      	ldrb	r2, [r7, #14]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	32ae      	adds	r2, #174	@ 0xae
 8005216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00f      	beq.n	8005240 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005220:	7bba      	ldrb	r2, [r7, #14]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005228:	7bba      	ldrb	r2, [r7, #14]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	32ae      	adds	r2, #174	@ 0xae
 800522e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	4798      	blx	r3
 800523a:	4603      	mov	r3, r0
 800523c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800523e:	e004      	b.n	800524a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005240:	2303      	movs	r3, #3
 8005242:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005244:	e001      	b.n	800524a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005246:	2303      	movs	r3, #3
 8005248:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	88db      	ldrh	r3, [r3, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d110      	bne.n	8005274 <USBD_StdItfReq+0xc0>
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10d      	bne.n	8005274 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fdb6 	bl	8005dca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800525e:	e009      	b.n	8005274 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fcf7 	bl	8005c56 <USBD_CtlError>
          break;
 8005268:	e004      	b.n	8005274 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fcf2 	bl	8005c56 <USBD_CtlError>
          break;
 8005272:	e000      	b.n	8005276 <USBD_StdItfReq+0xc2>
          break;
 8005274:	bf00      	nop
      }
      break;
 8005276:	e004      	b.n	8005282 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fceb 	bl	8005c56 <USBD_CtlError>
      break;
 8005280:	bf00      	nop
  }

  return ret;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	889b      	ldrh	r3, [r3, #4]
 800529e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d007      	beq.n	80052bc <USBD_StdEPReq+0x30>
 80052ac:	2b40      	cmp	r3, #64	@ 0x40
 80052ae:	f200 817f 	bhi.w	80055b0 <USBD_StdEPReq+0x324>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d02a      	beq.n	800530c <USBD_StdEPReq+0x80>
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	f040 817a 	bne.w	80055b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	4619      	mov	r1, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff fe85 	bl	8004fd0 <USBD_CoreFindEP>
 80052c6:	4603      	mov	r3, r0
 80052c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052ca:	7b7b      	ldrb	r3, [r7, #13]
 80052cc:	2bff      	cmp	r3, #255	@ 0xff
 80052ce:	f000 8174 	beq.w	80055ba <USBD_StdEPReq+0x32e>
 80052d2:	7b7b      	ldrb	r3, [r7, #13]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f040 8170 	bne.w	80055ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80052da:	7b7a      	ldrb	r2, [r7, #13]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80052e2:	7b7a      	ldrb	r2, [r7, #13]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	32ae      	adds	r2, #174	@ 0xae
 80052e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 8163 	beq.w	80055ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80052f4:	7b7a      	ldrb	r2, [r7, #13]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	32ae      	adds	r2, #174	@ 0xae
 80052fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	4798      	blx	r3
 8005306:	4603      	mov	r3, r0
 8005308:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800530a:	e156      	b.n	80055ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	2b03      	cmp	r3, #3
 8005312:	d008      	beq.n	8005326 <USBD_StdEPReq+0x9a>
 8005314:	2b03      	cmp	r3, #3
 8005316:	f300 8145 	bgt.w	80055a4 <USBD_StdEPReq+0x318>
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 809b 	beq.w	8005456 <USBD_StdEPReq+0x1ca>
 8005320:	2b01      	cmp	r3, #1
 8005322:	d03c      	beq.n	800539e <USBD_StdEPReq+0x112>
 8005324:	e13e      	b.n	80055a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d002      	beq.n	8005338 <USBD_StdEPReq+0xac>
 8005332:	2b03      	cmp	r3, #3
 8005334:	d016      	beq.n	8005364 <USBD_StdEPReq+0xd8>
 8005336:	e02c      	b.n	8005392 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005338:	7bbb      	ldrb	r3, [r7, #14]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <USBD_StdEPReq+0xce>
 800533e:	7bbb      	ldrb	r3, [r7, #14]
 8005340:	2b80      	cmp	r3, #128	@ 0x80
 8005342:	d00a      	beq.n	800535a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005344:	7bbb      	ldrb	r3, [r7, #14]
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 f883 	bl	8006454 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800534e:	2180      	movs	r1, #128	@ 0x80
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 f87f 	bl	8006454 <USBD_LL_StallEP>
 8005356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005358:	e020      	b.n	800539c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fc7a 	bl	8005c56 <USBD_CtlError>
              break;
 8005362:	e01b      	b.n	800539c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	885b      	ldrh	r3, [r3, #2]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10e      	bne.n	800538a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800536c:	7bbb      	ldrb	r3, [r7, #14]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <USBD_StdEPReq+0xfe>
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	2b80      	cmp	r3, #128	@ 0x80
 8005376:	d008      	beq.n	800538a <USBD_StdEPReq+0xfe>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	88db      	ldrh	r3, [r3, #6]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005380:	7bbb      	ldrb	r3, [r7, #14]
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 f865 	bl	8006454 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fd1d 	bl	8005dca <USBD_CtlSendStatus>

              break;
 8005390:	e004      	b.n	800539c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fc5e 	bl	8005c56 <USBD_CtlError>
              break;
 800539a:	bf00      	nop
          }
          break;
 800539c:	e107      	b.n	80055ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d002      	beq.n	80053b0 <USBD_StdEPReq+0x124>
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d016      	beq.n	80053dc <USBD_StdEPReq+0x150>
 80053ae:	e04b      	b.n	8005448 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053b0:	7bbb      	ldrb	r3, [r7, #14]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <USBD_StdEPReq+0x146>
 80053b6:	7bbb      	ldrb	r3, [r7, #14]
 80053b8:	2b80      	cmp	r3, #128	@ 0x80
 80053ba:	d00a      	beq.n	80053d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 f847 	bl	8006454 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80053c6:	2180      	movs	r1, #128	@ 0x80
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f001 f843 	bl	8006454 <USBD_LL_StallEP>
 80053ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80053d0:	e040      	b.n	8005454 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fc3e 	bl	8005c56 <USBD_CtlError>
              break;
 80053da:	e03b      	b.n	8005454 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	885b      	ldrh	r3, [r3, #2]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d136      	bne.n	8005452 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80053e4:	7bbb      	ldrb	r3, [r7, #14]
 80053e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80053ee:	7bbb      	ldrb	r3, [r7, #14]
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f001 f84d 	bl	8006492 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fce6 	bl	8005dca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff fde4 	bl	8004fd0 <USBD_CoreFindEP>
 8005408:	4603      	mov	r3, r0
 800540a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800540c:	7b7b      	ldrb	r3, [r7, #13]
 800540e:	2bff      	cmp	r3, #255	@ 0xff
 8005410:	d01f      	beq.n	8005452 <USBD_StdEPReq+0x1c6>
 8005412:	7b7b      	ldrb	r3, [r7, #13]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d11c      	bne.n	8005452 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005418:	7b7a      	ldrb	r2, [r7, #13]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005420:	7b7a      	ldrb	r2, [r7, #13]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	32ae      	adds	r2, #174	@ 0xae
 8005426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d010      	beq.n	8005452 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005430:	7b7a      	ldrb	r2, [r7, #13]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	32ae      	adds	r2, #174	@ 0xae
 8005436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
 8005442:	4603      	mov	r3, r0
 8005444:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005446:	e004      	b.n	8005452 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fc03 	bl	8005c56 <USBD_CtlError>
              break;
 8005450:	e000      	b.n	8005454 <USBD_StdEPReq+0x1c8>
              break;
 8005452:	bf00      	nop
          }
          break;
 8005454:	e0ab      	b.n	80055ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d002      	beq.n	8005468 <USBD_StdEPReq+0x1dc>
 8005462:	2b03      	cmp	r3, #3
 8005464:	d032      	beq.n	80054cc <USBD_StdEPReq+0x240>
 8005466:	e097      	b.n	8005598 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005468:	7bbb      	ldrb	r3, [r7, #14]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <USBD_StdEPReq+0x1f2>
 800546e:	7bbb      	ldrb	r3, [r7, #14]
 8005470:	2b80      	cmp	r3, #128	@ 0x80
 8005472:	d004      	beq.n	800547e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fbed 	bl	8005c56 <USBD_CtlError>
                break;
 800547c:	e091      	b.n	80055a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800547e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005482:	2b00      	cmp	r3, #0
 8005484:	da0b      	bge.n	800549e <USBD_StdEPReq+0x212>
 8005486:	7bbb      	ldrb	r3, [r7, #14]
 8005488:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	3310      	adds	r3, #16
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	3304      	adds	r3, #4
 800549c:	e00b      	b.n	80054b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800549e:	7bbb      	ldrb	r3, [r7, #14]
 80054a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	3304      	adds	r3, #4
 80054b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2202      	movs	r2, #2
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fc43 	bl	8005d50 <USBD_CtlSendData>
              break;
 80054ca:	e06a      	b.n	80055a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80054cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	da11      	bge.n	80054f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80054d4:	7bbb      	ldrb	r3, [r7, #14]
 80054d6:	f003 020f 	and.w	r2, r3, #15
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	3324      	adds	r3, #36	@ 0x24
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d117      	bne.n	800551e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fbb0 	bl	8005c56 <USBD_CtlError>
                  break;
 80054f6:	e054      	b.n	80055a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80054f8:	7bbb      	ldrb	r3, [r7, #14]
 80054fa:	f003 020f 	and.w	r2, r3, #15
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fb9d 	bl	8005c56 <USBD_CtlError>
                  break;
 800551c:	e041      	b.n	80055a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800551e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005522:	2b00      	cmp	r3, #0
 8005524:	da0b      	bge.n	800553e <USBD_StdEPReq+0x2b2>
 8005526:	7bbb      	ldrb	r3, [r7, #14]
 8005528:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	3310      	adds	r3, #16
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4413      	add	r3, r2
 800553a:	3304      	adds	r3, #4
 800553c:	e00b      	b.n	8005556 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800553e:	7bbb      	ldrb	r3, [r7, #14]
 8005540:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	3304      	adds	r3, #4
 8005556:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005558:	7bbb      	ldrb	r3, [r7, #14]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <USBD_StdEPReq+0x2d8>
 800555e:	7bbb      	ldrb	r3, [r7, #14]
 8005560:	2b80      	cmp	r3, #128	@ 0x80
 8005562:	d103      	bne.n	800556c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e00e      	b.n	800558a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800556c:	7bbb      	ldrb	r3, [r7, #14]
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 ffad 	bl	80064d0 <USBD_LL_IsStallEP>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e002      	b.n	800558a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2202      	movs	r2, #2
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fbdd 	bl	8005d50 <USBD_CtlSendData>
              break;
 8005596:	e004      	b.n	80055a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fb5b 	bl	8005c56 <USBD_CtlError>
              break;
 80055a0:	bf00      	nop
          }
          break;
 80055a2:	e004      	b.n	80055ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fb55 	bl	8005c56 <USBD_CtlError>
          break;
 80055ac:	bf00      	nop
      }
      break;
 80055ae:	e005      	b.n	80055bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fb4f 	bl	8005c56 <USBD_CtlError>
      break;
 80055b8:	e000      	b.n	80055bc <USBD_StdEPReq+0x330>
      break;
 80055ba:	bf00      	nop
  }

  return ret;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	885b      	ldrh	r3, [r3, #2]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	2b06      	cmp	r3, #6
 80055ea:	f200 8128 	bhi.w	800583e <USBD_GetDescriptor+0x276>
 80055ee:	a201      	add	r2, pc, #4	@ (adr r2, 80055f4 <USBD_GetDescriptor+0x2c>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	08005611 	.word	0x08005611
 80055f8:	08005629 	.word	0x08005629
 80055fc:	08005669 	.word	0x08005669
 8005600:	0800583f 	.word	0x0800583f
 8005604:	0800583f 	.word	0x0800583f
 8005608:	080057df 	.word	0x080057df
 800560c:	0800580b 	.word	0x0800580b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	7c12      	ldrb	r2, [r2, #16]
 800561c:	f107 0108 	add.w	r1, r7, #8
 8005620:	4610      	mov	r0, r2
 8005622:	4798      	blx	r3
 8005624:	60f8      	str	r0, [r7, #12]
      break;
 8005626:	e112      	b.n	800584e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7c1b      	ldrb	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10d      	bne.n	800564c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005638:	f107 0208 	add.w	r2, r7, #8
 800563c:	4610      	mov	r0, r2
 800563e:	4798      	blx	r3
 8005640:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3301      	adds	r3, #1
 8005646:	2202      	movs	r2, #2
 8005648:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800564a:	e100      	b.n	800584e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	f107 0208 	add.w	r2, r7, #8
 8005658:	4610      	mov	r0, r2
 800565a:	4798      	blx	r3
 800565c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3301      	adds	r3, #1
 8005662:	2202      	movs	r2, #2
 8005664:	701a      	strb	r2, [r3, #0]
      break;
 8005666:	e0f2      	b.n	800584e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	885b      	ldrh	r3, [r3, #2]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b05      	cmp	r3, #5
 8005670:	f200 80ac 	bhi.w	80057cc <USBD_GetDescriptor+0x204>
 8005674:	a201      	add	r2, pc, #4	@ (adr r2, 800567c <USBD_GetDescriptor+0xb4>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	08005695 	.word	0x08005695
 8005680:	080056c9 	.word	0x080056c9
 8005684:	080056fd 	.word	0x080056fd
 8005688:	08005731 	.word	0x08005731
 800568c:	08005765 	.word	0x08005765
 8005690:	08005799 	.word	0x08005799
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	7c12      	ldrb	r2, [r2, #16]
 80056ac:	f107 0108 	add.w	r1, r7, #8
 80056b0:	4610      	mov	r0, r2
 80056b2:	4798      	blx	r3
 80056b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056b6:	e091      	b.n	80057dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 facb 	bl	8005c56 <USBD_CtlError>
            err++;
 80056c0:	7afb      	ldrb	r3, [r7, #11]
 80056c2:	3301      	adds	r3, #1
 80056c4:	72fb      	strb	r3, [r7, #11]
          break;
 80056c6:	e089      	b.n	80057dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	7c12      	ldrb	r2, [r2, #16]
 80056e0:	f107 0108 	add.w	r1, r7, #8
 80056e4:	4610      	mov	r0, r2
 80056e6:	4798      	blx	r3
 80056e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056ea:	e077      	b.n	80057dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fab1 	bl	8005c56 <USBD_CtlError>
            err++;
 80056f4:	7afb      	ldrb	r3, [r7, #11]
 80056f6:	3301      	adds	r3, #1
 80056f8:	72fb      	strb	r3, [r7, #11]
          break;
 80056fa:	e06f      	b.n	80057dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00b      	beq.n	8005720 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	7c12      	ldrb	r2, [r2, #16]
 8005714:	f107 0108 	add.w	r1, r7, #8
 8005718:	4610      	mov	r0, r2
 800571a:	4798      	blx	r3
 800571c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800571e:	e05d      	b.n	80057dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fa97 	bl	8005c56 <USBD_CtlError>
            err++;
 8005728:	7afb      	ldrb	r3, [r7, #11]
 800572a:	3301      	adds	r3, #1
 800572c:	72fb      	strb	r3, [r7, #11]
          break;
 800572e:	e055      	b.n	80057dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	7c12      	ldrb	r2, [r2, #16]
 8005748:	f107 0108 	add.w	r1, r7, #8
 800574c:	4610      	mov	r0, r2
 800574e:	4798      	blx	r3
 8005750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005752:	e043      	b.n	80057dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fa7d 	bl	8005c56 <USBD_CtlError>
            err++;
 800575c:	7afb      	ldrb	r3, [r7, #11]
 800575e:	3301      	adds	r3, #1
 8005760:	72fb      	strb	r3, [r7, #11]
          break;
 8005762:	e03b      	b.n	80057dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	7c12      	ldrb	r2, [r2, #16]
 800577c:	f107 0108 	add.w	r1, r7, #8
 8005780:	4610      	mov	r0, r2
 8005782:	4798      	blx	r3
 8005784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005786:	e029      	b.n	80057dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa63 	bl	8005c56 <USBD_CtlError>
            err++;
 8005790:	7afb      	ldrb	r3, [r7, #11]
 8005792:	3301      	adds	r3, #1
 8005794:	72fb      	strb	r3, [r7, #11]
          break;
 8005796:	e021      	b.n	80057dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00b      	beq.n	80057bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	7c12      	ldrb	r2, [r2, #16]
 80057b0:	f107 0108 	add.w	r1, r7, #8
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
 80057b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057ba:	e00f      	b.n	80057dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa49 	bl	8005c56 <USBD_CtlError>
            err++;
 80057c4:	7afb      	ldrb	r3, [r7, #11]
 80057c6:	3301      	adds	r3, #1
 80057c8:	72fb      	strb	r3, [r7, #11]
          break;
 80057ca:	e007      	b.n	80057dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa41 	bl	8005c56 <USBD_CtlError>
          err++;
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	3301      	adds	r3, #1
 80057d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80057da:	bf00      	nop
      }
      break;
 80057dc:	e037      	b.n	800584e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7c1b      	ldrb	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ee:	f107 0208 	add.w	r2, r7, #8
 80057f2:	4610      	mov	r0, r2
 80057f4:	4798      	blx	r3
 80057f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80057f8:	e029      	b.n	800584e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fa2a 	bl	8005c56 <USBD_CtlError>
        err++;
 8005802:	7afb      	ldrb	r3, [r7, #11]
 8005804:	3301      	adds	r3, #1
 8005806:	72fb      	strb	r3, [r7, #11]
      break;
 8005808:	e021      	b.n	800584e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	7c1b      	ldrb	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	f107 0208 	add.w	r2, r7, #8
 800581e:	4610      	mov	r0, r2
 8005820:	4798      	blx	r3
 8005822:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	2207      	movs	r2, #7
 800582a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800582c:	e00f      	b.n	800584e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa10 	bl	8005c56 <USBD_CtlError>
        err++;
 8005836:	7afb      	ldrb	r3, [r7, #11]
 8005838:	3301      	adds	r3, #1
 800583a:	72fb      	strb	r3, [r7, #11]
      break;
 800583c:	e007      	b.n	800584e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fa08 	bl	8005c56 <USBD_CtlError>
      err++;
 8005846:	7afb      	ldrb	r3, [r7, #11]
 8005848:	3301      	adds	r3, #1
 800584a:	72fb      	strb	r3, [r7, #11]
      break;
 800584c:	bf00      	nop
  }

  if (err != 0U)
 800584e:	7afb      	ldrb	r3, [r7, #11]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11e      	bne.n	8005892 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	88db      	ldrh	r3, [r3, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d016      	beq.n	800588a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800585c:	893b      	ldrh	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00e      	beq.n	8005880 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	88da      	ldrh	r2, [r3, #6]
 8005866:	893b      	ldrh	r3, [r7, #8]
 8005868:	4293      	cmp	r3, r2
 800586a:	bf28      	it	cs
 800586c:	4613      	movcs	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005872:	893b      	ldrh	r3, [r7, #8]
 8005874:	461a      	mov	r2, r3
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fa69 	bl	8005d50 <USBD_CtlSendData>
 800587e:	e009      	b.n	8005894 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9e7 	bl	8005c56 <USBD_CtlError>
 8005888:	e004      	b.n	8005894 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa9d 	bl	8005dca <USBD_CtlSendStatus>
 8005890:	e000      	b.n	8005894 <USBD_GetDescriptor+0x2cc>
    return;
 8005892:	bf00      	nop
  }
}
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop

0800589c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	889b      	ldrh	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d131      	bne.n	8005912 <USBD_SetAddress+0x76>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	88db      	ldrh	r3, [r3, #6]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d12d      	bne.n	8005912 <USBD_SetAddress+0x76>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	885b      	ldrh	r3, [r3, #2]
 80058ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80058bc:	d829      	bhi.n	8005912 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	885b      	ldrh	r3, [r3, #2]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d104      	bne.n	80058e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f9bc 	bl	8005c56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058de:	e01d      	b.n	800591c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	7bfa      	ldrb	r2, [r7, #15]
 80058e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fe1b 	bl	8006528 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa69 	bl	8005dca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005906:	e009      	b.n	800591c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005910:	e004      	b.n	800591c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f99e 	bl	8005c56 <USBD_CtlError>
  }
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	885b      	ldrh	r3, [r3, #2]
 8005936:	b2da      	uxtb	r2, r3
 8005938:	4b4e      	ldr	r3, [pc, #312]	@ (8005a74 <USBD_SetConfig+0x150>)
 800593a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800593c:	4b4d      	ldr	r3, [pc, #308]	@ (8005a74 <USBD_SetConfig+0x150>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d905      	bls.n	8005950 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f985 	bl	8005c56 <USBD_CtlError>
    return USBD_FAIL;
 800594c:	2303      	movs	r3, #3
 800594e:	e08c      	b.n	8005a6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d002      	beq.n	8005962 <USBD_SetConfig+0x3e>
 800595c:	2b03      	cmp	r3, #3
 800595e:	d029      	beq.n	80059b4 <USBD_SetConfig+0x90>
 8005960:	e075      	b.n	8005a4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005962:	4b44      	ldr	r3, [pc, #272]	@ (8005a74 <USBD_SetConfig+0x150>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d020      	beq.n	80059ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800596a:	4b42      	ldr	r3, [pc, #264]	@ (8005a74 <USBD_SetConfig+0x150>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005974:	4b3f      	ldr	r3, [pc, #252]	@ (8005a74 <USBD_SetConfig+0x150>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fe ffe3 	bl	8004946 <USBD_SetClassConfig>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f962 	bl	8005c56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800599a:	e065      	b.n	8005a68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fa14 	bl	8005dca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2203      	movs	r2, #3
 80059a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80059aa:	e05d      	b.n	8005a68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fa0c 	bl	8005dca <USBD_CtlSendStatus>
      break;
 80059b2:	e059      	b.n	8005a68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80059b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005a74 <USBD_SetConfig+0x150>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d112      	bne.n	80059e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80059c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005a74 <USBD_SetConfig+0x150>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80059ce:	4b29      	ldr	r3, [pc, #164]	@ (8005a74 <USBD_SetConfig+0x150>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7fe ffd2 	bl	800497e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f9f5 	bl	8005dca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80059e0:	e042      	b.n	8005a68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80059e2:	4b24      	ldr	r3, [pc, #144]	@ (8005a74 <USBD_SetConfig+0x150>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d02a      	beq.n	8005a46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fe ffc0 	bl	800497e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80059fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005a74 <USBD_SetConfig+0x150>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a08:	4b1a      	ldr	r3, [pc, #104]	@ (8005a74 <USBD_SetConfig+0x150>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fe ff99 	bl	8004946 <USBD_SetClassConfig>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00f      	beq.n	8005a3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f918 	bl	8005c56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fe ffa5 	bl	800497e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005a3c:	e014      	b.n	8005a68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f9c3 	bl	8005dca <USBD_CtlSendStatus>
      break;
 8005a44:	e010      	b.n	8005a68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f9bf 	bl	8005dca <USBD_CtlSendStatus>
      break;
 8005a4c:	e00c      	b.n	8005a68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f900 	bl	8005c56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a56:	4b07      	ldr	r3, [pc, #28]	@ (8005a74 <USBD_SetConfig+0x150>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fe ff8e 	bl	800497e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005a62:	2303      	movs	r3, #3
 8005a64:	73fb      	strb	r3, [r7, #15]
      break;
 8005a66:	bf00      	nop
  }

  return ret;
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000118 	.word	0x20000118

08005a78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	88db      	ldrh	r3, [r3, #6]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d004      	beq.n	8005a94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8e2 	bl	8005c56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005a92:	e023      	b.n	8005adc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	dc02      	bgt.n	8005aa6 <USBD_GetConfig+0x2e>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	dc03      	bgt.n	8005aac <USBD_GetConfig+0x34>
 8005aa4:	e015      	b.n	8005ad2 <USBD_GetConfig+0x5a>
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d00b      	beq.n	8005ac2 <USBD_GetConfig+0x4a>
 8005aaa:	e012      	b.n	8005ad2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f948 	bl	8005d50 <USBD_CtlSendData>
        break;
 8005ac0:	e00c      	b.n	8005adc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f940 	bl	8005d50 <USBD_CtlSendData>
        break;
 8005ad0:	e004      	b.n	8005adc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8be 	bl	8005c56 <USBD_CtlError>
        break;
 8005ada:	bf00      	nop
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d81e      	bhi.n	8005b3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	88db      	ldrh	r3, [r3, #6]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d004      	beq.n	8005b0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f8a5 	bl	8005c56 <USBD_CtlError>
        break;
 8005b0c:	e01a      	b.n	8005b44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f043 0202 	orr.w	r2, r3, #2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	2202      	movs	r2, #2
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f90c 	bl	8005d50 <USBD_CtlSendData>
      break;
 8005b38:	e004      	b.n	8005b44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f88a 	bl	8005c56 <USBD_CtlError>
      break;
 8005b42:	bf00      	nop
  }
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	885b      	ldrh	r3, [r3, #2]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d107      	bne.n	8005b6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f92f 	bl	8005dca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005b6c:	e013      	b.n	8005b96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	885b      	ldrh	r3, [r3, #2]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d10b      	bne.n	8005b8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	889b      	ldrh	r3, [r3, #4]
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f91f 	bl	8005dca <USBD_CtlSendStatus>
}
 8005b8c:	e003      	b.n	8005b96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f860 	bl	8005c56 <USBD_CtlError>
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d80b      	bhi.n	8005bce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	885b      	ldrh	r3, [r3, #2]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d10c      	bne.n	8005bd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8ff 	bl	8005dca <USBD_CtlSendStatus>
      }
      break;
 8005bcc:	e004      	b.n	8005bd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f840 	bl	8005c56 <USBD_CtlError>
      break;
 8005bd6:	e000      	b.n	8005bda <USBD_ClrFeature+0x3c>
      break;
 8005bd8:	bf00      	nop
  }
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	781a      	ldrb	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	781a      	ldrb	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff fa40 	bl	8005092 <SWAPBYTE>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7ff fa33 	bl	8005092 <SWAPBYTE>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	461a      	mov	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7ff fa26 	bl	8005092 <SWAPBYTE>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	80da      	strh	r2, [r3, #6]
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c60:	2180      	movs	r1, #128	@ 0x80
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fbf6 	bl	8006454 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005c68:	2100      	movs	r1, #0
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fbf2 	bl	8006454 <USBD_LL_StallEP>
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d042      	beq.n	8005d14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005c92:	6938      	ldr	r0, [r7, #16]
 8005c94:	f000 f842 	bl	8005d1c <USBD_GetLen>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ca2:	d808      	bhi.n	8005cb6 <USBD_GetString+0x3e>
 8005ca4:	6938      	ldr	r0, [r7, #16]
 8005ca6:	f000 f839 	bl	8005d1c <USBD_GetLen>
 8005caa:	4603      	mov	r3, r0
 8005cac:	3301      	adds	r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	e001      	b.n	8005cba <USBD_GetString+0x42>
 8005cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005ce0:	e013      	b.n	8005d0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	613b      	str	r3, [r7, #16]
    idx++;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4413      	add	r3, r2
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
 8005d06:	3301      	adds	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e7      	bne.n	8005ce2 <USBD_GetString+0x6a>
 8005d12:	e000      	b.n	8005d16 <USBD_GetString+0x9e>
    return;
 8005d14:	bf00      	nop
  }
}
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d2c:	e005      	b.n	8005d3a <USBD_GetLen+0x1e>
  {
    len++;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	3301      	adds	r3, #1
 8005d32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f5      	bne.n	8005d2e <USBD_GetLen+0x12>
  }

  return len;
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	2100      	movs	r1, #0
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fbf5 	bl	8006566 <USBD_LL_Transmit>

  return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	2100      	movs	r1, #0
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fbe4 	bl	8006566 <USBD_LL_Transmit>

  return USBD_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	2100      	movs	r1, #0
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fbf4 	bl	80065a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2100      	movs	r1, #0
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fbc0 	bl	8006566 <USBD_LL_Transmit>

  return USBD_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2205      	movs	r2, #5
 8005dfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e00:	2300      	movs	r3, #0
 8005e02:	2200      	movs	r2, #0
 8005e04:	2100      	movs	r1, #0
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fbce 	bl	80065a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	490e      	ldr	r1, [pc, #56]	@ (8005e58 <MX_USB_DEVICE_Init+0x40>)
 8005e20:	480e      	ldr	r0, [pc, #56]	@ (8005e5c <MX_USB_DEVICE_Init+0x44>)
 8005e22:	f7fe fd13 	bl	800484c <USBD_Init>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e2c:	f7fa fce2 	bl	80007f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005e30:	490b      	ldr	r1, [pc, #44]	@ (8005e60 <MX_USB_DEVICE_Init+0x48>)
 8005e32:	480a      	ldr	r0, [pc, #40]	@ (8005e5c <MX_USB_DEVICE_Init+0x44>)
 8005e34:	f7fe fd3a 	bl	80048ac <USBD_RegisterClass>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e3e:	f7fa fcd9 	bl	80007f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e42:	4806      	ldr	r0, [pc, #24]	@ (8005e5c <MX_USB_DEVICE_Init+0x44>)
 8005e44:	f7fe fd68 	bl	8004918 <USBD_Start>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005e4e:	f7fa fcd1 	bl	80007f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e52:	bf00      	nop
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200000a4 	.word	0x200000a4
 8005e5c:	2000011c 	.word	0x2000011c
 8005e60:	20000010 	.word	0x20000010

08005e64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	6039      	str	r1, [r7, #0]
 8005e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2212      	movs	r2, #18
 8005e74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005e76:	4b03      	ldr	r3, [pc, #12]	@ (8005e84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	200000c0 	.word	0x200000c0

08005e88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2204      	movs	r2, #4
 8005e98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005e9a:	4b03      	ldr	r3, [pc, #12]	@ (8005ea8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	200000d4 	.word	0x200000d4

08005eac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	6039      	str	r1, [r7, #0]
 8005eb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d105      	bne.n	8005eca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	4907      	ldr	r1, [pc, #28]	@ (8005ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ec2:	4808      	ldr	r0, [pc, #32]	@ (8005ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ec4:	f7ff fed8 	bl	8005c78 <USBD_GetString>
 8005ec8:	e004      	b.n	8005ed4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4904      	ldr	r1, [pc, #16]	@ (8005ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ece:	4805      	ldr	r0, [pc, #20]	@ (8005ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ed0:	f7ff fed2 	bl	8005c78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ed4:	4b02      	ldr	r3, [pc, #8]	@ (8005ee0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	200003f8 	.word	0x200003f8
 8005ee4:	080066e4 	.word	0x080066e4

08005ee8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	4904      	ldr	r1, [pc, #16]	@ (8005f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005ef8:	4804      	ldr	r0, [pc, #16]	@ (8005f0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005efa:	f7ff febd 	bl	8005c78 <USBD_GetString>
  return USBD_StrDesc;
 8005efe:	4b02      	ldr	r3, [pc, #8]	@ (8005f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	200003f8 	.word	0x200003f8
 8005f0c:	080066ec 	.word	0x080066ec

08005f10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	6039      	str	r1, [r7, #0]
 8005f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	221a      	movs	r2, #26
 8005f20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f22:	f000 f843 	bl	8005fac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f26:	4b02      	ldr	r3, [pc, #8]	@ (8005f30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	200000d8 	.word	0x200000d8

08005f34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d105      	bne.n	8005f52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	4907      	ldr	r1, [pc, #28]	@ (8005f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f4a:	4808      	ldr	r0, [pc, #32]	@ (8005f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f4c:	f7ff fe94 	bl	8005c78 <USBD_GetString>
 8005f50:	e004      	b.n	8005f5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	4904      	ldr	r1, [pc, #16]	@ (8005f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f56:	4805      	ldr	r0, [pc, #20]	@ (8005f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f58:	f7ff fe8e 	bl	8005c78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f5c:	4b02      	ldr	r3, [pc, #8]	@ (8005f68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	200003f8 	.word	0x200003f8
 8005f6c:	08006700 	.word	0x08006700

08005f70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	6039      	str	r1, [r7, #0]
 8005f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d105      	bne.n	8005f8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	4907      	ldr	r1, [pc, #28]	@ (8005fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f86:	4808      	ldr	r0, [pc, #32]	@ (8005fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f88:	f7ff fe76 	bl	8005c78 <USBD_GetString>
 8005f8c:	e004      	b.n	8005f98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	4904      	ldr	r1, [pc, #16]	@ (8005fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f92:	4805      	ldr	r0, [pc, #20]	@ (8005fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f94:	f7ff fe70 	bl	8005c78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f98:	4b02      	ldr	r3, [pc, #8]	@ (8005fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	200003f8 	.word	0x200003f8
 8005fa8:	0800670c 	.word	0x0800670c

08005fac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff0 <Get_SerialNum+0x44>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff4 <Get_SerialNum+0x48>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff8 <Get_SerialNum+0x4c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4413      	add	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d009      	beq.n	8005fe6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	4909      	ldr	r1, [pc, #36]	@ (8005ffc <Get_SerialNum+0x50>)
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f814 	bl	8006004 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005fdc:	2204      	movs	r2, #4
 8005fde:	4908      	ldr	r1, [pc, #32]	@ (8006000 <Get_SerialNum+0x54>)
 8005fe0:	68b8      	ldr	r0, [r7, #8]
 8005fe2:	f000 f80f 	bl	8006004 <IntToUnicode>
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	1fff7a10 	.word	0x1fff7a10
 8005ff4:	1fff7a14 	.word	0x1fff7a14
 8005ff8:	1fff7a18 	.word	0x1fff7a18
 8005ffc:	200000da 	.word	0x200000da
 8006000:	200000ea 	.word	0x200000ea

08006004 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]
 800601a:	e027      	b.n	800606c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	0f1b      	lsrs	r3, r3, #28
 8006020:	2b09      	cmp	r3, #9
 8006022:	d80b      	bhi.n	800603c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	0f1b      	lsrs	r3, r3, #28
 8006028:	b2da      	uxtb	r2, r3
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	4619      	mov	r1, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	440b      	add	r3, r1
 8006034:	3230      	adds	r2, #48	@ 0x30
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	e00a      	b.n	8006052 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	0f1b      	lsrs	r3, r3, #28
 8006040:	b2da      	uxtb	r2, r3
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	4619      	mov	r1, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	440b      	add	r3, r1
 800604c:	3237      	adds	r2, #55	@ 0x37
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	3301      	adds	r3, #1
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	4413      	add	r3, r2
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	3301      	adds	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
 800606c:	7dfa      	ldrb	r2, [r7, #23]
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	429a      	cmp	r2, r3
 8006072:	d3d3      	bcc.n	800601c <IntToUnicode+0x18>
  }
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	@ 0x28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	605a      	str	r2, [r3, #4]
 8006096:	609a      	str	r2, [r3, #8]
 8006098:	60da      	str	r2, [r3, #12]
 800609a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a4:	d13a      	bne.n	800611c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006124 <HAL_PCD_MspInit+0xa0>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006124 <HAL_PCD_MspInit+0xa0>)
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80060b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006124 <HAL_PCD_MspInit+0xa0>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80060c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80060c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c8:	2302      	movs	r3, #2
 80060ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d0:	2303      	movs	r3, #3
 80060d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80060d4:	230a      	movs	r3, #10
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	4619      	mov	r1, r3
 80060de:	4812      	ldr	r0, [pc, #72]	@ (8006128 <HAL_PCD_MspInit+0xa4>)
 80060e0:	f7fa fdda 	bl	8000c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80060e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <HAL_PCD_MspInit+0xa0>)
 80060e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006124 <HAL_PCD_MspInit+0xa0>)
 80060ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ee:	6353      	str	r3, [r2, #52]	@ 0x34
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006124 <HAL_PCD_MspInit+0xa0>)
 80060f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006124 <HAL_PCD_MspInit+0xa0>)
 80060fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8006100:	4b08      	ldr	r3, [pc, #32]	@ (8006124 <HAL_PCD_MspInit+0xa0>)
 8006102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800610c:	2200      	movs	r2, #0
 800610e:	2100      	movs	r1, #0
 8006110:	2043      	movs	r0, #67	@ 0x43
 8006112:	f7fa fd8a 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006116:	2043      	movs	r0, #67	@ 0x43
 8006118:	f7fa fda3 	bl	8000c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800611c:	bf00      	nop
 800611e:	3728      	adds	r7, #40	@ 0x28
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40023800 	.word	0x40023800
 8006128:	40020000 	.word	0x40020000

0800612c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006140:	4619      	mov	r1, r3
 8006142:	4610      	mov	r0, r2
 8006144:	f7fe fc35 	bl	80049b2 <USBD_LL_SetupStage>
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	4619      	mov	r1, r3
 800617a:	f7fe fc6f 	bl	8004a5c <USBD_LL_DataOutStage>
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	3320      	adds	r3, #32
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7fe fd08 	bl	8004bc2 <USBD_LL_DataInStage>
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe fe42 	bl	8004e52 <USBD_LL_SOF>
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80061de:	2301      	movs	r3, #1
 80061e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	79db      	ldrb	r3, [r3, #7]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d001      	beq.n	80061ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80061ea:	f7fa fb03 	bl	80007f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80061f4:	7bfa      	ldrb	r2, [r7, #15]
 80061f6:	4611      	mov	r1, r2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fde6 	bl	8004dca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe fd8e 	bl	8004d26 <USBD_LL_Reset>
}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe fde1 	bl	8004dea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7adb      	ldrb	r3, [r3, #11]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006248:	4b04      	ldr	r3, [pc, #16]	@ (800625c <HAL_PCD_SuspendCallback+0x48>)
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	4a03      	ldr	r2, [pc, #12]	@ (800625c <HAL_PCD_SuspendCallback+0x48>)
 800624e:	f043 0306 	orr.w	r3, r3, #6
 8006252:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006254:	bf00      	nop
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	e000ed00 	.word	0xe000ed00

08006260 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fdd7 	bl	8004e22 <USBD_LL_Resume>
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800628e:	78fa      	ldrb	r2, [r7, #3]
 8006290:	4611      	mov	r1, r2
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fe2f 	bl	8004ef6 <USBD_LL_IsoOUTIncomplete>
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fdeb 	bl	8004e92 <USBD_LL_IsoINIncomplete>
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fe41 	bl	8004f5a <USBD_LL_DevConnected>
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fe3e 	bl	8004f70 <USBD_LL_DevDisconnected>
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d13c      	bne.n	8006386 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800630c:	4a20      	ldr	r2, [pc, #128]	@ (8006390 <USBD_LL_Init+0x94>)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a1e      	ldr	r2, [pc, #120]	@ (8006390 <USBD_LL_Init+0x94>)
 8006318:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800631c:	4b1c      	ldr	r3, [pc, #112]	@ (8006390 <USBD_LL_Init+0x94>)
 800631e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006322:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006324:	4b1a      	ldr	r3, [pc, #104]	@ (8006390 <USBD_LL_Init+0x94>)
 8006326:	2204      	movs	r2, #4
 8006328:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800632a:	4b19      	ldr	r3, [pc, #100]	@ (8006390 <USBD_LL_Init+0x94>)
 800632c:	2202      	movs	r2, #2
 800632e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006330:	4b17      	ldr	r3, [pc, #92]	@ (8006390 <USBD_LL_Init+0x94>)
 8006332:	2200      	movs	r2, #0
 8006334:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006336:	4b16      	ldr	r3, [pc, #88]	@ (8006390 <USBD_LL_Init+0x94>)
 8006338:	2202      	movs	r2, #2
 800633a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800633c:	4b14      	ldr	r3, [pc, #80]	@ (8006390 <USBD_LL_Init+0x94>)
 800633e:	2200      	movs	r2, #0
 8006340:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006342:	4b13      	ldr	r3, [pc, #76]	@ (8006390 <USBD_LL_Init+0x94>)
 8006344:	2200      	movs	r2, #0
 8006346:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006348:	4b11      	ldr	r3, [pc, #68]	@ (8006390 <USBD_LL_Init+0x94>)
 800634a:	2200      	movs	r2, #0
 800634c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800634e:	4b10      	ldr	r3, [pc, #64]	@ (8006390 <USBD_LL_Init+0x94>)
 8006350:	2200      	movs	r2, #0
 8006352:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006354:	4b0e      	ldr	r3, [pc, #56]	@ (8006390 <USBD_LL_Init+0x94>)
 8006356:	2200      	movs	r2, #0
 8006358:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800635a:	480d      	ldr	r0, [pc, #52]	@ (8006390 <USBD_LL_Init+0x94>)
 800635c:	f7fa fe6a 	bl	8001034 <HAL_PCD_Init>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006366:	f7fa fa45 	bl	80007f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800636a:	2180      	movs	r1, #128	@ 0x80
 800636c:	4808      	ldr	r0, [pc, #32]	@ (8006390 <USBD_LL_Init+0x94>)
 800636e:	f7fc f87e 	bl	800246e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006372:	2240      	movs	r2, #64	@ 0x40
 8006374:	2100      	movs	r1, #0
 8006376:	4806      	ldr	r0, [pc, #24]	@ (8006390 <USBD_LL_Init+0x94>)
 8006378:	f7fc f832 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800637c:	2280      	movs	r2, #128	@ 0x80
 800637e:	2101      	movs	r1, #1
 8006380:	4803      	ldr	r0, [pc, #12]	@ (8006390 <USBD_LL_Init+0x94>)
 8006382:	f7fc f82d 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	200005f8 	.word	0x200005f8

08006394 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fa ff51 	bl	8001252 <HAL_PCD_Start>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 f930 	bl	800661c <USBD_Get_USB_Status>
 80063bc:	4603      	mov	r3, r0
 80063be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	4608      	mov	r0, r1
 80063d4:	4611      	mov	r1, r2
 80063d6:	461a      	mov	r2, r3
 80063d8:	4603      	mov	r3, r0
 80063da:	70fb      	strb	r3, [r7, #3]
 80063dc:	460b      	mov	r3, r1
 80063de:	70bb      	strb	r3, [r7, #2]
 80063e0:	4613      	mov	r3, r2
 80063e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80063f2:	78bb      	ldrb	r3, [r7, #2]
 80063f4:	883a      	ldrh	r2, [r7, #0]
 80063f6:	78f9      	ldrb	r1, [r7, #3]
 80063f8:	f7fb fc25 	bl	8001c46 <HAL_PCD_EP_Open>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f90a 	bl	800661c <USBD_Get_USB_Status>
 8006408:	4603      	mov	r3, r0
 800640a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800640c:	7bbb      	ldrb	r3, [r7, #14]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006430:	78fa      	ldrb	r2, [r7, #3]
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f7fb fc70 	bl	8001d1a <HAL_PCD_EP_Close>
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 f8eb 	bl	800661c <USBD_Get_USB_Status>
 8006446:	4603      	mov	r3, r0
 8006448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800644a:	7bbb      	ldrb	r3, [r7, #14]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	4611      	mov	r1, r2
 8006472:	4618      	mov	r0, r3
 8006474:	f7fb fd10 	bl	8001e98 <HAL_PCD_EP_SetStall>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 f8cc 	bl	800661c <USBD_Get_USB_Status>
 8006484:	4603      	mov	r3, r0
 8006486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006488:	7bbb      	ldrb	r3, [r7, #14]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	460b      	mov	r3, r1
 800649c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064ac:	78fa      	ldrb	r2, [r7, #3]
 80064ae:	4611      	mov	r1, r2
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fb fd54 	bl	8001f5e <HAL_PCD_EP_ClrStall>
 80064b6:	4603      	mov	r3, r0
 80064b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 f8ad 	bl	800661c <USBD_Get_USB_Status>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80064e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da0b      	bge.n	8006504 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	4613      	mov	r3, r2
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	3316      	adds	r3, #22
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	e00b      	b.n	800651c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800650a:	68f9      	ldr	r1, [r7, #12]
 800650c:	4613      	mov	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800651a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	4611      	mov	r1, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f7fb fb59 	bl	8001bfe <HAL_PCD_SetAddress>
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	4618      	mov	r0, r3
 8006554:	f000 f862 	bl	800661c <USBD_Get_USB_Status>
 8006558:	4603      	mov	r3, r0
 800655a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800655c:	7bbb      	ldrb	r3, [r7, #14]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b086      	sub	sp, #24
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	460b      	mov	r3, r1
 8006574:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006584:	7af9      	ldrb	r1, [r7, #11]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	f7fb fc4b 	bl	8001e24 <HAL_PCD_EP_Transmit>
 800658e:	4603      	mov	r3, r0
 8006590:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006592:	7dfb      	ldrb	r3, [r7, #23]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f841 	bl	800661c <USBD_Get_USB_Status>
 800659a:	4603      	mov	r3, r0
 800659c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800659e:	7dbb      	ldrb	r3, [r7, #22]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	460b      	mov	r3, r1
 80065b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80065c6:	7af9      	ldrb	r1, [r7, #11]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	f7fb fbef 	bl	8001dae <HAL_PCD_EP_Receive>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 f820 	bl	800661c <USBD_Get_USB_Status>
 80065dc:	4603      	mov	r3, r0
 80065de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80065e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80065f4:	4b03      	ldr	r3, [pc, #12]	@ (8006604 <USBD_static_malloc+0x18>)
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000adc 	.word	0x20000adc

08006608 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]

}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d817      	bhi.n	8006660 <USBD_Get_USB_Status+0x44>
 8006630:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <USBD_Get_USB_Status+0x1c>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	08006649 	.word	0x08006649
 800663c:	0800664f 	.word	0x0800664f
 8006640:	08006655 	.word	0x08006655
 8006644:	0800665b 	.word	0x0800665b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]
    break;
 800664c:	e00b      	b.n	8006666 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800664e:	2303      	movs	r3, #3
 8006650:	73fb      	strb	r3, [r7, #15]
    break;
 8006652:	e008      	b.n	8006666 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006654:	2301      	movs	r3, #1
 8006656:	73fb      	strb	r3, [r7, #15]
    break;
 8006658:	e005      	b.n	8006666 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800665a:	2303      	movs	r3, #3
 800665c:	73fb      	strb	r3, [r7, #15]
    break;
 800665e:	e002      	b.n	8006666 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006660:	2303      	movs	r3, #3
 8006662:	73fb      	strb	r3, [r7, #15]
    break;
 8006664:	bf00      	nop
  }
  return usb_status;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <memset>:
 8006674:	4402      	add	r2, r0
 8006676:	4603      	mov	r3, r0
 8006678:	4293      	cmp	r3, r2
 800667a:	d100      	bne.n	800667e <memset+0xa>
 800667c:	4770      	bx	lr
 800667e:	f803 1b01 	strb.w	r1, [r3], #1
 8006682:	e7f9      	b.n	8006678 <memset+0x4>

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4d0d      	ldr	r5, [pc, #52]	@ (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	@ (80066c0 <__libc_init_array+0x3c>)
 800668a:	1b64      	subs	r4, r4, r5
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2600      	movs	r6, #0
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4d0b      	ldr	r5, [pc, #44]	@ (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	@ (80066c8 <__libc_init_array+0x44>)
 8006698:	f000 f818 	bl	80066cc <_init>
 800669c:	1b64      	subs	r4, r4, r5
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2600      	movs	r6, #0
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08006734 	.word	0x08006734
 80066c0:	08006734 	.word	0x08006734
 80066c4:	08006734 	.word	0x08006734
 80066c8:	08006738 	.word	0x08006738

080066cc <_init>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr

080066d8 <_fini>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr
