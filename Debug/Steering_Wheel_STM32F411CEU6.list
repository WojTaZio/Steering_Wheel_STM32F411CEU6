
Steering_Wheel_STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000657c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006714  08006714  00007714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800676c  0800676c  000080f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800676c  0800676c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006774  08006774  000080f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006774  08006774  00007774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006778  08006778  00007778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  0800677c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  200000f8  08006874  000080f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  08006874  00008af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd0a  00000000  00000000  00008128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002961  00000000  00000000  00014e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00017798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000828  00000000  00000000  000182b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a33  00000000  00000000  00018ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edfe  00000000  00000000  0003050b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e65  00000000  00000000  0003f309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c616e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc8  00000000  00000000  000c61b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000c8d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f8 	.word	0x200000f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080066fc 	.word	0x080066fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000fc 	.word	0x200000fc
 80001d4:	080066fc 	.word	0x080066fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	4b31      	ldr	r3, [pc, #196]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a30      	ldr	r2, [pc, #192]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b2e      	ldr	r3, [pc, #184]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a29      	ldr	r2, [pc, #164]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	4b23      	ldr	r3, [pc, #140]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a22      	ldr	r2, [pc, #136]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b20      	ldr	r3, [pc, #128]	@ (80005e4 <MX_GPIO_Init+0xe0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000574:	481c      	ldr	r0, [pc, #112]	@ (80005e8 <MX_GPIO_Init+0xe4>)
 8000576:	f000 fd43 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800057a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000584:	2301      	movs	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4815      	ldr	r0, [pc, #84]	@ (80005e8 <MX_GPIO_Init+0xe4>)
 8000594:	f000 fb98 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000598:	2301      	movs	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4619      	mov	r1, r3
 80005ac:	480f      	ldr	r0, [pc, #60]	@ (80005ec <MX_GPIO_Init+0xe8>)
 80005ae:	f000 fb8b 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b2:	2302      	movs	r3, #2
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	4809      	ldr	r0, [pc, #36]	@ (80005ec <MX_GPIO_Init+0xe8>)
 80005c6:	f000 fb7f 	bl	8000cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2006      	movs	r0, #6
 80005d0:	f000 fb43 	bl	8000c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005d4:	2006      	movs	r0, #6
 80005d6:	f000 fb5c 	bl	8000c92 <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020800 	.word	0x40020800
 80005ec:	40020000 	.word	0x40020000

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 f9c0 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f816 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f7ff ff82 	bl	8000504 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000600:	f005 fc22 	bl	8005e48 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  report[0] = wheel_centre;
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <main+0x2c>)
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <main+0x30>)
 800060a:	701a      	strb	r2, [r3, #0]
  USBD_HID_SendReport(&hUsbDeviceFS, report, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	4904      	ldr	r1, [pc, #16]	@ (8000620 <main+0x30>)
 8000610:	4804      	ldr	r0, [pc, #16]	@ (8000624 <main+0x34>)
 8000612:	f004 f88f 	bl	8004734 <USBD_HID_SendReport>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x26>
 800061a:	bf00      	nop
 800061c:	20000002 	.word	0x20000002
 8000620:	20000118 	.word	0x20000118
 8000624:	20000124 	.word	0x20000124

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	@ 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 f834 	bl	80066a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a26      	ldr	r2, [pc, #152]	@ (80006f0 <SystemClock_Config+0xc8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a20      	ldr	r2, [pc, #128]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000698:	2319      	movs	r3, #25
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800069c:	2390      	movs	r3, #144	@ 0x90
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a4:	2303      	movs	r3, #3
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 ff13 	bl	80024d8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f8b4 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2102      	movs	r1, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f975 	bl	80029c8 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e4:	f000 f89e 	bl	8000824 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	@ 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <RotateWheel>:

/* USER CODE BEGIN 4 */
void RotateWheel(uint8_t positionx, uint8_t positiony){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
	report[0]=positionx;
 8000708:	4a07      	ldr	r2, [pc, #28]	@ (8000728 <RotateWheel+0x30>)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	7013      	strb	r3, [r2, #0]
	report[1]=positiony;
 800070e:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <RotateWheel+0x30>)
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	7053      	strb	r3, [r2, #1]
	USBD_HID_SendReport(&hUsbDeviceFS, report, 2);
 8000714:	2202      	movs	r2, #2
 8000716:	4904      	ldr	r1, [pc, #16]	@ (8000728 <RotateWheel+0x30>)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <RotateWheel+0x34>)
 800071a:	f004 f80b 	bl	8004734 <USBD_HID_SendReport>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000118 	.word	0x20000118
 800072c:	20000124 	.word	0x20000124

08000730 <Counter>:
void Counter(){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	uint16_t B = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000736:	2102      	movs	r1, #2
 8000738:	4825      	ldr	r0, [pc, #148]	@ (80007d0 <Counter+0xa0>)
 800073a:	f000 fc49 	bl	8000fd0 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]

	if(B==1){
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d117      	bne.n	8000778 <Counter+0x48>
		counter++;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <Counter+0xa4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <Counter+0xa4>)
 8000750:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000758:	481f      	ldr	r0, [pc, #124]	@ (80007d8 <Counter+0xa8>)
 800075a:	f000 fc51 	bl	8001000 <HAL_GPIO_WritePin>
		wheel_centre+=2;
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <Counter+0xac>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3302      	adds	r3, #2
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <Counter+0xac>)
 8000768:	701a      	strb	r2, [r3, #0]
		RotateWheel(wheel_centre, 0);
 800076a:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <Counter+0xac>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffc1 	bl	80006f8 <RotateWheel>
 8000776:	e016      	b.n	80007a6 <Counter+0x76>

	}else {
		counter--;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <Counter+0xa4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3b01      	subs	r3, #1
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <Counter+0xa4>)
 8000780:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000788:	4813      	ldr	r0, [pc, #76]	@ (80007d8 <Counter+0xa8>)
 800078a:	f000 fc39 	bl	8001000 <HAL_GPIO_WritePin>
		wheel_centre-=2;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <Counter+0xac>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3b02      	subs	r3, #2
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <Counter+0xac>)
 8000798:	701a      	strb	r2, [r3, #0]
		RotateWheel(wheel_centre, 0);
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <Counter+0xac>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ffa9 	bl	80006f8 <RotateWheel>


	}
    if (counter >= 20) {
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <Counter+0xa4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b13      	cmp	r3, #19
 80007ac:	dd03      	ble.n	80007b6 <Counter+0x86>
        counter = 0;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <Counter+0xa4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	}
	*/


}
 80007b4:	e007      	b.n	80007c6 <Counter+0x96>
    }else if (counter <= -20) {
 80007b6:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <Counter+0xa4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f113 0f13 	cmn.w	r3, #19
 80007be:	da02      	bge.n	80007c6 <Counter+0x96>
        counter = 0;
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <Counter+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020000 	.word	0x40020000
 80007d4:	20000114 	.word	0x20000114
 80007d8:	40020800 	.word	0x40020800
 80007dc:	20000002 	.word	0x20000002

080007e0 <HAL_GPIO_EXTI_Callback>:

//PA0 interrupt function

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
	static uint16_t last = 0;

	if(GPIO_Pin == GPIO_PIN_0){
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d110      	bne.n	8000812 <HAL_GPIO_EXTI_Callback+0x32>
		uint16_t current_time = HAL_GetTick();
 80007f0:	f000 f928 	bl	8000a44 <HAL_GetTick>
 80007f4:	4603      	mov	r3, r0
 80007f6:	81fb      	strh	r3, [r7, #14]
		if((current_time - last)>debounce){
 80007f8:	89fb      	ldrh	r3, [r7, #14]
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_GPIO_EXTI_Callback+0x3c>)
 80007fc:	8812      	ldrh	r2, [r2, #0]
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <HAL_GPIO_EXTI_Callback+0x40>)
 8000802:	8812      	ldrh	r2, [r2, #0]
 8000804:	4293      	cmp	r3, r2
 8000806:	dd01      	ble.n	800080c <HAL_GPIO_EXTI_Callback+0x2c>
				Counter();
 8000808:	f7ff ff92 	bl	8000730 <Counter>
			}
			last=current_time;
 800080c:	4a03      	ldr	r2, [pc, #12]	@ (800081c <HAL_GPIO_EXTI_Callback+0x3c>)
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	8013      	strh	r3, [r2, #0]
}



}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000011a 	.word	0x2000011a
 8000820:	20000000 	.word	0x20000000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	4a0f      	ldr	r2, [pc, #60]	@ (800087c <HAL_MspInit+0x4c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000844:	6453      	str	r3, [r2, #68]	@ 0x44
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	@ 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <NMI_Handler+0x4>

08000888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <MemManage_Handler+0x4>

08000898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d6:	f000 f8a1 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}

080008de <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f000 fba6 	bl	8001034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <OTG_FS_IRQHandler+0x10>)
 80008f2:	f000 fcfb 	bl	80012ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000600 	.word	0x20000600

08000900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800095c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000928:	f7ff ffea 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	@ (8000964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	@ (8000970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000952:	f005 feaf 	bl	80066b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000956:	f7ff fe4b 	bl	80005f0 <main>
  bx  lr    
 800095a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800095c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8000968:	0800677c 	.word	0x0800677c
  ldr r2, =_sbss
 800096c:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8000970:	20000af8 	.word	0x20000af8

08000974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC_IRQHandler>
	...

08000978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0d      	ldr	r2, [pc, #52]	@ (80009b8 <HAL_Init+0x40>)
 8000982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000988:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <HAL_Init+0x40>)
 800098e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	@ (80009b8 <HAL_Init+0x40>)
 800099a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800099e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 f94f 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	200f      	movs	r0, #15
 80009a8:	f000 f808 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff ff40 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023c00 	.word	0x40023c00

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f967 	bl	8000cae <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f92f 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	@ (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000004 	.word	0x20000004
 8000a14:	2000000c 	.word	0x2000000c
 8000a18:	20000008 	.word	0x20000008

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000000c 	.word	0x2000000c
 8000a40:	2000011c 	.word	0x2000011c

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	2000011c 	.word	0x2000011c

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff ffee 	bl	8000a44 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffde 	bl	8000a44 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000000c 	.word	0x2000000c

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	@ (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	@ (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	@ (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	@ 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	@ 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f7ff ff8e 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff29 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff3e 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff8e 	bl	8000b98 <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff31 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffa2 	bl	8000c00 <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	@ 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e159      	b.n	8000f98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 8148 	bne.w	8000f92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d130      	bne.n	8000d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 0201 	and.w	r2, r3, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d017      	beq.n	8000db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d123      	bne.n	8000e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0203 	and.w	r2, r3, #3
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80a2 	beq.w	8000f92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b57      	ldr	r3, [pc, #348]	@ (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	4a56      	ldr	r2, [pc, #344]	@ (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5e:	4b54      	ldr	r3, [pc, #336]	@ (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6a:	4a52      	ldr	r2, [pc, #328]	@ (8000fb4 <HAL_GPIO_Init+0x2ec>)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a49      	ldr	r2, [pc, #292]	@ (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d019      	beq.n	8000eca <HAL_GPIO_Init+0x202>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a48      	ldr	r2, [pc, #288]	@ (8000fbc <HAL_GPIO_Init+0x2f4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0x1fe>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a47      	ldr	r2, [pc, #284]	@ (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00d      	beq.n	8000ec2 <HAL_GPIO_Init+0x1fa>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a46      	ldr	r2, [pc, #280]	@ (8000fc4 <HAL_GPIO_Init+0x2fc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x1f6>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a45      	ldr	r2, [pc, #276]	@ (8000fc8 <HAL_GPIO_Init+0x300>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_GPIO_Init+0x1f2>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e008      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000eba:	2307      	movs	r3, #7
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	f002 0203 	and.w	r2, r2, #3
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000edc:	4935      	ldr	r1, [pc, #212]	@ (8000fb4 <HAL_GPIO_Init+0x2ec>)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eea:	4b38      	ldr	r3, [pc, #224]	@ (8000fcc <HAL_GPIO_Init+0x304>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000fcc <HAL_GPIO_Init+0x304>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <HAL_GPIO_Init+0x304>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f38:	4a24      	ldr	r2, [pc, #144]	@ (8000fcc <HAL_GPIO_Init+0x304>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <HAL_GPIO_Init+0x304>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f62:	4a1a      	ldr	r2, [pc, #104]	@ (8000fcc <HAL_GPIO_Init+0x304>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <HAL_GPIO_Init+0x304>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fcc <HAL_GPIO_Init+0x304>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3301      	adds	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	f67f aea2 	bls.w	8000ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40013c00 	.word	0x40013c00

08000fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e001      	b.n	8000ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800101c:	e003      	b.n	8001026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	041a      	lsls	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800103e:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	4013      	ands	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fbc4 	bl	80007e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e101      	b.n	800127a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d106      	bne.n	8001096 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f005 f80f 	bl	80060b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010a4:	d102      	bne.n	80010ac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 ff58 	bl	8002f66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7c1a      	ldrb	r2, [r3, #16]
 80010be:	f88d 2000 	strb.w	r2, [sp]
 80010c2:	3304      	adds	r3, #4
 80010c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c6:	f001 fe37 	bl	8002d38 <USB_CoreInit>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0ce      	b.n	800127a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 ff50 	bl	8002f88 <USB_SetCurrentMode>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2202      	movs	r2, #2
 80010f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e0bf      	b.n	800127a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e04a      	b.n	8001196 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	3315      	adds	r3, #21
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	3314      	adds	r3, #20
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b298      	uxth	r0, r3
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	332e      	adds	r3, #46	@ 0x2e
 800113c:	4602      	mov	r2, r0
 800113e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	3318      	adds	r3, #24
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	331c      	adds	r3, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	3320      	adds	r3, #32
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	3324      	adds	r3, #36	@ 0x24
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	3301      	adds	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3af      	bcc.n	8001100 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e044      	b.n	8001230 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	3301      	adds	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	429a      	cmp	r2, r3
 8001238:	d3b5      	bcc.n	80011a6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7c1a      	ldrb	r2, [r3, #16]
 8001242:	f88d 2000 	strb.w	r2, [sp]
 8001246:	3304      	adds	r3, #4
 8001248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800124a:	f001 fee9 	bl	8003020 <USB_DevInit>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e00c      	b.n	800127a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f002 ff33 	bl	80040de <USB_DevDisconnect>

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_PCD_Start+0x1c>
 800129a:	2302      	movs	r3, #2
 800129c:	e022      	b.n	80012e4 <HAL_PCD_Start+0x62>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d105      	bne.n	80012c6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fe3a 	bl	8002f44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fee1 	bl	800409c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b08d      	sub	sp, #52	@ 0x34
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 ff9f 	bl	8004246 <USB_GetMode>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 848c 	bne.w	8001c28 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f002 ff03 	bl	8004120 <USB_ReadInterrupts>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 8482 	beq.w	8001c26 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fef0 	bl	8004120 <USB_ReadInterrupts>
 8001340:	4603      	mov	r3, r0
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b02      	cmp	r3, #2
 8001348:	d107      	bne.n	800135a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f002 0202 	and.w	r2, r2, #2
 8001358:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fede 	bl	8004120 <USB_ReadInterrupts>
 8001364:	4603      	mov	r3, r0
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b10      	cmp	r3, #16
 800136c:	d161      	bne.n	8001432 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0210 	bic.w	r2, r2, #16
 800137c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f003 020f 	and.w	r2, r3, #15
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	3304      	adds	r3, #4
 800139c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013a8:	d124      	bne.n	80013f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d035      	beq.n	8001422 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	6a38      	ldr	r0, [r7, #32]
 80013ca:	f002 fd15 	bl	8003df8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013da:	441a      	add	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ec:	441a      	add	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	e016      	b.n	8001422 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80013fe:	d110      	bne.n	8001422 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001406:	2208      	movs	r2, #8
 8001408:	4619      	mov	r1, r3
 800140a:	6a38      	ldr	r0, [r7, #32]
 800140c:	f002 fcf4 	bl	8003df8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141c:	441a      	add	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699a      	ldr	r2, [r3, #24]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0210 	orr.w	r2, r2, #16
 8001430:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fe72 	bl	8004120 <USB_ReadInterrupts>
 800143c:	4603      	mov	r3, r0
 800143e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001442:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001446:	f040 80a7 	bne.w	8001598 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fe77 	bl	8004146 <USB_ReadDevAllOutEpInterrupt>
 8001458:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800145a:	e099      	b.n	8001590 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800145c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 808e 	beq.w	8001584 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fe9b 	bl	80041ae <USB_ReadDevOutEPInterrupt>
 8001478:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00c      	beq.n	800149e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001490:	461a      	mov	r2, r3
 8001492:	2301      	movs	r3, #1
 8001494:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001496:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fe8b 	bl	80021b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00c      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	015a      	lsls	r2, r3, #5
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014b4:	461a      	mov	r2, r3
 80014b6:	2308      	movs	r3, #8
 80014b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 ff61 	bl	8002384 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014d8:	461a      	mov	r2, r3
 80014da:	2310      	movs	r3, #16
 80014dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d030      	beq.n	800154a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f0:	2b80      	cmp	r3, #128	@ 0x80
 80014f2:	d109      	bne.n	8001508 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001502:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001506:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	3304      	adds	r3, #4
 800151c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	78db      	ldrb	r3, [r3, #3]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d108      	bne.n	8001538 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2200      	movs	r2, #0
 800152a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f004 feba 	bl	80062ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	015a      	lsls	r2, r3, #5
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	4413      	add	r3, r2
 8001540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001544:	461a      	mov	r2, r3
 8001546:	2302      	movs	r3, #2
 8001548:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	4413      	add	r3, r2
 800155c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001560:	461a      	mov	r2, r3
 8001562:	2320      	movs	r3, #32
 8001564:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d009      	beq.n	8001584 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001572:	015a      	lsls	r2, r3, #5
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	4413      	add	r3, r2
 8001578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800157c:	461a      	mov	r2, r3
 800157e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001582:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	3301      	adds	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001592:	2b00      	cmp	r3, #0
 8001594:	f47f af62 	bne.w	800145c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fdbf 	bl	8004120 <USB_ReadInterrupts>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015ac:	f040 80db 	bne.w	8001766 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 fde0 	bl	800417a <USB_ReadDevAllInEpInterrupt>
 80015ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015c0:	e0cd      	b.n	800175e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80c2 	beq.w	8001752 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fe06 	bl	80041ea <USB_ReadDevInEPInterrupt>
 80015de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d057      	beq.n	800169a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	2201      	movs	r2, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	69f9      	ldr	r1, [r7, #28]
 8001606:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800160a:	4013      	ands	r3, r2
 800160c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800161a:	461a      	mov	r2, r3
 800161c:	2301      	movs	r3, #1
 800161e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	799b      	ldrb	r3, [r3, #6]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d132      	bne.n	800168e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	3320      	adds	r3, #32
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4403      	add	r3, r0
 8001648:	331c      	adds	r3, #28
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4419      	add	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4403      	add	r3, r0
 800165c:	3320      	adds	r3, #32
 800165e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	2b00      	cmp	r3, #0
 8001664:	d113      	bne.n	800168e <HAL_PCD_IRQHandler+0x3a2>
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3324      	adds	r3, #36	@ 0x24
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001686:	461a      	mov	r2, r3
 8001688:	2101      	movs	r1, #1
 800168a:	f002 fe0d 	bl	80042a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f004 fd8e 	bl	80061b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016b0:	461a      	mov	r2, r3
 80016b2:	2308      	movs	r3, #8
 80016b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	015a      	lsls	r2, r3, #5
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	4413      	add	r3, r2
 80016c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016cc:	461a      	mov	r2, r3
 80016ce:	2310      	movs	r3, #16
 80016d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016e8:	461a      	mov	r2, r3
 80016ea:	2340      	movs	r3, #64	@ 0x40
 80016ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016fa:	6a38      	ldr	r0, [r7, #32]
 80016fc:	f001 fdf4 	bl	80032e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	3310      	adds	r3, #16
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	3304      	adds	r3, #4
 8001712:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	78db      	ldrb	r3, [r3, #3]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2200      	movs	r2, #0
 8001720:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	b2db      	uxtb	r3, r3
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f004 fdd1 	bl	80062d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800173a:	461a      	mov	r2, r3
 800173c:	2302      	movs	r3, #2
 800173e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800174a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fca5 	bl	800209c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	3301      	adds	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800175e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	f47f af2e 	bne.w	80015c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fcd8 	bl	8004120 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800177a:	d122      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001796:	2b01      	cmp	r3, #1
 8001798:	d108      	bne.n	80017ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017a2:	2100      	movs	r1, #0
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fe8b 	bl	80024c0 <HAL_PCDEx_LPM_Callback>
 80017aa:	e002      	b.n	80017b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f004 fd6f 	bl	8006290 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fcaa 	bl	8004120 <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017d6:	d112      	bne.n	80017fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d102      	bne.n	80017ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f004 fd2b 	bl	8006244 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80017fc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fc8c 	bl	8004120 <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001812:	f040 80b7 	bne.w	8001984 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2110      	movs	r1, #16
 8001830:	4618      	mov	r0, r3
 8001832:	f001 fd59 	bl	80032e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800183a:	e046      	b.n	80018ca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183e:	015a      	lsls	r2, r3, #5
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001848:	461a      	mov	r2, r3
 800184a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800184e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001860:	0151      	lsls	r1, r2, #5
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	440a      	add	r2, r1
 8001866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800186a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800186e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001872:	015a      	lsls	r2, r3, #5
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	4413      	add	r3, r2
 8001878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800187c:	461a      	mov	r2, r3
 800187e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001882:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001886:	015a      	lsls	r2, r3, #5
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	4413      	add	r3, r2
 800188c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001894:	0151      	lsls	r1, r2, #5
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	440a      	add	r2, r1
 800189a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800189e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b4:	0151      	lsls	r1, r2, #5
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	440a      	add	r2, r1
 80018ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c6:	3301      	adds	r3, #1
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	791b      	ldrb	r3, [r3, #4]
 80018ce:	461a      	mov	r2, r3
 80018d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d3b2      	bcc.n	800183c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7bdb      	ldrb	r3, [r3, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d016      	beq.n	8001920 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001902:	f043 030b 	orr.w	r3, r3, #11
 8001906:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001918:	f043 030b 	orr.w	r3, r3, #11
 800191c:	6453      	str	r3, [r2, #68]	@ 0x44
 800191e:	e015      	b.n	800194c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800192e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001932:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001936:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001946:	f043 030b 	orr.w	r3, r3, #11
 800194a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800195a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800195e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800196e:	461a      	mov	r2, r3
 8001970:	f002 fc9a 	bl	80042a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fbc9 	bl	8004120 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001998:	d123      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fc5f 	bl	8004262 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 fd16 	bl	80033da <USB_GetDevSpeed>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681c      	ldr	r4, [r3, #0]
 80019ba:	f001 f9b1 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 80019be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019c4:	461a      	mov	r2, r3
 80019c6:	4620      	mov	r0, r4
 80019c8:	f001 fa1a 	bl	8002e00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f004 fc1a 	bl	8006206 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fb9a 	bl	8004120 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d10a      	bne.n	8001a0c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f004 fbf7 	bl	80061ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f002 0208 	and.w	r2, r2, #8
 8001a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 fb85 	bl	8004120 <USB_ReadInterrupts>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1c:	2b80      	cmp	r3, #128	@ 0x80
 8001a1e:	d123      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a30:	e014      	b.n	8001a5c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d105      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 faf2 	bl	800203a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	3301      	adds	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	791b      	ldrb	r3, [r3, #4]
 8001a60:	461a      	mov	r2, r3
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d3e4      	bcc.n	8001a32 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fb57 	bl	8004120 <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a7c:	d13c      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a7e:	2301      	movs	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a82:	e02b      	b.n	8001adc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3318      	adds	r3, #24
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d115      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001aaa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da12      	bge.n	8001ad6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	3317      	adds	r3, #23
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fab2 	bl	800203a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	3301      	adds	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d3cd      	bcc.n	8001a84 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fb0f 	bl	8004120 <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b0c:	d156      	bne.n	8001bbc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b0e:	2301      	movs	r3, #1
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b12:	e045      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d12e      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da2b      	bge.n	8001b9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d121      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10a      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b96:	6053      	str	r3, [r2, #4]
            break;
 8001b98:	e008      	b.n	8001bac <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d3b3      	bcc.n	8001b14 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 faad 	bl	8004120 <USB_ReadInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd0:	d10a      	bne.n	8001be8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f004 fb8e 	bl	80062f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 fa97 	bl	8004120 <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d115      	bne.n	8001c28 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f004 fb7e 	bl	8006310 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6859      	ldr	r1, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	e000      	b.n	8001c28 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c26:	bf00      	nop
    }
  }
}
 8001c28:	3734      	adds	r7, #52	@ 0x34
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd90      	pop	{r4, r7, pc}

08001c2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_PCD_SetAddress+0x1a>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e012      	b.n	8001c6e <HAL_PCD_SetAddress+0x40>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 f9f6 	bl	8004050 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	4608      	mov	r0, r1
 8001c80:	4611      	mov	r1, r2
 8001c82:	461a      	mov	r2, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	70fb      	strb	r3, [r7, #3]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	803b      	strh	r3, [r7, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da0f      	bge.n	8001cbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 020f 	and.w	r2, r3, #15
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	3310      	adds	r3, #16
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	705a      	strb	r2, [r3, #1]
 8001cba:	e00f      	b.n	8001cdc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001ce8:	883b      	ldrh	r3, [r7, #0]
 8001cea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	78ba      	ldrb	r2, [r7, #2]
 8001cf6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d0a:	78bb      	ldrb	r3, [r7, #2]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d102      	bne.n	8001d16 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_EP_Open+0xae>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e00e      	b.n	8001d42 <HAL_PCD_EP_Open+0xcc>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 fb76 	bl	8003424 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d40:	7afb      	ldrb	r3, [r7, #11]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da0f      	bge.n	8001d7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	705a      	strb	r2, [r3, #1]
 8001d7c:	e00f      	b.n	8001d9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_PCD_EP_Close+0x6e>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e00e      	b.n	8001dd6 <HAL_PCD_EP_Close+0x8c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 fbb4 	bl	8003534 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	460b      	mov	r3, r1
 8001dec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	f003 020f 	and.w	r2, r3, #15
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	3304      	adds	r3, #4
 8001e06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	799b      	ldrb	r3, [r3, #6]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d102      	bne.n	8001e3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	799b      	ldrb	r3, [r3, #6]
 8001e42:	461a      	mov	r2, r3
 8001e44:	6979      	ldr	r1, [r7, #20]
 8001e46:	f001 fc51 	bl	80036ec <USB_EPStartXfer>

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	460b      	mov	r3, r1
 8001e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 020f 	and.w	r2, r3, #15
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	3310      	adds	r3, #16
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	3304      	adds	r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2201      	movs	r2, #1
 8001e92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	799b      	ldrb	r3, [r3, #6]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d102      	bne.n	8001eae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	799b      	ldrb	r3, [r3, #6]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	6979      	ldr	r1, [r7, #20]
 8001eba:	f001 fc17 	bl	80036ec <USB_EPStartXfer>

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	7912      	ldrb	r2, [r2, #4]
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e04f      	b.n	8001f86 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da0f      	bge.n	8001f0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 020f 	and.w	r2, r3, #15
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	3310      	adds	r3, #16
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	3304      	adds	r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	705a      	strb	r2, [r3, #1]
 8001f0c:	e00d      	b.n	8001f2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_PCD_EP_SetStall+0x82>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e01d      	b.n	8001f86 <HAL_PCD_EP_SetStall+0xbe>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68f9      	ldr	r1, [r7, #12]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 ffa5 	bl	8003ea8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7999      	ldrb	r1, [r3, #6]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f76:	461a      	mov	r2, r3
 8001f78:	f002 f996 	bl	80042a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	7912      	ldrb	r2, [r2, #4]
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e042      	b.n	8002032 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da0f      	bge.n	8001fd4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	3310      	adds	r3, #16
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	705a      	strb	r2, [r3, #1]
 8001fd2:	e00f      	b.n	8001ff4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 020f 	and.w	r2, r3, #15
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	3304      	adds	r3, #4
 8001fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_PCD_EP_ClrStall+0x86>
 8002010:	2302      	movs	r3, #2
 8002012:	e00e      	b.n	8002032 <HAL_PCD_EP_ClrStall+0xa4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68f9      	ldr	r1, [r7, #12]
 8002022:	4618      	mov	r0, r3
 8002024:	f001 ffae 	bl	8003f84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204a:	2b00      	cmp	r3, #0
 800204c:	da0c      	bge.n	8002068 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 020f 	and.w	r2, r3, #15
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	3310      	adds	r3, #16
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e00c      	b.n	8002082 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 020f 	and.w	r2, r3, #15
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	3304      	adds	r3, #4
 8002080:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68f9      	ldr	r1, [r7, #12]
 8002088:	4618      	mov	r0, r3
 800208a:	f001 fdcd 	bl	8003c28 <USB_EPStopXfer>
 800208e:	4603      	mov	r3, r0
 8002090:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002092:	7afb      	ldrb	r3, [r7, #11]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	3310      	adds	r3, #16
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	3304      	adds	r3, #4
 80020c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d901      	bls.n	80020d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e06b      	b.n	80021ac <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d902      	bls.n	80020f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3303      	adds	r3, #3
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f8:	e02a      	b.n	8002150 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	429a      	cmp	r2, r3
 800210e:	d902      	bls.n	8002116 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3303      	adds	r3, #3
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4603      	mov	r3, r0
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f001 fe22 	bl	8003d7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	441a      	add	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	429a      	cmp	r2, r3
 8002164:	d809      	bhi.n	800217a <PCD_WriteEmptyTxFifo+0xde>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216e:	429a      	cmp	r2, r3
 8002170:	d203      	bcs.n	800217a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1bf      	bne.n	80020fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	429a      	cmp	r2, r3
 8002184:	d811      	bhi.n	80021aa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2201      	movs	r2, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800219a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	43db      	mvns	r3, r3
 80021a0:	6939      	ldr	r1, [r7, #16]
 80021a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021a6:	4013      	ands	r3, r2
 80021a8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	333c      	adds	r3, #60	@ 0x3c
 80021cc:	3304      	adds	r3, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	799b      	ldrb	r3, [r3, #6]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d17b      	bne.n	80022e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4a61      	ldr	r2, [pc, #388]	@ (800237c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	f240 80b9 	bls.w	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80b3 	beq.w	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002216:	461a      	mov	r2, r3
 8002218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800221c:	6093      	str	r3, [r2, #8]
 800221e:	e0a7      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4413      	add	r3, r2
 8002232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002236:	461a      	mov	r2, r3
 8002238:	2320      	movs	r3, #32
 800223a:	6093      	str	r3, [r2, #8]
 800223c:	e098      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	f040 8093 	bne.w	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4a4b      	ldr	r2, [pc, #300]	@ (800237c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d90f      	bls.n	8002272 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002268:	461a      	mov	r2, r3
 800226a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800226e:	6093      	str	r3, [r2, #8]
 8002270:	e07e      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	3304      	adds	r3, #4
 8002286:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	0159      	lsls	r1, r3, #5
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	440b      	add	r3, r1
 8002294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229e:	1ad2      	subs	r2, r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d114      	bne.n	80022d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022bc:	461a      	mov	r2, r3
 80022be:	2101      	movs	r1, #1
 80022c0:	f001 fff2 	bl	80042a8 <USB_EP0_OutStart>
 80022c4:	e006      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	441a      	add	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f003 ff50 	bl	8006180 <HAL_PCD_DataOutStageCallback>
 80022e0:	e046      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4a26      	ldr	r2, [pc, #152]	@ (8002380 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d124      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	e032      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	2320      	movs	r3, #32
 8002324:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f003 ff27 	bl	8006180 <HAL_PCD_DataOutStageCallback>
 8002332:	e01d      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d114      	bne.n	8002364 <PCD_EP_OutXfrComplete_int+0x1b0>
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d108      	bne.n	8002364 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800235c:	461a      	mov	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f001 ffa2 	bl	80042a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f003 ff08 	bl	8006180 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	4f54300a 	.word	0x4f54300a
 8002380:	4f54310a 	.word	0x4f54310a

08002384 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	333c      	adds	r3, #60	@ 0x3c
 800239c:	3304      	adds	r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a15      	ldr	r2, [pc, #84]	@ (800240c <PCD_EP_OutSetupPacket_int+0x88>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d90e      	bls.n	80023d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d009      	beq.n	80023d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f003 febf 	bl	800615c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	@ (800240c <PCD_EP_OutSetupPacket_int+0x88>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d90c      	bls.n	8002400 <PCD_EP_OutSetupPacket_int+0x7c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	799b      	ldrb	r3, [r3, #6]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d108      	bne.n	8002400 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023f8:	461a      	mov	r2, r3
 80023fa:	2101      	movs	r1, #1
 80023fc:	f001 ff54 	bl	80042a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	4f54300a 	.word	0x4f54300a

08002410 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
 800241c:	4613      	mov	r3, r2
 800241e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002426:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800242e:	883b      	ldrh	r3, [r7, #0]
 8002430:	0419      	lsls	r1, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	430a      	orrs	r2, r1
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
 800243c:	e028      	b.n	8002490 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4413      	add	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	e00d      	b.n	800246e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	3340      	adds	r3, #64	@ 0x40
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	4413      	add	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	3301      	adds	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	3b01      	subs	r3, #1
 8002474:	429a      	cmp	r2, r3
 8002476:	d3ec      	bcc.n	8002452 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002478:	883b      	ldrh	r3, [r7, #0]
 800247a:	0418      	lsls	r0, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	3b01      	subs	r3, #1
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	4302      	orrs	r2, r0
 8002488:	3340      	adds	r3, #64	@ 0x40
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e267      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d075      	beq.n	80025e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024f6:	4b88      	ldr	r3, [pc, #544]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d00c      	beq.n	800251c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002502:	4b85      	ldr	r3, [pc, #532]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800250a:	2b08      	cmp	r3, #8
 800250c:	d112      	bne.n	8002534 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250e:	4b82      	ldr	r3, [pc, #520]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800251a:	d10b      	bne.n	8002534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	4b7e      	ldr	r3, [pc, #504]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d05b      	beq.n	80025e0 <HAL_RCC_OscConfig+0x108>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d157      	bne.n	80025e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e242      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253c:	d106      	bne.n	800254c <HAL_RCC_OscConfig+0x74>
 800253e:	4b76      	ldr	r3, [pc, #472]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a75      	ldr	r2, [pc, #468]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e01d      	b.n	8002588 <HAL_RCC_OscConfig+0xb0>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x98>
 8002556:	4b70      	ldr	r3, [pc, #448]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6f      	ldr	r2, [pc, #444]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800255c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b6d      	ldr	r3, [pc, #436]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6c      	ldr	r2, [pc, #432]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0xb0>
 8002570:	4b69      	ldr	r3, [pc, #420]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a68      	ldr	r2, [pc, #416]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b66      	ldr	r3, [pc, #408]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a65      	ldr	r2, [pc, #404]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fa58 	bl	8000a44 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7fe fa54 	bl	8000a44 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	@ 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e207      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0xc0>
 80025b6:	e014      	b.n	80025e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fa44 	bl	8000a44 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe fa40 	bl	8000a44 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	@ 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e1f3      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	4b51      	ldr	r3, [pc, #324]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0xe8>
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d063      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fa:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002602:	2b08      	cmp	r3, #8
 8002604:	d11c      	bne.n	8002640 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002606:	4b44      	ldr	r3, [pc, #272]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d116      	bne.n	8002640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_RCC_OscConfig+0x152>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e1c7      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262a:	4b3b      	ldr	r3, [pc, #236]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4937      	ldr	r1, [pc, #220]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	e03a      	b.n	80026b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002648:	4b34      	ldr	r3, [pc, #208]	@ (800271c <HAL_RCC_OscConfig+0x244>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe f9f9 	bl	8000a44 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002656:	f7fe f9f5 	bl	8000a44 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e1a8      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	4b2b      	ldr	r3, [pc, #172]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b28      	ldr	r3, [pc, #160]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4925      	ldr	r1, [pc, #148]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]
 8002688:	e015      	b.n	80026b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268a:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_RCC_OscConfig+0x244>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe f9d8 	bl	8000a44 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe f9d4 	bl	8000a44 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e187      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d036      	beq.n	8002730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <HAL_RCC_OscConfig+0x248>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fe f9b8 	bl	8000a44 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d8:	f7fe f9b4 	bl	8000a44 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e167      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80026ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x200>
 80026f6:	e01b      	b.n	8002730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_RCC_OscConfig+0x248>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe f9a1 	bl	8000a44 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	e00e      	b.n	8002724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7fe f99d 	bl	8000a44 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d907      	bls.n	8002724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e150      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
 8002718:	40023800 	.word	0x40023800
 800271c:	42470000 	.word	0x42470000
 8002720:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	4b88      	ldr	r3, [pc, #544]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ea      	bne.n	8002706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8097 	beq.w	800286c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b81      	ldr	r3, [pc, #516]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	4b7d      	ldr	r3, [pc, #500]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	4a7c      	ldr	r2, [pc, #496]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	@ 0x40
 800275e:	4b7a      	ldr	r3, [pc, #488]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b77      	ldr	r3, [pc, #476]	@ (800294c <HAL_RCC_OscConfig+0x474>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b74      	ldr	r3, [pc, #464]	@ (800294c <HAL_RCC_OscConfig+0x474>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a73      	ldr	r2, [pc, #460]	@ (800294c <HAL_RCC_OscConfig+0x474>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe f95d 	bl	8000a44 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe f959 	bl	8000a44 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e10c      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b6a      	ldr	r3, [pc, #424]	@ (800294c <HAL_RCC_OscConfig+0x474>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x2ea>
 80027b4:	4b64      	ldr	r3, [pc, #400]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b8:	4a63      	ldr	r2, [pc, #396]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c0:	e01c      	b.n	80027fc <HAL_RCC_OscConfig+0x324>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x30c>
 80027ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027da:	4a5b      	ldr	r2, [pc, #364]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0x324>
 80027e4:	4b58      	ldr	r3, [pc, #352]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	4a57      	ldr	r2, [pc, #348]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f0:	4b55      	ldr	r3, [pc, #340]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f4:	4a54      	ldr	r2, [pc, #336]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027f6:	f023 0304 	bic.w	r3, r3, #4
 80027fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe f91e 	bl	8000a44 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe f91a 	bl	8000a44 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0cb      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002822:	4b49      	ldr	r3, [pc, #292]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ee      	beq.n	800280c <HAL_RCC_OscConfig+0x334>
 800282e:	e014      	b.n	800285a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7fe f908 	bl	8000a44 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe f904 	bl	8000a44 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0b5      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284e:	4b3e      	ldr	r3, [pc, #248]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ee      	bne.n	8002838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b39      	ldr	r3, [pc, #228]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	4a38      	ldr	r2, [pc, #224]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80a1 	beq.w	80029b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002876:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b08      	cmp	r3, #8
 8002880:	d05c      	beq.n	800293c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d141      	bne.n	800290e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b31      	ldr	r3, [pc, #196]	@ (8002950 <HAL_RCC_OscConfig+0x478>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe f8d8 	bl	8000a44 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe f8d4 	bl	8000a44 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e087      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	3b01      	subs	r3, #1
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	491b      	ldr	r1, [pc, #108]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x478>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe f8ad 	bl	8000a44 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fe f8a9 	bl	8000a44 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e05c      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x416>
 800290c:	e054      	b.n	80029b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_RCC_OscConfig+0x478>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe f896 	bl	8000a44 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe f892 	bl	8000a44 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e045      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x444>
 800293a:	e03d      	b.n	80029b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d107      	bne.n	8002954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e038      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
 8002948:	40023800 	.word	0x40023800
 800294c:	40007000 	.word	0x40007000
 8002950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x4ec>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d028      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d121      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d11a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800298a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0cc      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b68      	ldr	r3, [pc, #416]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d90c      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b65      	ldr	r3, [pc, #404]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b63      	ldr	r3, [pc, #396]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0b8      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a1c:	4b59      	ldr	r3, [pc, #356]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a58      	ldr	r2, [pc, #352]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a34:	4b53      	ldr	r3, [pc, #332]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a52      	ldr	r2, [pc, #328]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b50      	ldr	r3, [pc, #320]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	494d      	ldr	r1, [pc, #308]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d044      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b47      	ldr	r3, [pc, #284]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d119      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b3f      	ldr	r3, [pc, #252]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e06f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	4b3b      	ldr	r3, [pc, #236]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e067      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b37      	ldr	r3, [pc, #220]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4934      	ldr	r1, [pc, #208]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab8:	f7fd ffc4 	bl	8000a44 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fd ffc0 	bl	8000a44 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e04f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d20c      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b22      	ldr	r3, [pc, #136]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e032      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4916      	ldr	r1, [pc, #88]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3a:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	490e      	ldr	r1, [pc, #56]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b4e:	f000 f821 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b52:	4602      	mov	r2, r0
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	490a      	ldr	r1, [pc, #40]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	5ccb      	ldrb	r3, [r1, r3]
 8002b62:	fa22 f303 	lsr.w	r3, r2, r3
 8002b66:	4a09      	ldr	r2, [pc, #36]	@ (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd ff24 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023c00 	.word	0x40023c00
 8002b84:	40023800 	.word	0x40023800
 8002b88:	0800675c 	.word	0x0800675c
 8002b8c:	20000004 	.word	0x20000004
 8002b90:	20000008 	.word	0x20000008

08002b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b98:	b090      	sub	sp, #64	@ 0x40
 8002b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bac:	4b59      	ldr	r3, [pc, #356]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	f200 80a1 	bhi.w	8002d00 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x3a>
 8002bc6:	e09b      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc8:	4b53      	ldr	r3, [pc, #332]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bcc:	e09b      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bce:	4b53      	ldr	r3, [pc, #332]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bd2:	e098      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bde:	4b4d      	ldr	r3, [pc, #308]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d028      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bea:	4b4a      	ldr	r3, [pc, #296]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4b47      	ldr	r3, [pc, #284]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c00:	fb03 f201 	mul.w	r2, r3, r1
 8002c04:	2300      	movs	r3, #0
 8002c06:	fb00 f303 	mul.w	r3, r0, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a43      	ldr	r2, [pc, #268]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c0e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c14:	460a      	mov	r2, r1
 8002c16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c1a:	4413      	add	r3, r2
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c20:	2200      	movs	r2, #0
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	61fa      	str	r2, [r7, #28]
 8002c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c2e:	f7fd fad3 	bl	80001d8 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4613      	mov	r3, r2
 8002c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c3a:	e053      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3c:	4b35      	ldr	r3, [pc, #212]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	2200      	movs	r2, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	617a      	str	r2, [r7, #20]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c4e:	f04f 0b00 	mov.w	fp, #0
 8002c52:	4652      	mov	r2, sl
 8002c54:	465b      	mov	r3, fp
 8002c56:	f04f 0000 	mov.w	r0, #0
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	0159      	lsls	r1, r3, #5
 8002c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c64:	0150      	lsls	r0, r2, #5
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c6e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c86:	ebb2 0408 	subs.w	r4, r2, r8
 8002c8a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	00eb      	lsls	r3, r5, #3
 8002c98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9c:	00e2      	lsls	r2, r4, #3
 8002c9e:	4614      	mov	r4, r2
 8002ca0:	461d      	mov	r5, r3
 8002ca2:	eb14 030a 	adds.w	r3, r4, sl
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	eb45 030b 	adc.w	r3, r5, fp
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cba:	4629      	mov	r1, r5
 8002cbc:	028b      	lsls	r3, r1, #10
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	028a      	lsls	r2, r1, #10
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	60fa      	str	r2, [r7, #12]
 8002cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd8:	f7fd fa7e 	bl	80001d8 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002cf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3740      	adds	r7, #64	@ 0x40
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	017d7840 	.word	0x017d7840

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	@ (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000004 	.word	0x20000004

08002d38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d38:	b084      	sub	sp, #16
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	f107 001c 	add.w	r0, r7, #28
 8002d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d123      	bne.n	8002d9a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f001 fae8 	bl	8004364 <USB_CoreReset>
 8002d94:	4603      	mov	r3, r0
 8002d96:	73fb      	strb	r3, [r7, #15]
 8002d98:	e01b      	b.n	8002dd2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f001 fadc 	bl	8004364 <USB_CoreReset>
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002db0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d106      	bne.n	8002dc6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dc4:	e005      	b.n	8002dd2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002dd2:	7fbb      	ldrb	r3, [r7, #30]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10b      	bne.n	8002df0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f043 0206 	orr.w	r2, r3, #6
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dfc:	b004      	add	sp, #16
 8002dfe:	4770      	bx	lr

08002e00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d165      	bne.n	8002ee0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4a41      	ldr	r2, [pc, #260]	@ (8002f1c <USB_SetTurnaroundTime+0x11c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d906      	bls.n	8002e2a <USB_SetTurnaroundTime+0x2a>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4a40      	ldr	r2, [pc, #256]	@ (8002f20 <USB_SetTurnaroundTime+0x120>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d202      	bcs.n	8002e2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e24:	230f      	movs	r3, #15
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e062      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f20 <USB_SetTurnaroundTime+0x120>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d306      	bcc.n	8002e40 <USB_SetTurnaroundTime+0x40>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4a3b      	ldr	r2, [pc, #236]	@ (8002f24 <USB_SetTurnaroundTime+0x124>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d202      	bcs.n	8002e40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e3a:	230e      	movs	r3, #14
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e057      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4a38      	ldr	r2, [pc, #224]	@ (8002f24 <USB_SetTurnaroundTime+0x124>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d306      	bcc.n	8002e56 <USB_SetTurnaroundTime+0x56>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4a37      	ldr	r2, [pc, #220]	@ (8002f28 <USB_SetTurnaroundTime+0x128>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d202      	bcs.n	8002e56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e50:	230d      	movs	r3, #13
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e04c      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4a33      	ldr	r2, [pc, #204]	@ (8002f28 <USB_SetTurnaroundTime+0x128>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d306      	bcc.n	8002e6c <USB_SetTurnaroundTime+0x6c>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4a32      	ldr	r2, [pc, #200]	@ (8002f2c <USB_SetTurnaroundTime+0x12c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d802      	bhi.n	8002e6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e66:	230c      	movs	r3, #12
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e041      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f2c <USB_SetTurnaroundTime+0x12c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d906      	bls.n	8002e82 <USB_SetTurnaroundTime+0x82>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4a2e      	ldr	r2, [pc, #184]	@ (8002f30 <USB_SetTurnaroundTime+0x130>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d802      	bhi.n	8002e82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e7c:	230b      	movs	r3, #11
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e036      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4a2a      	ldr	r2, [pc, #168]	@ (8002f30 <USB_SetTurnaroundTime+0x130>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d906      	bls.n	8002e98 <USB_SetTurnaroundTime+0x98>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4a29      	ldr	r2, [pc, #164]	@ (8002f34 <USB_SetTurnaroundTime+0x134>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d802      	bhi.n	8002e98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e92:	230a      	movs	r3, #10
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e02b      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4a26      	ldr	r2, [pc, #152]	@ (8002f34 <USB_SetTurnaroundTime+0x134>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d906      	bls.n	8002eae <USB_SetTurnaroundTime+0xae>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4a25      	ldr	r2, [pc, #148]	@ (8002f38 <USB_SetTurnaroundTime+0x138>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d202      	bcs.n	8002eae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e020      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <USB_SetTurnaroundTime+0x138>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d306      	bcc.n	8002ec4 <USB_SetTurnaroundTime+0xc4>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4a20      	ldr	r2, [pc, #128]	@ (8002f3c <USB_SetTurnaroundTime+0x13c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d802      	bhi.n	8002ec4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e015      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f3c <USB_SetTurnaroundTime+0x13c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d906      	bls.n	8002eda <USB_SetTurnaroundTime+0xda>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	@ (8002f40 <USB_SetTurnaroundTime+0x140>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d202      	bcs.n	8002eda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ed4:	2307      	movs	r3, #7
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e00a      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002eda:	2306      	movs	r3, #6
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e007      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d102      	bne.n	8002eec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ee6:	2309      	movs	r3, #9
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e001      	b.n	8002ef0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002eec:	2309      	movs	r3, #9
 8002eee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	029b      	lsls	r3, r3, #10
 8002f04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	00d8acbf 	.word	0x00d8acbf
 8002f20:	00e4e1c0 	.word	0x00e4e1c0
 8002f24:	00f42400 	.word	0x00f42400
 8002f28:	01067380 	.word	0x01067380
 8002f2c:	011a499f 	.word	0x011a499f
 8002f30:	01312cff 	.word	0x01312cff
 8002f34:	014ca43f 	.word	0x014ca43f
 8002f38:	016e3600 	.word	0x016e3600
 8002f3c:	01a6ab1f 	.word	0x01a6ab1f
 8002f40:	01e84800 	.word	0x01e84800

08002f44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f023 0201 	bic.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d115      	bne.n	8002fd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fb6:	200a      	movs	r0, #10
 8002fb8:	f7fd fd50 	bl	8000a5c <HAL_Delay>
      ms += 10U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	330a      	adds	r3, #10
 8002fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f001 f93f 	bl	8004246 <USB_GetMode>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d01e      	beq.n	800300c <USB_SetCurrentMode+0x84>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8002fd2:	d9f0      	bls.n	8002fb6 <USB_SetCurrentMode+0x2e>
 8002fd4:	e01a      	b.n	800300c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d115      	bne.n	8003008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fe8:	200a      	movs	r0, #10
 8002fea:	f7fd fd37 	bl	8000a5c <HAL_Delay>
      ms += 10U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	330a      	adds	r3, #10
 8002ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f001 f926 	bl	8004246 <USB_GetMode>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <USB_SetCurrentMode+0x84>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2bc7      	cmp	r3, #199	@ 0xc7
 8003004:	d9f0      	bls.n	8002fe8 <USB_SetCurrentMode+0x60>
 8003006:	e001      	b.n	800300c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e005      	b.n	8003018 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003010:	d101      	bne.n	8003016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003020:	b084      	sub	sp, #16
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800302e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	e009      	b.n	8003054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	3340      	adds	r3, #64	@ 0x40
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	2200      	movs	r2, #0
 800304c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3301      	adds	r3, #1
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b0e      	cmp	r3, #14
 8003058:	d9f2      	bls.n	8003040 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800305a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11c      	bne.n	800309c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003086:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003092:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	639a      	str	r2, [r3, #56]	@ 0x38
 800309a:	e00b      	b.n	80030b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80030ba:	461a      	mov	r2, r3
 80030bc:	2300      	movs	r3, #0
 80030be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10d      	bne.n	80030e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030d0:	2100      	movs	r1, #0
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f968 	bl	80033a8 <USB_SetDevSpeed>
 80030d8:	e008      	b.n	80030ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030da:	2101      	movs	r1, #1
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f963 	bl	80033a8 <USB_SetDevSpeed>
 80030e2:	e003      	b.n	80030ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030e4:	2103      	movs	r1, #3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f95e 	bl	80033a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030ec:	2110      	movs	r1, #16
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8fa 	bl	80032e8 <USB_FlushTxFifo>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f924 	bl	800334c <USB_FlushRxFifo>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003114:	461a      	mov	r2, r3
 8003116:	2300      	movs	r3, #0
 8003118:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003120:	461a      	mov	r2, r3
 8003122:	2300      	movs	r3, #0
 8003124:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800312c:	461a      	mov	r2, r3
 800312e:	2300      	movs	r3, #0
 8003130:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	e043      	b.n	80031c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800314a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800314e:	d118      	bne.n	8003182 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003162:	461a      	mov	r2, r3
 8003164:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e013      	b.n	8003194 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003178:	461a      	mov	r2, r3
 800317a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	e008      	b.n	8003194 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800318e:	461a      	mov	r2, r3
 8003190:	2300      	movs	r3, #0
 8003192:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a0:	461a      	mov	r2, r3
 80031a2:	2300      	movs	r3, #0
 80031a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031b2:	461a      	mov	r2, r3
 80031b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80031b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	3301      	adds	r3, #1
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031c4:	461a      	mov	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d3b5      	bcc.n	8003138 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	e043      	b.n	800325a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031e8:	d118      	bne.n	800321c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e013      	b.n	800322e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003212:	461a      	mov	r2, r3
 8003214:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e008      	b.n	800322e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	2300      	movs	r3, #0
 800322c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800323a:	461a      	mov	r2, r3
 800323c:	2300      	movs	r3, #0
 800323e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800324c:	461a      	mov	r2, r3
 800324e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3301      	adds	r3, #1
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800325e:	461a      	mov	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4293      	cmp	r3, r2
 8003264:	d3b5      	bcc.n	80031d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003278:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003286:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003288:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f043 0210 	orr.w	r2, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	4b10      	ldr	r3, [pc, #64]	@ (80032e4 <USB_DevInit+0x2c4>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f043 0208 	orr.w	r2, r3, #8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032e0:	b004      	add	sp, #16
 80032e2:	4770      	bx	lr
 80032e4:	803c3800 	.word	0x803c3800

080032e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3301      	adds	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003302:	d901      	bls.n	8003308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e01b      	b.n	8003340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	daf2      	bge.n	80032f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	019b      	lsls	r3, r3, #6
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800332c:	d901      	bls.n	8003332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e006      	b.n	8003340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b20      	cmp	r3, #32
 800333c:	d0f0      	beq.n	8003320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3301      	adds	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003364:	d901      	bls.n	800336a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e018      	b.n	800339c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	daf2      	bge.n	8003358 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2210      	movs	r2, #16
 800337a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3301      	adds	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003388:	d901      	bls.n	800338e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e006      	b.n	800339c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b10      	cmp	r3, #16
 8003398:	d0f0      	beq.n	800337c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80033da:	b480      	push	{r7}
 80033dc:	b087      	sub	sp, #28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0306 	and.w	r3, r3, #6
 80033f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80033fa:	2300      	movs	r3, #0
 80033fc:	75fb      	strb	r3, [r7, #23]
 80033fe:	e00a      	b.n	8003416 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d002      	beq.n	800340c <USB_GetDevSpeed+0x32>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b06      	cmp	r3, #6
 800340a:	d102      	bne.n	8003412 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800340c:	2302      	movs	r3, #2
 800340e:	75fb      	strb	r3, [r7, #23]
 8003410:	e001      	b.n	8003416 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003412:	230f      	movs	r3, #15
 8003414:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003416:	7dfb      	ldrb	r3, [r7, #23]
}
 8003418:	4618      	mov	r0, r3
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d13a      	bne.n	80034b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	b29b      	uxth	r3, r3
 8003458:	68f9      	ldr	r1, [r7, #12]
 800345a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800345e:	4313      	orrs	r3, r2
 8003460:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d155      	bne.n	8003524 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	791b      	ldrb	r3, [r3, #4]
 8003492:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003494:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	059b      	lsls	r3, r3, #22
 800349a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800349c:	4313      	orrs	r3, r2
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	0151      	lsls	r1, r2, #5
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	440a      	add	r2, r1
 80034a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	e036      	b.n	8003524 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	2101      	movs	r1, #1
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	68f9      	ldr	r1, [r7, #12]
 80034d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d11a      	bne.n	8003524 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	791b      	ldrb	r3, [r3, #4]
 8003508:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800350a:	430b      	orrs	r3, r1
 800350c:	4313      	orrs	r3, r2
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	0151      	lsls	r1, r2, #5
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	440a      	add	r2, r1
 8003516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800351a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800351e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003522:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d161      	bne.n	8003614 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003566:	d11f      	bne.n	80035a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	0151      	lsls	r1, r2, #5
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	440a      	add	r2, r1
 800357e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003582:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003586:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	440a      	add	r2, r1
 800359e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	b29b      	uxth	r3, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035c8:	4013      	ands	r3, r2
 80035ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035ec:	4013      	ands	r3, r2
 80035ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	0159      	lsls	r1, r3, #5
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	440b      	add	r3, r1
 8003606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360a:	4619      	mov	r1, r3
 800360c:	4b35      	ldr	r3, [pc, #212]	@ (80036e4 <USB_DeactivateEndpoint+0x1b0>)
 800360e:	4013      	ands	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
 8003612:	e060      	b.n	80036d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800362a:	d11f      	bne.n	800366c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	0151      	lsls	r1, r2, #5
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	440a      	add	r2, r1
 8003642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003646:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800364a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	0151      	lsls	r1, r2, #5
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	440a      	add	r2, r1
 8003662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003666:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800366a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	2101      	movs	r1, #1
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	43db      	mvns	r3, r3
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800368c:	4013      	ands	r3, r2
 800368e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	43db      	mvns	r3, r3
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036b0:	4013      	ands	r3, r2
 80036b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	0159      	lsls	r1, r3, #5
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	440b      	add	r3, r1
 80036ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ce:	4619      	mov	r1, r3
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <USB_DeactivateEndpoint+0x1b4>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	ec337800 	.word	0xec337800
 80036e8:	eff37800 	.word	0xeff37800

080036ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	@ 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 817f 	bne.w	8003a0c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d132      	bne.n	800377c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	0151      	lsls	r1, r2, #5
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	440a      	add	r2, r1
 800372c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003730:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003734:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	0151      	lsls	r1, r2, #5
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	440a      	add	r2, r1
 8003750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003754:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	0151      	lsls	r1, r2, #5
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	440a      	add	r2, r1
 8003770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003774:	0cdb      	lsrs	r3, r3, #19
 8003776:	04db      	lsls	r3, r3, #19
 8003778:	6113      	str	r3, [r2, #16]
 800377a:	e097      	b.n	80038ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	0151      	lsls	r1, r2, #5
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	440a      	add	r2, r1
 8003792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003796:	0cdb      	lsrs	r3, r3, #19
 8003798:	04db      	lsls	r3, r3, #19
 800379a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	0151      	lsls	r1, r2, #5
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	440a      	add	r2, r1
 80037b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80037ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80037be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d11a      	bne.n	80037fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d903      	bls.n	80037da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	0151      	lsls	r1, r2, #5
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	440a      	add	r2, r1
 80037f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80037f8:	6113      	str	r3, [r2, #16]
 80037fa:	e044      	b.n	8003886 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4413      	add	r3, r2
 8003806:	1e5a      	subs	r2, r3, #1
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	8afb      	ldrh	r3, [r7, #22]
 8003822:	04d9      	lsls	r1, r3, #19
 8003824:	4ba4      	ldr	r3, [pc, #656]	@ (8003ab8 <USB_EPStartXfer+0x3cc>)
 8003826:	400b      	ands	r3, r1
 8003828:	69b9      	ldr	r1, [r7, #24]
 800382a:	0148      	lsls	r0, r1, #5
 800382c:	69f9      	ldr	r1, [r7, #28]
 800382e:	4401      	add	r1, r0
 8003830:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003834:	4313      	orrs	r3, r2
 8003836:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	791b      	ldrb	r3, [r3, #4]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d122      	bne.n	8003886 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	440a      	add	r2, r1
 8003856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800385a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800385e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	8afb      	ldrh	r3, [r7, #22]
 8003870:	075b      	lsls	r3, r3, #29
 8003872:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003876:	69b9      	ldr	r1, [r7, #24]
 8003878:	0148      	lsls	r0, r1, #5
 800387a:	69f9      	ldr	r1, [r7, #28]
 800387c:	4401      	add	r1, r0
 800387e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003882:	4313      	orrs	r3, r2
 8003884:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389c:	69b9      	ldr	r1, [r7, #24]
 800389e:	0148      	lsls	r0, r1, #5
 80038a0:	69f9      	ldr	r1, [r7, #28]
 80038a2:	4401      	add	r1, r0
 80038a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80038a8:	4313      	orrs	r3, r2
 80038aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d14b      	bne.n	800394a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	791b      	ldrb	r3, [r3, #4]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d128      	bne.n	8003928 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d110      	bne.n	8003908 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003900:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e00f      	b.n	8003928 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	0151      	lsls	r1, r2, #5
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	440a      	add	r2, r1
 800391e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003926:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	0151      	lsls	r1, r2, #5
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	440a      	add	r2, r1
 800393e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003942:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	e166      	b.n	8003c18 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	0151      	lsls	r1, r2, #5
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	440a      	add	r2, r1
 8003960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003964:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003968:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	791b      	ldrb	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d015      	beq.n	800399e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 814e 	beq.w	8003c18 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	2101      	movs	r1, #1
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	69f9      	ldr	r1, [r7, #28]
 8003994:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003998:	4313      	orrs	r3, r2
 800399a:	634b      	str	r3, [r1, #52]	@ 0x34
 800399c:	e13c      	b.n	8003c18 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d110      	bne.n	80039d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	0151      	lsls	r1, r2, #5
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	440a      	add	r2, r1
 80039c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e00f      	b.n	80039f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	68d9      	ldr	r1, [r3, #12]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	b298      	uxth	r0, r3
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	4603      	mov	r3, r0
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f9b9 	bl	8003d7c <USB_WritePacket>
 8003a0a:	e105      	b.n	8003c18 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a26:	0cdb      	lsrs	r3, r3, #19
 8003a28:	04db      	lsls	r3, r3, #19
 8003a2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003a4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003a4e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d132      	bne.n	8003abc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	0148      	lsls	r0, r1, #5
 8003a88:	69f9      	ldr	r1, [r7, #28]
 8003a8a:	4401      	add	r1, r0
 8003a8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a90:	4313      	orrs	r3, r2
 8003a92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ab2:	6113      	str	r3, [r2, #16]
 8003ab4:	e062      	b.n	8003b7c <USB_EPStartXfer+0x490>
 8003ab6:	bf00      	nop
 8003ab8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d123      	bne.n	8003b0c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ada:	69b9      	ldr	r1, [r7, #24]
 8003adc:	0148      	lsls	r0, r1, #5
 8003ade:	69f9      	ldr	r1, [r7, #28]
 8003ae0:	4401      	add	r1, r0
 8003ae2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	0151      	lsls	r1, r2, #5
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	440a      	add	r2, r1
 8003b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b08:	6113      	str	r3, [r2, #16]
 8003b0a:	e037      	b.n	8003b7c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4413      	add	r3, r2
 8003b16:	1e5a      	subs	r2, r3, #1
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	8afa      	ldrh	r2, [r7, #22]
 8003b28:	fb03 f202 	mul.w	r2, r3, r2
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	8afb      	ldrh	r3, [r7, #22]
 8003b40:	04d9      	lsls	r1, r3, #19
 8003b42:	4b38      	ldr	r3, [pc, #224]	@ (8003c24 <USB_EPStartXfer+0x538>)
 8003b44:	400b      	ands	r3, r1
 8003b46:	69b9      	ldr	r1, [r7, #24]
 8003b48:	0148      	lsls	r0, r1, #5
 8003b4a:	69f9      	ldr	r1, [r7, #28]
 8003b4c:	4401      	add	r1, r0
 8003b4e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b52:	4313      	orrs	r3, r2
 8003b54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	0148      	lsls	r0, r1, #5
 8003b70:	69f9      	ldr	r1, [r7, #28]
 8003b72:	4401      	add	r1, r0
 8003b74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10d      	bne.n	8003b9e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	68d9      	ldr	r1, [r3, #12]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	791b      	ldrb	r3, [r3, #4]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d128      	bne.n	8003bf8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d110      	bne.n	8003bd8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	0151      	lsls	r1, r2, #5
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	440a      	add	r2, r1
 8003bcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00f      	b.n	8003bf8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	0151      	lsls	r1, r2, #5
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	1ff80000 	.word	0x1ff80000

08003c28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d14a      	bne.n	8003cdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c5e:	f040 8086 	bne.w	8003d6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	7812      	ldrb	r2, [r2, #0]
 8003c76:	0151      	lsls	r1, r2, #5
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	7812      	ldrb	r2, [r2, #0]
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ca8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d902      	bls.n	8003cc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8003cbe:	e056      	b.n	8003d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cd8:	d0e7      	beq.n	8003caa <USB_EPStopXfer+0x82>
 8003cda:	e048      	b.n	8003d6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cf4:	d13b      	bne.n	8003d6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d902      	bls.n	8003d54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
          break;
 8003d52:	e00c      	b.n	8003d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d6c:	d0e7      	beq.n	8003d3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	@ 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	71fb      	strb	r3, [r7, #7]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d123      	bne.n	8003dea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003da2:	88bb      	ldrh	r3, [r7, #4]
 8003da4:	3303      	adds	r3, #3
 8003da6:	089b      	lsrs	r3, r3, #2
 8003da8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e018      	b.n	8003de2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	031a      	lsls	r2, r3, #12
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	3301      	adds	r3, #1
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d3e2      	bcc.n	8003db0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3724      	adds	r7, #36	@ 0x24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b08b      	sub	sp, #44	@ 0x2c
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	e014      	b.n	8003e4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	3301      	adds	r3, #1
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	3301      	adds	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	3301      	adds	r3, #1
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	3301      	adds	r3, #1
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	623b      	str	r3, [r7, #32]
 8003e4e:	6a3a      	ldr	r2, [r7, #32]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d3e6      	bcc.n	8003e24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e56:	8bfb      	ldrh	r3, [r7, #30]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01e      	beq.n	8003e9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e66:	461a      	mov	r2, r3
 8003e68:	f107 0310 	add.w	r3, r7, #16
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	701a      	strb	r2, [r3, #0]
      i++;
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	3301      	adds	r3, #1
 8003e86:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003e8e:	8bfb      	ldrh	r3, [r7, #30]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e94:	8bfb      	ldrh	r3, [r7, #30]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ea      	bne.n	8003e70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	372c      	adds	r7, #44	@ 0x2c
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	785b      	ldrb	r3, [r3, #1]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d12c      	bne.n	8003f1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	db12      	blt.n	8003efc <USB_EPSetStall+0x54>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00f      	beq.n	8003efc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ef6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003efa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	e02b      	b.n	8003f76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db12      	blt.n	8003f56 <USB_EPSetStall+0xae>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00f      	beq.n	8003f56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	0151      	lsls	r1, r2, #5
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	0151      	lsls	r1, r2, #5
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	785b      	ldrb	r3, [r3, #1]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d128      	bne.n	8003ff2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	791b      	ldrb	r3, [r3, #4]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d003      	beq.n	8003fd0 <USB_EPClearStall+0x4c>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	791b      	ldrb	r3, [r3, #4]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d138      	bne.n	8004042 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e027      	b.n	8004042 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800400c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004010:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	791b      	ldrb	r3, [r3, #4]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d003      	beq.n	8004022 <USB_EPClearStall+0x9e>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	791b      	ldrb	r3, [r3, #4]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d10f      	bne.n	8004042 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	440a      	add	r2, r1
 8004038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800403c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004040:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800406e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004072:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004084:	68f9      	ldr	r1, [r7, #12]
 8004086:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ca:	f023 0302 	bic.w	r3, r3, #2
 80040ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040f8:	f023 0303 	bic.w	r3, r3, #3
 80040fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004138:	68fb      	ldr	r3, [r7, #12]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0c1b      	lsrs	r3, r3, #16
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4013      	ands	r3, r2
 800419c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	b29b      	uxth	r3, r3
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4013      	ands	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041dc:	68bb      	ldr	r3, [r7, #8]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b087      	sub	sp, #28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	fa22 f303 	lsr.w	r3, r2, r3
 800421a:	01db      	lsls	r3, r3, #7
 800421c:	b2db      	uxtb	r3, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4013      	ands	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004238:	68bb      	ldr	r3, [r7, #8]
}
 800423a:	4618      	mov	r0, r3
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0301 	and.w	r3, r3, #1
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004262:	b480      	push	{r7}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800427c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	460b      	mov	r3, r1
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	333c      	adds	r3, #60	@ 0x3c
 80042be:	3304      	adds	r3, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4a26      	ldr	r2, [pc, #152]	@ (8004360 <USB_EP0_OutStart+0xb8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d90a      	bls.n	80042e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042dc:	d101      	bne.n	80042e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e037      	b.n	8004352 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e8:	461a      	mov	r2, r3
 80042ea:	2300      	movs	r3, #0
 80042ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004310:	f043 0318 	orr.w	r3, r3, #24
 8004314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004324:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004328:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800432a:	7afb      	ldrb	r3, [r7, #11]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10f      	bne.n	8004350 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800434a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800434e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	4f54300a 	.word	0x4f54300a

08004364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3301      	adds	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800437c:	d901      	bls.n	8004382 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e01b      	b.n	80043ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	daf2      	bge.n	8004370 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3301      	adds	r3, #1
 800439e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043a6:	d901      	bls.n	80043ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e006      	b.n	80043ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d0f0      	beq.n	800439a <USB_CoreReset+0x36>

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80043d4:	2010      	movs	r0, #16
 80043d6:	f002 f921 	bl	800661c <USBD_static_malloc>
 80043da:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	32b0      	adds	r2, #176	@ 0xb0
 80043ec:	2100      	movs	r1, #0
 80043ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80043f2:	2302      	movs	r3, #2
 80043f4:	e048      	b.n	8004488 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	32b0      	adds	r2, #176	@ 0xb0
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	32b0      	adds	r2, #176	@ 0xb0
 8004410:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	7c1b      	ldrb	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10d      	bne.n	800443e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004422:	4b1b      	ldr	r3, [pc, #108]	@ (8004490 <USBD_HID_Init+0xc8>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	f003 020f 	and.w	r2, r3, #15
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	3326      	adds	r3, #38	@ 0x26
 8004438:	2207      	movs	r2, #7
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	e00c      	b.n	8004458 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800443e:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <USBD_HID_Init+0xc8>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3326      	adds	r3, #38	@ 0x26
 8004454:	220a      	movs	r2, #10
 8004456:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004458:	4b0d      	ldr	r3, [pc, #52]	@ (8004490 <USBD_HID_Init+0xc8>)
 800445a:	7819      	ldrb	r1, [r3, #0]
 800445c:	2304      	movs	r3, #4
 800445e:	2203      	movs	r2, #3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f001 ffca 	bl	80063fa <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <USBD_HID_Init+0xc8>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	f003 020f 	and.w	r2, r3, #15
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3324      	adds	r3, #36	@ 0x24
 800447c:	2201      	movs	r2, #1
 800447e:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	200000a7 	.word	0x200000a7

08004494 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80044a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004520 <USBD_HID_DeInit+0x8c>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	4619      	mov	r1, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f001 ffcd 	bl	8006446 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80044ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004520 <USBD_HID_DeInit+0x8c>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3324      	adds	r3, #36	@ 0x24
 80044c2:	2200      	movs	r2, #0
 80044c4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80044c6:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <USBD_HID_DeInit+0x8c>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	f003 020f 	and.w	r2, r3, #15
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	3326      	adds	r3, #38	@ 0x26
 80044dc:	2200      	movs	r2, #0
 80044de:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	32b0      	adds	r2, #176	@ 0xb0
 80044ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d011      	beq.n	8004516 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	32b0      	adds	r2, #176	@ 0xb0
 80044fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004500:	4618      	mov	r0, r3
 8004502:	f002 f899 	bl	8006638 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	32b0      	adds	r2, #176	@ 0xb0
 8004510:	2100      	movs	r1, #0
 8004512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200000a7 	.word	0x200000a7

08004524 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	32b0      	adds	r2, #176	@ 0xb0
 8004538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800454c:	2303      	movs	r3, #3
 800454e:	e0e8      	b.n	8004722 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004558:	2b00      	cmp	r3, #0
 800455a:	d046      	beq.n	80045ea <USBD_HID_Setup+0xc6>
 800455c:	2b20      	cmp	r3, #32
 800455e:	f040 80d8 	bne.w	8004712 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	785b      	ldrb	r3, [r3, #1]
 8004566:	3b02      	subs	r3, #2
 8004568:	2b09      	cmp	r3, #9
 800456a:	d836      	bhi.n	80045da <USBD_HID_Setup+0xb6>
 800456c:	a201      	add	r2, pc, #4	@ (adr r2, 8004574 <USBD_HID_Setup+0x50>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	080045cb 	.word	0x080045cb
 8004578:	080045ab 	.word	0x080045ab
 800457c:	080045db 	.word	0x080045db
 8004580:	080045db 	.word	0x080045db
 8004584:	080045db 	.word	0x080045db
 8004588:	080045db 	.word	0x080045db
 800458c:	080045db 	.word	0x080045db
 8004590:	080045db 	.word	0x080045db
 8004594:	080045b9 	.word	0x080045b9
 8004598:	0800459d 	.word	0x0800459d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	885b      	ldrh	r3, [r3, #2]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]
          break;
 80045a8:	e01e      	b.n	80045e8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f001 fbe5 	bl	8005d80 <USBD_CtlSendData>
          break;
 80045b6:	e017      	b.n	80045e8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	885b      	ldrh	r3, [r3, #2]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	b29b      	uxth	r3, r3
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	605a      	str	r2, [r3, #4]
          break;
 80045c8:	e00e      	b.n	80045e8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3304      	adds	r3, #4
 80045ce:	2201      	movs	r2, #1
 80045d0:	4619      	mov	r1, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f001 fbd4 	bl	8005d80 <USBD_CtlSendData>
          break;
 80045d8:	e006      	b.n	80045e8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 fb52 	bl	8005c86 <USBD_CtlError>
          ret = USBD_FAIL;
 80045e2:	2303      	movs	r3, #3
 80045e4:	75fb      	strb	r3, [r7, #23]
          break;
 80045e6:	bf00      	nop
      }
      break;
 80045e8:	e09a      	b.n	8004720 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	2b0b      	cmp	r3, #11
 80045f0:	f200 8086 	bhi.w	8004700 <USBD_HID_Setup+0x1dc>
 80045f4:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <USBD_HID_Setup+0xd8>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	0800462d 	.word	0x0800462d
 8004600:	0800470f 	.word	0x0800470f
 8004604:	08004701 	.word	0x08004701
 8004608:	08004701 	.word	0x08004701
 800460c:	08004701 	.word	0x08004701
 8004610:	08004701 	.word	0x08004701
 8004614:	08004657 	.word	0x08004657
 8004618:	08004701 	.word	0x08004701
 800461c:	08004701 	.word	0x08004701
 8004620:	08004701 	.word	0x08004701
 8004624:	080046af 	.word	0x080046af
 8004628:	080046d9 	.word	0x080046d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b03      	cmp	r3, #3
 8004636:	d107      	bne.n	8004648 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004638:	f107 030a 	add.w	r3, r7, #10
 800463c:	2202      	movs	r2, #2
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 fb9d 	bl	8005d80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004646:	e063      	b.n	8004710 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004648:	6839      	ldr	r1, [r7, #0]
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f001 fb1b 	bl	8005c86 <USBD_CtlError>
            ret = USBD_FAIL;
 8004650:	2303      	movs	r3, #3
 8004652:	75fb      	strb	r3, [r7, #23]
          break;
 8004654:	e05c      	b.n	8004710 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	885b      	ldrh	r3, [r3, #2]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b22      	cmp	r3, #34	@ 0x22
 8004660:	d108      	bne.n	8004674 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	88db      	ldrh	r3, [r3, #6]
 8004666:	2b23      	cmp	r3, #35	@ 0x23
 8004668:	bf28      	it	cs
 800466a:	2323      	movcs	r3, #35	@ 0x23
 800466c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800466e:	4b2f      	ldr	r3, [pc, #188]	@ (800472c <USBD_HID_Setup+0x208>)
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	e015      	b.n	80046a0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	885b      	ldrh	r3, [r3, #2]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b21      	cmp	r3, #33	@ 0x21
 800467e:	d108      	bne.n	8004692 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8004680:	4b2b      	ldr	r3, [pc, #172]	@ (8004730 <USBD_HID_Setup+0x20c>)
 8004682:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	88db      	ldrh	r3, [r3, #6]
 8004688:	2b09      	cmp	r3, #9
 800468a:	bf28      	it	cs
 800468c:	2309      	movcs	r3, #9
 800468e:	82bb      	strh	r3, [r7, #20]
 8004690:	e006      	b.n	80046a0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f001 faf6 	bl	8005c86 <USBD_CtlError>
            ret = USBD_FAIL;
 800469a:	2303      	movs	r3, #3
 800469c:	75fb      	strb	r3, [r7, #23]
            break;
 800469e:	e037      	b.n	8004710 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80046a0:	8abb      	ldrh	r3, [r7, #20]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6939      	ldr	r1, [r7, #16]
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f001 fb6a 	bl	8005d80 <USBD_CtlSendData>
          break;
 80046ac:	e030      	b.n	8004710 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d107      	bne.n	80046ca <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3308      	adds	r3, #8
 80046be:	2201      	movs	r2, #1
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 fb5c 	bl	8005d80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046c8:	e022      	b.n	8004710 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80046ca:	6839      	ldr	r1, [r7, #0]
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f001 fada 	bl	8005c86 <USBD_CtlError>
            ret = USBD_FAIL;
 80046d2:	2303      	movs	r3, #3
 80046d4:	75fb      	strb	r3, [r7, #23]
          break;
 80046d6:	e01b      	b.n	8004710 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d106      	bne.n	80046f2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	885b      	ldrh	r3, [r3, #2]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046f0:	e00e      	b.n	8004710 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f001 fac6 	bl	8005c86 <USBD_CtlError>
            ret = USBD_FAIL;
 80046fa:	2303      	movs	r3, #3
 80046fc:	75fb      	strb	r3, [r7, #23]
          break;
 80046fe:	e007      	b.n	8004710 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 fabf 	bl	8005c86 <USBD_CtlError>
          ret = USBD_FAIL;
 8004708:	2303      	movs	r3, #3
 800470a:	75fb      	strb	r3, [r7, #23]
          break;
 800470c:	e000      	b.n	8004710 <USBD_HID_Setup+0x1ec>
          break;
 800470e:	bf00      	nop
      }
      break;
 8004710:	e006      	b.n	8004720 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8004712:	6839      	ldr	r1, [r7, #0]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f001 fab6 	bl	8005c86 <USBD_CtlError>
      ret = USBD_FAIL;
 800471a:	2303      	movs	r3, #3
 800471c:	75fb      	strb	r3, [r7, #23]
      break;
 800471e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000084 	.word	0x20000084
 8004730:	2000006c 	.word	0x2000006c

08004734 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	32b0      	adds	r2, #176	@ 0xb0
 800474c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004750:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004758:	2303      	movs	r3, #3
 800475a:	e014      	b.n	8004786 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b03      	cmp	r3, #3
 8004766:	d10d      	bne.n	8004784 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	7b1b      	ldrb	r3, [r3, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2201      	movs	r2, #1
 8004774:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8004776:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <USBD_HID_SendReport+0x5c>)
 8004778:	7819      	ldrb	r1, [r3, #0]
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f001 ff09 	bl	8006596 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	200000a7 	.word	0x200000a7

08004794 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800479c:	2181      	movs	r1, #129	@ 0x81
 800479e:	4809      	ldr	r0, [pc, #36]	@ (80047c4 <USBD_HID_GetFSCfgDesc+0x30>)
 80047a0:	f000 fc3b 	bl	800501a <USBD_GetEpDesc>
 80047a4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	220a      	movs	r2, #10
 80047b0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2222      	movs	r2, #34	@ 0x22
 80047b6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80047b8:	4b02      	ldr	r3, [pc, #8]	@ (80047c4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000048 	.word	0x20000048

080047c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80047d0:	2181      	movs	r1, #129	@ 0x81
 80047d2:	4809      	ldr	r0, [pc, #36]	@ (80047f8 <USBD_HID_GetHSCfgDesc+0x30>)
 80047d4:	f000 fc21 	bl	800501a <USBD_GetEpDesc>
 80047d8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2207      	movs	r2, #7
 80047e4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2222      	movs	r2, #34	@ 0x22
 80047ea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80047ec:	4b02      	ldr	r3, [pc, #8]	@ (80047f8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000048 	.word	0x20000048

080047fc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004804:	2181      	movs	r1, #129	@ 0x81
 8004806:	4809      	ldr	r0, [pc, #36]	@ (800482c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8004808:	f000 fc07 	bl	800501a <USBD_GetEpDesc>
 800480c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	220a      	movs	r2, #10
 8004818:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2222      	movs	r2, #34	@ 0x22
 800481e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004820:	4b02      	ldr	r3, [pc, #8]	@ (800482c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000048 	.word	0x20000048

08004830 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	32b0      	adds	r2, #176	@ 0xb0
 8004846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484a:	2200      	movs	r2, #0
 800484c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	220a      	movs	r2, #10
 8004868:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800486a:	4b03      	ldr	r3, [pc, #12]	@ (8004878 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	20000078 	.word	0x20000078

0800487c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	4613      	mov	r3, r2
 8004888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004890:	2303      	movs	r3, #3
 8004892:	e01f      	b.n	80048d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	79fa      	ldrb	r2, [r7, #7]
 80048c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f001 fd2f 	bl	800632c <USBD_LL_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e025      	b.n	8004940 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	32ae      	adds	r2, #174	@ 0xae
 8004906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00f      	beq.n	8004930 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	32ae      	adds	r2, #174	@ 0xae
 800491a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	f107 020e 	add.w	r2, r7, #14
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
 8004928:	4602      	mov	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f001 fd37 	bl	80063c4 <USBD_LL_Start>
 8004956:	4603      	mov	r3, r0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004968:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	4611      	mov	r1, r2
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
 80049a0:	4603      	mov	r3, r0
 80049a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	4611      	mov	r1, r2
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80049d4:	2303      	movs	r3, #3
 80049d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 f90c 	bl	8005c12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d01a      	beq.n	8004a54 <USBD_LL_SetupStage+0x72>
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d822      	bhi.n	8004a68 <USBD_LL_SetupStage+0x86>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <USBD_LL_SetupStage+0x4a>
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d00a      	beq.n	8004a40 <USBD_LL_SetupStage+0x5e>
 8004a2a:	e01d      	b.n	8004a68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fb63 	bl	8005100 <USBD_StdDevReq>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a3e:	e020      	b.n	8004a82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fbcb 	bl	80051e4 <USBD_StdItfReq>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]
      break;
 8004a52:	e016      	b.n	8004a82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fc2d 	bl	80052bc <USBD_StdEPReq>
 8004a62:	4603      	mov	r3, r0
 8004a64:	73fb      	strb	r3, [r7, #15]
      break;
 8004a66:	e00c      	b.n	8004a82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f001 fd04 	bl	8006484 <USBD_LL_StallEP>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a80:	bf00      	nop
  }

  return ret;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	460b      	mov	r3, r1
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d16e      	bne.n	8004b82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004aaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	f040 8098 	bne.w	8004be8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d913      	bls.n	8004aec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	1ad2      	subs	r2, r2, r3
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4293      	cmp	r3, r2
 8004adc:	bf28      	it	cs
 8004ade:	4613      	movcs	r3, r2
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f001 f977 	bl	8005dd8 <USBD_CtlContinueRx>
 8004aea:	e07d      	b.n	8004be8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d014      	beq.n	8004b24 <USBD_LL_DataOutStage+0x98>
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d81d      	bhi.n	8004b3a <USBD_LL_DataOutStage+0xae>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <USBD_LL_DataOutStage+0x7c>
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d003      	beq.n	8004b0e <USBD_LL_DataOutStage+0x82>
 8004b06:	e018      	b.n	8004b3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	75bb      	strb	r3, [r7, #22]
            break;
 8004b0c:	e018      	b.n	8004b40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	4619      	mov	r1, r3
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fa64 	bl	8004fe6 <USBD_CoreFindIF>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75bb      	strb	r3, [r7, #22]
            break;
 8004b22:	e00d      	b.n	8004b40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fa66 	bl	8005000 <USBD_CoreFindEP>
 8004b34:	4603      	mov	r3, r0
 8004b36:	75bb      	strb	r3, [r7, #22]
            break;
 8004b38:	e002      	b.n	8004b40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75bb      	strb	r3, [r7, #22]
            break;
 8004b3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004b40:	7dbb      	ldrb	r3, [r7, #22]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d119      	bne.n	8004b7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d113      	bne.n	8004b7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004b52:	7dba      	ldrb	r2, [r7, #22]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	32ae      	adds	r2, #174	@ 0xae
 8004b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004b62:	7dba      	ldrb	r2, [r7, #22]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004b6a:	7dba      	ldrb	r2, [r7, #22]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	32ae      	adds	r2, #174	@ 0xae
 8004b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f001 f93d 	bl	8005dfa <USBD_CtlSendStatus>
 8004b80:	e032      	b.n	8004be8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004b82:	7afb      	ldrb	r3, [r7, #11]
 8004b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fa37 	bl	8005000 <USBD_CoreFindEP>
 8004b92:	4603      	mov	r3, r0
 8004b94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004b96:	7dbb      	ldrb	r3, [r7, #22]
 8004b98:	2bff      	cmp	r3, #255	@ 0xff
 8004b9a:	d025      	beq.n	8004be8 <USBD_LL_DataOutStage+0x15c>
 8004b9c:	7dbb      	ldrb	r3, [r7, #22]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d122      	bne.n	8004be8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d117      	bne.n	8004bde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004bae:	7dba      	ldrb	r2, [r7, #22]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	32ae      	adds	r2, #174	@ 0xae
 8004bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00f      	beq.n	8004bde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004bbe:	7dba      	ldrb	r2, [r7, #22]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004bc6:	7dba      	ldrb	r2, [r7, #22]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	32ae      	adds	r2, #174	@ 0xae
 8004bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	7afa      	ldrb	r2, [r7, #11]
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	4798      	blx	r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	e000      	b.n	8004bea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b086      	sub	sp, #24
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004c00:	7afb      	ldrb	r3, [r7, #11]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d16f      	bne.n	8004ce6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3314      	adds	r3, #20
 8004c0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d15a      	bne.n	8004ccc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d914      	bls.n	8004c4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f001 f8bc 	bl	8005db6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2200      	movs	r2, #0
 8004c42:	2100      	movs	r1, #0
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f001 fcc7 	bl	80065d8 <USBD_LL_PrepareReceive>
 8004c4a:	e03f      	b.n	8004ccc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d11c      	bne.n	8004c92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d316      	bcc.n	8004c92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d20f      	bcs.n	8004c92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004c72:	2200      	movs	r2, #0
 8004c74:	2100      	movs	r1, #0
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f001 f89d 	bl	8005db6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c84:	2300      	movs	r3, #0
 8004c86:	2200      	movs	r2, #0
 8004c88:	2100      	movs	r1, #0
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f001 fca4 	bl	80065d8 <USBD_LL_PrepareReceive>
 8004c90:	e01c      	b.n	8004ccc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d10f      	bne.n	8004cbe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cbe:	2180      	movs	r1, #128	@ 0x80
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f001 fbdf 	bl	8006484 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f001 f8aa 	bl	8005e20 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d03a      	beq.n	8004d4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff fe42 	bl	8004960 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004ce4:	e032      	b.n	8004d4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004ce6:	7afb      	ldrb	r3, [r7, #11]
 8004ce8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	4619      	mov	r1, r3
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f985 	bl	8005000 <USBD_CoreFindEP>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
 8004cfc:	2bff      	cmp	r3, #255	@ 0xff
 8004cfe:	d025      	beq.n	8004d4c <USBD_LL_DataInStage+0x15a>
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d122      	bne.n	8004d4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d11c      	bne.n	8004d4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004d12:	7dfa      	ldrb	r2, [r7, #23]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	32ae      	adds	r2, #174	@ 0xae
 8004d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d014      	beq.n	8004d4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004d22:	7dfa      	ldrb	r2, [r7, #23]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004d2a:	7dfa      	ldrb	r2, [r7, #23]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	32ae      	adds	r2, #174	@ 0xae
 8004d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	7afa      	ldrb	r2, [r7, #11]
 8004d38:	4611      	mov	r1, r2
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	4798      	blx	r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004d42:	7dbb      	ldrb	r3, [r7, #22]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004d48:	7dbb      	ldrb	r3, [r7, #22]
 8004d4a:	e000      	b.n	8004d4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d014      	beq.n	8004dbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00e      	beq.n	8004dbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6852      	ldr	r2, [r2, #4]
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	4611      	mov	r1, r2
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004db8:	2303      	movs	r3, #3
 8004dba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dbc:	2340      	movs	r3, #64	@ 0x40
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f001 fb19 	bl	80063fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2240      	movs	r2, #64	@ 0x40
 8004dd4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dd8:	2340      	movs	r3, #64	@ 0x40
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2180      	movs	r1, #128	@ 0x80
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 fb0b 	bl	80063fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2240      	movs	r2, #64	@ 0x40
 8004dee:	621a      	str	r2, [r3, #32]

  return ret;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d006      	beq.n	8004e3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d106      	bne.n	8004e74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d110      	bne.n	8004eb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	32ae      	adds	r2, #174	@ 0xae
 8004ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e01c      	b.n	8004f1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d115      	bne.n	8004f1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	32ae      	adds	r2, #174	@ 0xae
 8004efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00b      	beq.n	8004f1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	32ae      	adds	r2, #174	@ 0xae
 8004f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	4611      	mov	r1, r2
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	32ae      	adds	r2, #174	@ 0xae
 8004f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e01c      	b.n	8004f82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d115      	bne.n	8004f80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	32ae      	adds	r2, #174	@ 0xae
 8004f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00b      	beq.n	8004f80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	32ae      	adds	r2, #174	@ 0xae
 8004f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	78fa      	ldrb	r2, [r7, #3]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6852      	ldr	r2, [r2, #4]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	4611      	mov	r1, r2
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004ff2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800500c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	885b      	ldrh	r3, [r3, #2]
 8005036:	b29b      	uxth	r3, r3
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	7812      	ldrb	r2, [r2, #0]
 800503c:	4293      	cmp	r3, r2
 800503e:	d91f      	bls.n	8005080 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005046:	e013      	b.n	8005070 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005048:	f107 030a 	add.w	r3, r7, #10
 800504c:	4619      	mov	r1, r3
 800504e:	6978      	ldr	r0, [r7, #20]
 8005050:	f000 f81b 	bl	800508a <USBD_GetNextDesc>
 8005054:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	2b05      	cmp	r3, #5
 800505c:	d108      	bne.n	8005070 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	789b      	ldrb	r3, [r3, #2]
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	429a      	cmp	r2, r3
 800506a:	d008      	beq.n	800507e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	885b      	ldrh	r3, [r3, #2]
 8005074:	b29a      	uxth	r2, r3
 8005076:	897b      	ldrh	r3, [r7, #10]
 8005078:	429a      	cmp	r2, r3
 800507a:	d8e5      	bhi.n	8005048 <USBD_GetEpDesc+0x2e>
 800507c:	e000      	b.n	8005080 <USBD_GetEpDesc+0x66>
          break;
 800507e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005080:	693b      	ldr	r3, [r7, #16]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	7812      	ldrb	r2, [r2, #0]
 80050a0:	4413      	add	r3, r2
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4413      	add	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80050b4:	68fb      	ldr	r3, [r7, #12]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b087      	sub	sp, #28
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3301      	adds	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80050e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	b21a      	sxth	r2, r3
 80050e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b21b      	sxth	r3, r3
 80050f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80050f2:	89fb      	ldrh	r3, [r7, #14]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005116:	2b40      	cmp	r3, #64	@ 0x40
 8005118:	d005      	beq.n	8005126 <USBD_StdDevReq+0x26>
 800511a:	2b40      	cmp	r3, #64	@ 0x40
 800511c:	d857      	bhi.n	80051ce <USBD_StdDevReq+0xce>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00f      	beq.n	8005142 <USBD_StdDevReq+0x42>
 8005122:	2b20      	cmp	r3, #32
 8005124:	d153      	bne.n	80051ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	32ae      	adds	r2, #174	@ 0xae
 8005130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	6839      	ldr	r1, [r7, #0]
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
 800513c:	4603      	mov	r3, r0
 800513e:	73fb      	strb	r3, [r7, #15]
      break;
 8005140:	e04a      	b.n	80051d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	2b09      	cmp	r3, #9
 8005148:	d83b      	bhi.n	80051c2 <USBD_StdDevReq+0xc2>
 800514a:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <USBD_StdDevReq+0x50>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	080051a5 	.word	0x080051a5
 8005154:	080051b9 	.word	0x080051b9
 8005158:	080051c3 	.word	0x080051c3
 800515c:	080051af 	.word	0x080051af
 8005160:	080051c3 	.word	0x080051c3
 8005164:	08005183 	.word	0x08005183
 8005168:	08005179 	.word	0x08005179
 800516c:	080051c3 	.word	0x080051c3
 8005170:	0800519b 	.word	0x0800519b
 8005174:	0800518d 	.word	0x0800518d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa3c 	bl	80055f8 <USBD_GetDescriptor>
          break;
 8005180:	e024      	b.n	80051cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fba1 	bl	80058cc <USBD_SetAddress>
          break;
 800518a:	e01f      	b.n	80051cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fbe0 	bl	8005954 <USBD_SetConfig>
 8005194:	4603      	mov	r3, r0
 8005196:	73fb      	strb	r3, [r7, #15]
          break;
 8005198:	e018      	b.n	80051cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800519a:	6839      	ldr	r1, [r7, #0]
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fc83 	bl	8005aa8 <USBD_GetConfig>
          break;
 80051a2:	e013      	b.n	80051cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fcb4 	bl	8005b14 <USBD_GetStatus>
          break;
 80051ac:	e00e      	b.n	80051cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fce3 	bl	8005b7c <USBD_SetFeature>
          break;
 80051b6:	e009      	b.n	80051cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fd07 	bl	8005bce <USBD_ClrFeature>
          break;
 80051c0:	e004      	b.n	80051cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fd5e 	bl	8005c86 <USBD_CtlError>
          break;
 80051ca:	bf00      	nop
      }
      break;
 80051cc:	e004      	b.n	80051d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fd58 	bl	8005c86 <USBD_CtlError>
      break;
 80051d6:	bf00      	nop
  }

  return ret;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop

080051e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80051fa:	2b40      	cmp	r3, #64	@ 0x40
 80051fc:	d005      	beq.n	800520a <USBD_StdItfReq+0x26>
 80051fe:	2b40      	cmp	r3, #64	@ 0x40
 8005200:	d852      	bhi.n	80052a8 <USBD_StdItfReq+0xc4>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <USBD_StdItfReq+0x26>
 8005206:	2b20      	cmp	r3, #32
 8005208:	d14e      	bne.n	80052a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005210:	b2db      	uxtb	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	2b02      	cmp	r3, #2
 8005216:	d840      	bhi.n	800529a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	889b      	ldrh	r3, [r3, #4]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d836      	bhi.n	8005290 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	889b      	ldrh	r3, [r3, #4]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff fedb 	bl	8004fe6 <USBD_CoreFindIF>
 8005230:	4603      	mov	r3, r0
 8005232:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005234:	7bbb      	ldrb	r3, [r7, #14]
 8005236:	2bff      	cmp	r3, #255	@ 0xff
 8005238:	d01d      	beq.n	8005276 <USBD_StdItfReq+0x92>
 800523a:	7bbb      	ldrb	r3, [r7, #14]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d11a      	bne.n	8005276 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005240:	7bba      	ldrb	r2, [r7, #14]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	32ae      	adds	r2, #174	@ 0xae
 8005246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00f      	beq.n	8005270 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005250:	7bba      	ldrb	r2, [r7, #14]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005258:	7bba      	ldrb	r2, [r7, #14]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	32ae      	adds	r2, #174	@ 0xae
 800525e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800526e:	e004      	b.n	800527a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005270:	2303      	movs	r3, #3
 8005272:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005274:	e001      	b.n	800527a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005276:	2303      	movs	r3, #3
 8005278:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	88db      	ldrh	r3, [r3, #6]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d110      	bne.n	80052a4 <USBD_StdItfReq+0xc0>
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10d      	bne.n	80052a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fdb6 	bl	8005dfa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800528e:	e009      	b.n	80052a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005290:	6839      	ldr	r1, [r7, #0]
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fcf7 	bl	8005c86 <USBD_CtlError>
          break;
 8005298:	e004      	b.n	80052a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fcf2 	bl	8005c86 <USBD_CtlError>
          break;
 80052a2:	e000      	b.n	80052a6 <USBD_StdItfReq+0xc2>
          break;
 80052a4:	bf00      	nop
      }
      break;
 80052a6:	e004      	b.n	80052b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80052a8:	6839      	ldr	r1, [r7, #0]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fceb 	bl	8005c86 <USBD_CtlError>
      break;
 80052b0:	bf00      	nop
  }

  return ret;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	889b      	ldrh	r3, [r3, #4]
 80052ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80052d8:	2b40      	cmp	r3, #64	@ 0x40
 80052da:	d007      	beq.n	80052ec <USBD_StdEPReq+0x30>
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	f200 817f 	bhi.w	80055e0 <USBD_StdEPReq+0x324>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02a      	beq.n	800533c <USBD_StdEPReq+0x80>
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	f040 817a 	bne.w	80055e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fe85 	bl	8005000 <USBD_CoreFindEP>
 80052f6:	4603      	mov	r3, r0
 80052f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052fa:	7b7b      	ldrb	r3, [r7, #13]
 80052fc:	2bff      	cmp	r3, #255	@ 0xff
 80052fe:	f000 8174 	beq.w	80055ea <USBD_StdEPReq+0x32e>
 8005302:	7b7b      	ldrb	r3, [r7, #13]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f040 8170 	bne.w	80055ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800530a:	7b7a      	ldrb	r2, [r7, #13]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005312:	7b7a      	ldrb	r2, [r7, #13]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	32ae      	adds	r2, #174	@ 0xae
 8005318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8163 	beq.w	80055ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005324:	7b7a      	ldrb	r2, [r7, #13]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	32ae      	adds	r2, #174	@ 0xae
 800532a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
 8005336:	4603      	mov	r3, r0
 8005338:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800533a:	e156      	b.n	80055ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d008      	beq.n	8005356 <USBD_StdEPReq+0x9a>
 8005344:	2b03      	cmp	r3, #3
 8005346:	f300 8145 	bgt.w	80055d4 <USBD_StdEPReq+0x318>
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 809b 	beq.w	8005486 <USBD_StdEPReq+0x1ca>
 8005350:	2b01      	cmp	r3, #1
 8005352:	d03c      	beq.n	80053ce <USBD_StdEPReq+0x112>
 8005354:	e13e      	b.n	80055d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d002      	beq.n	8005368 <USBD_StdEPReq+0xac>
 8005362:	2b03      	cmp	r3, #3
 8005364:	d016      	beq.n	8005394 <USBD_StdEPReq+0xd8>
 8005366:	e02c      	b.n	80053c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <USBD_StdEPReq+0xce>
 800536e:	7bbb      	ldrb	r3, [r7, #14]
 8005370:	2b80      	cmp	r3, #128	@ 0x80
 8005372:	d00a      	beq.n	800538a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005374:	7bbb      	ldrb	r3, [r7, #14]
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 f883 	bl	8006484 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800537e:	2180      	movs	r1, #128	@ 0x80
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f001 f87f 	bl	8006484 <USBD_LL_StallEP>
 8005386:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005388:	e020      	b.n	80053cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800538a:	6839      	ldr	r1, [r7, #0]
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fc7a 	bl	8005c86 <USBD_CtlError>
              break;
 8005392:	e01b      	b.n	80053cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	885b      	ldrh	r3, [r3, #2]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10e      	bne.n	80053ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <USBD_StdEPReq+0xfe>
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	2b80      	cmp	r3, #128	@ 0x80
 80053a6:	d008      	beq.n	80053ba <USBD_StdEPReq+0xfe>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	88db      	ldrh	r3, [r3, #6]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80053b0:	7bbb      	ldrb	r3, [r7, #14]
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f001 f865 	bl	8006484 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fd1d 	bl	8005dfa <USBD_CtlSendStatus>

              break;
 80053c0:	e004      	b.n	80053cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fc5e 	bl	8005c86 <USBD_CtlError>
              break;
 80053ca:	bf00      	nop
          }
          break;
 80053cc:	e107      	b.n	80055de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d002      	beq.n	80053e0 <USBD_StdEPReq+0x124>
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d016      	beq.n	800540c <USBD_StdEPReq+0x150>
 80053de:	e04b      	b.n	8005478 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053e0:	7bbb      	ldrb	r3, [r7, #14]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <USBD_StdEPReq+0x146>
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	2b80      	cmp	r3, #128	@ 0x80
 80053ea:	d00a      	beq.n	8005402 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053ec:	7bbb      	ldrb	r3, [r7, #14]
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 f847 	bl	8006484 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80053f6:	2180      	movs	r1, #128	@ 0x80
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 f843 	bl	8006484 <USBD_LL_StallEP>
 80053fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005400:	e040      	b.n	8005484 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fc3e 	bl	8005c86 <USBD_CtlError>
              break;
 800540a:	e03b      	b.n	8005484 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	885b      	ldrh	r3, [r3, #2]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d136      	bne.n	8005482 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005414:	7bbb      	ldrb	r3, [r7, #14]
 8005416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800541e:	7bbb      	ldrb	r3, [r7, #14]
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f001 f84d 	bl	80064c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fce6 	bl	8005dfa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800542e:	7bbb      	ldrb	r3, [r7, #14]
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff fde4 	bl	8005000 <USBD_CoreFindEP>
 8005438:	4603      	mov	r3, r0
 800543a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800543c:	7b7b      	ldrb	r3, [r7, #13]
 800543e:	2bff      	cmp	r3, #255	@ 0xff
 8005440:	d01f      	beq.n	8005482 <USBD_StdEPReq+0x1c6>
 8005442:	7b7b      	ldrb	r3, [r7, #13]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11c      	bne.n	8005482 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005448:	7b7a      	ldrb	r2, [r7, #13]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005450:	7b7a      	ldrb	r2, [r7, #13]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	32ae      	adds	r2, #174	@ 0xae
 8005456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d010      	beq.n	8005482 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005460:	7b7a      	ldrb	r2, [r7, #13]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	32ae      	adds	r2, #174	@ 0xae
 8005466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	4798      	blx	r3
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005476:	e004      	b.n	8005482 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fc03 	bl	8005c86 <USBD_CtlError>
              break;
 8005480:	e000      	b.n	8005484 <USBD_StdEPReq+0x1c8>
              break;
 8005482:	bf00      	nop
          }
          break;
 8005484:	e0ab      	b.n	80055de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d002      	beq.n	8005498 <USBD_StdEPReq+0x1dc>
 8005492:	2b03      	cmp	r3, #3
 8005494:	d032      	beq.n	80054fc <USBD_StdEPReq+0x240>
 8005496:	e097      	b.n	80055c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <USBD_StdEPReq+0x1f2>
 800549e:	7bbb      	ldrb	r3, [r7, #14]
 80054a0:	2b80      	cmp	r3, #128	@ 0x80
 80054a2:	d004      	beq.n	80054ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fbed 	bl	8005c86 <USBD_CtlError>
                break;
 80054ac:	e091      	b.n	80055d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	da0b      	bge.n	80054ce <USBD_StdEPReq+0x212>
 80054b6:	7bbb      	ldrb	r3, [r7, #14]
 80054b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	3310      	adds	r3, #16
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	4413      	add	r3, r2
 80054ca:	3304      	adds	r3, #4
 80054cc:	e00b      	b.n	80054e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054ce:	7bbb      	ldrb	r3, [r7, #14]
 80054d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4413      	add	r3, r2
 80054e4:	3304      	adds	r3, #4
 80054e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2202      	movs	r2, #2
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fc43 	bl	8005d80 <USBD_CtlSendData>
              break;
 80054fa:	e06a      	b.n	80055d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80054fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005500:	2b00      	cmp	r3, #0
 8005502:	da11      	bge.n	8005528 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005504:	7bbb      	ldrb	r3, [r7, #14]
 8005506:	f003 020f 	and.w	r2, r3, #15
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	440b      	add	r3, r1
 8005516:	3324      	adds	r3, #36	@ 0x24
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d117      	bne.n	800554e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fbb0 	bl	8005c86 <USBD_CtlError>
                  break;
 8005526:	e054      	b.n	80055d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	f003 020f 	and.w	r2, r3, #15
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fb9d 	bl	8005c86 <USBD_CtlError>
                  break;
 800554c:	e041      	b.n	80055d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800554e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005552:	2b00      	cmp	r3, #0
 8005554:	da0b      	bge.n	800556e <USBD_StdEPReq+0x2b2>
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	3310      	adds	r3, #16
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	4413      	add	r3, r2
 800556a:	3304      	adds	r3, #4
 800556c:	e00b      	b.n	8005586 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800556e:	7bbb      	ldrb	r3, [r7, #14]
 8005570:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4413      	add	r3, r2
 8005584:	3304      	adds	r3, #4
 8005586:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005588:	7bbb      	ldrb	r3, [r7, #14]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <USBD_StdEPReq+0x2d8>
 800558e:	7bbb      	ldrb	r3, [r7, #14]
 8005590:	2b80      	cmp	r3, #128	@ 0x80
 8005592:	d103      	bne.n	800559c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e00e      	b.n	80055ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800559c:	7bbb      	ldrb	r3, [r7, #14]
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 ffad 	bl	8006500 <USBD_LL_IsStallEP>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e002      	b.n	80055ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2202      	movs	r2, #2
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fbdd 	bl	8005d80 <USBD_CtlSendData>
              break;
 80055c6:	e004      	b.n	80055d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fb5b 	bl	8005c86 <USBD_CtlError>
              break;
 80055d0:	bf00      	nop
          }
          break;
 80055d2:	e004      	b.n	80055de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fb55 	bl	8005c86 <USBD_CtlError>
          break;
 80055dc:	bf00      	nop
      }
      break;
 80055de:	e005      	b.n	80055ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fb4f 	bl	8005c86 <USBD_CtlError>
      break;
 80055e8:	e000      	b.n	80055ec <USBD_StdEPReq+0x330>
      break;
 80055ea:	bf00      	nop
  }

  return ret;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	885b      	ldrh	r3, [r3, #2]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	2b06      	cmp	r3, #6
 800561a:	f200 8128 	bhi.w	800586e <USBD_GetDescriptor+0x276>
 800561e:	a201      	add	r2, pc, #4	@ (adr r2, 8005624 <USBD_GetDescriptor+0x2c>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005641 	.word	0x08005641
 8005628:	08005659 	.word	0x08005659
 800562c:	08005699 	.word	0x08005699
 8005630:	0800586f 	.word	0x0800586f
 8005634:	0800586f 	.word	0x0800586f
 8005638:	0800580f 	.word	0x0800580f
 800563c:	0800583b 	.word	0x0800583b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	7c12      	ldrb	r2, [r2, #16]
 800564c:	f107 0108 	add.w	r1, r7, #8
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
 8005654:	60f8      	str	r0, [r7, #12]
      break;
 8005656:	e112      	b.n	800587e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	7c1b      	ldrb	r3, [r3, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005668:	f107 0208 	add.w	r2, r7, #8
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
 8005670:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	2202      	movs	r2, #2
 8005678:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800567a:	e100      	b.n	800587e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	f107 0208 	add.w	r2, r7, #8
 8005688:	4610      	mov	r0, r2
 800568a:	4798      	blx	r3
 800568c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	2202      	movs	r2, #2
 8005694:	701a      	strb	r2, [r3, #0]
      break;
 8005696:	e0f2      	b.n	800587e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	885b      	ldrh	r3, [r3, #2]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b05      	cmp	r3, #5
 80056a0:	f200 80ac 	bhi.w	80057fc <USBD_GetDescriptor+0x204>
 80056a4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <USBD_GetDescriptor+0xb4>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056c5 	.word	0x080056c5
 80056b0:	080056f9 	.word	0x080056f9
 80056b4:	0800572d 	.word	0x0800572d
 80056b8:	08005761 	.word	0x08005761
 80056bc:	08005795 	.word	0x08005795
 80056c0:	080057c9 	.word	0x080057c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	7c12      	ldrb	r2, [r2, #16]
 80056dc:	f107 0108 	add.w	r1, r7, #8
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
 80056e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056e6:	e091      	b.n	800580c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 facb 	bl	8005c86 <USBD_CtlError>
            err++;
 80056f0:	7afb      	ldrb	r3, [r7, #11]
 80056f2:	3301      	adds	r3, #1
 80056f4:	72fb      	strb	r3, [r7, #11]
          break;
 80056f6:	e089      	b.n	800580c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	7c12      	ldrb	r2, [r2, #16]
 8005710:	f107 0108 	add.w	r1, r7, #8
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
 8005718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800571a:	e077      	b.n	800580c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fab1 	bl	8005c86 <USBD_CtlError>
            err++;
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	3301      	adds	r3, #1
 8005728:	72fb      	strb	r3, [r7, #11]
          break;
 800572a:	e06f      	b.n	800580c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00b      	beq.n	8005750 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	7c12      	ldrb	r2, [r2, #16]
 8005744:	f107 0108 	add.w	r1, r7, #8
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
 800574c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800574e:	e05d      	b.n	800580c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa97 	bl	8005c86 <USBD_CtlError>
            err++;
 8005758:	7afb      	ldrb	r3, [r7, #11]
 800575a:	3301      	adds	r3, #1
 800575c:	72fb      	strb	r3, [r7, #11]
          break;
 800575e:	e055      	b.n	800580c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	7c12      	ldrb	r2, [r2, #16]
 8005778:	f107 0108 	add.w	r1, r7, #8
 800577c:	4610      	mov	r0, r2
 800577e:	4798      	blx	r3
 8005780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005782:	e043      	b.n	800580c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa7d 	bl	8005c86 <USBD_CtlError>
            err++;
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	3301      	adds	r3, #1
 8005790:	72fb      	strb	r3, [r7, #11]
          break;
 8005792:	e03b      	b.n	800580c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	7c12      	ldrb	r2, [r2, #16]
 80057ac:	f107 0108 	add.w	r1, r7, #8
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
 80057b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057b6:	e029      	b.n	800580c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa63 	bl	8005c86 <USBD_CtlError>
            err++;
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	3301      	adds	r3, #1
 80057c4:	72fb      	strb	r3, [r7, #11]
          break;
 80057c6:	e021      	b.n	800580c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	7c12      	ldrb	r2, [r2, #16]
 80057e0:	f107 0108 	add.w	r1, r7, #8
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
 80057e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057ea:	e00f      	b.n	800580c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa49 	bl	8005c86 <USBD_CtlError>
            err++;
 80057f4:	7afb      	ldrb	r3, [r7, #11]
 80057f6:	3301      	adds	r3, #1
 80057f8:	72fb      	strb	r3, [r7, #11]
          break;
 80057fa:	e007      	b.n	800580c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa41 	bl	8005c86 <USBD_CtlError>
          err++;
 8005804:	7afb      	ldrb	r3, [r7, #11]
 8005806:	3301      	adds	r3, #1
 8005808:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800580a:	bf00      	nop
      }
      break;
 800580c:	e037      	b.n	800587e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	7c1b      	ldrb	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800581c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800581e:	f107 0208 	add.w	r2, r7, #8
 8005822:	4610      	mov	r0, r2
 8005824:	4798      	blx	r3
 8005826:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005828:	e029      	b.n	800587e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fa2a 	bl	8005c86 <USBD_CtlError>
        err++;
 8005832:	7afb      	ldrb	r3, [r7, #11]
 8005834:	3301      	adds	r3, #1
 8005836:	72fb      	strb	r3, [r7, #11]
      break;
 8005838:	e021      	b.n	800587e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7c1b      	ldrb	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10d      	bne.n	800585e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	f107 0208 	add.w	r2, r7, #8
 800584e:	4610      	mov	r0, r2
 8005850:	4798      	blx	r3
 8005852:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	2207      	movs	r2, #7
 800585a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800585c:	e00f      	b.n	800587e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fa10 	bl	8005c86 <USBD_CtlError>
        err++;
 8005866:	7afb      	ldrb	r3, [r7, #11]
 8005868:	3301      	adds	r3, #1
 800586a:	72fb      	strb	r3, [r7, #11]
      break;
 800586c:	e007      	b.n	800587e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fa08 	bl	8005c86 <USBD_CtlError>
      err++;
 8005876:	7afb      	ldrb	r3, [r7, #11]
 8005878:	3301      	adds	r3, #1
 800587a:	72fb      	strb	r3, [r7, #11]
      break;
 800587c:	bf00      	nop
  }

  if (err != 0U)
 800587e:	7afb      	ldrb	r3, [r7, #11]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d11e      	bne.n	80058c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	88db      	ldrh	r3, [r3, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d016      	beq.n	80058ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800588c:	893b      	ldrh	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00e      	beq.n	80058b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	88da      	ldrh	r2, [r3, #6]
 8005896:	893b      	ldrh	r3, [r7, #8]
 8005898:	4293      	cmp	r3, r2
 800589a:	bf28      	it	cs
 800589c:	4613      	movcs	r3, r2
 800589e:	b29b      	uxth	r3, r3
 80058a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058a2:	893b      	ldrh	r3, [r7, #8]
 80058a4:	461a      	mov	r2, r3
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fa69 	bl	8005d80 <USBD_CtlSendData>
 80058ae:	e009      	b.n	80058c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f9e7 	bl	8005c86 <USBD_CtlError>
 80058b8:	e004      	b.n	80058c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fa9d 	bl	8005dfa <USBD_CtlSendStatus>
 80058c0:	e000      	b.n	80058c4 <USBD_GetDescriptor+0x2cc>
    return;
 80058c2:	bf00      	nop
  }
}
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop

080058cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	889b      	ldrh	r3, [r3, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d131      	bne.n	8005942 <USBD_SetAddress+0x76>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	88db      	ldrh	r3, [r3, #6]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d12d      	bne.n	8005942 <USBD_SetAddress+0x76>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ec:	d829      	bhi.n	8005942 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	885b      	ldrh	r3, [r3, #2]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b03      	cmp	r3, #3
 8005904:	d104      	bne.n	8005910 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f9bc 	bl	8005c86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800590e:	e01d      	b.n	800594c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	7bfa      	ldrb	r2, [r7, #15]
 8005914:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fe1b 	bl	8006558 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fa69 	bl	8005dfa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005936:	e009      	b.n	800594c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005940:	e004      	b.n	800594c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f99e 	bl	8005c86 <USBD_CtlError>
  }
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	885b      	ldrh	r3, [r3, #2]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	4b4e      	ldr	r3, [pc, #312]	@ (8005aa4 <USBD_SetConfig+0x150>)
 800596a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800596c:	4b4d      	ldr	r3, [pc, #308]	@ (8005aa4 <USBD_SetConfig+0x150>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d905      	bls.n	8005980 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f985 	bl	8005c86 <USBD_CtlError>
    return USBD_FAIL;
 800597c:	2303      	movs	r3, #3
 800597e:	e08c      	b.n	8005a9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d002      	beq.n	8005992 <USBD_SetConfig+0x3e>
 800598c:	2b03      	cmp	r3, #3
 800598e:	d029      	beq.n	80059e4 <USBD_SetConfig+0x90>
 8005990:	e075      	b.n	8005a7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005992:	4b44      	ldr	r3, [pc, #272]	@ (8005aa4 <USBD_SetConfig+0x150>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d020      	beq.n	80059dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800599a:	4b42      	ldr	r3, [pc, #264]	@ (8005aa4 <USBD_SetConfig+0x150>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059a4:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa4 <USBD_SetConfig+0x150>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fe ffe3 	bl	8004976 <USBD_SetClassConfig>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d008      	beq.n	80059cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f962 	bl	8005c86 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80059ca:	e065      	b.n	8005a98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fa14 	bl	8005dfa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2203      	movs	r2, #3
 80059d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80059da:	e05d      	b.n	8005a98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fa0c 	bl	8005dfa <USBD_CtlSendStatus>
      break;
 80059e2:	e059      	b.n	8005a98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80059e4:	4b2f      	ldr	r3, [pc, #188]	@ (8005aa4 <USBD_SetConfig+0x150>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d112      	bne.n	8005a12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80059f4:	4b2b      	ldr	r3, [pc, #172]	@ (8005aa4 <USBD_SetConfig+0x150>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80059fe:	4b29      	ldr	r3, [pc, #164]	@ (8005aa4 <USBD_SetConfig+0x150>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fe ffd2 	bl	80049ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9f5 	bl	8005dfa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a10:	e042      	b.n	8005a98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005a12:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <USBD_SetConfig+0x150>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d02a      	beq.n	8005a76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fe ffc0 	bl	80049ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa4 <USBD_SetConfig+0x150>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a38:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa4 <USBD_SetConfig+0x150>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fe ff99 	bl	8004976 <USBD_SetClassConfig>
 8005a44:	4603      	mov	r3, r0
 8005a46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00f      	beq.n	8005a6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f918 	bl	8005c86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fe ffa5 	bl	80049ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005a6c:	e014      	b.n	8005a98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9c3 	bl	8005dfa <USBD_CtlSendStatus>
      break;
 8005a74:	e010      	b.n	8005a98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9bf 	bl	8005dfa <USBD_CtlSendStatus>
      break;
 8005a7c:	e00c      	b.n	8005a98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f900 	bl	8005c86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a86:	4b07      	ldr	r3, [pc, #28]	@ (8005aa4 <USBD_SetConfig+0x150>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7fe ff8e 	bl	80049ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005a92:	2303      	movs	r3, #3
 8005a94:	73fb      	strb	r3, [r7, #15]
      break;
 8005a96:	bf00      	nop
  }

  return ret;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000120 	.word	0x20000120

08005aa8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	88db      	ldrh	r3, [r3, #6]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d004      	beq.n	8005ac4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f8e2 	bl	8005c86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ac2:	e023      	b.n	8005b0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	dc02      	bgt.n	8005ad6 <USBD_GetConfig+0x2e>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	dc03      	bgt.n	8005adc <USBD_GetConfig+0x34>
 8005ad4:	e015      	b.n	8005b02 <USBD_GetConfig+0x5a>
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d00b      	beq.n	8005af2 <USBD_GetConfig+0x4a>
 8005ada:	e012      	b.n	8005b02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f948 	bl	8005d80 <USBD_CtlSendData>
        break;
 8005af0:	e00c      	b.n	8005b0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2201      	movs	r2, #1
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f940 	bl	8005d80 <USBD_CtlSendData>
        break;
 8005b00:	e004      	b.n	8005b0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f8be 	bl	8005c86 <USBD_CtlError>
        break;
 8005b0a:	bf00      	nop
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d81e      	bhi.n	8005b6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	88db      	ldrh	r3, [r3, #6]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d004      	beq.n	8005b3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f8a5 	bl	8005c86 <USBD_CtlError>
        break;
 8005b3c:	e01a      	b.n	8005b74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f043 0202 	orr.w	r2, r3, #2
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	2202      	movs	r2, #2
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f90c 	bl	8005d80 <USBD_CtlSendData>
      break;
 8005b68:	e004      	b.n	8005b74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f88a 	bl	8005c86 <USBD_CtlError>
      break;
 8005b72:	bf00      	nop
  }
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	885b      	ldrh	r3, [r3, #2]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f92f 	bl	8005dfa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005b9c:	e013      	b.n	8005bc6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	885b      	ldrh	r3, [r3, #2]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d10b      	bne.n	8005bbe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	889b      	ldrh	r3, [r3, #4]
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f91f 	bl	8005dfa <USBD_CtlSendStatus>
}
 8005bbc:	e003      	b.n	8005bc6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f860 	bl	8005c86 <USBD_CtlError>
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d80b      	bhi.n	8005bfe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	885b      	ldrh	r3, [r3, #2]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d10c      	bne.n	8005c08 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f8ff 	bl	8005dfa <USBD_CtlSendStatus>
      }
      break;
 8005bfc:	e004      	b.n	8005c08 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f840 	bl	8005c86 <USBD_CtlError>
      break;
 8005c06:	e000      	b.n	8005c0a <USBD_ClrFeature+0x3c>
      break;
 8005c08:	bf00      	nop
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	781a      	ldrb	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	781a      	ldrb	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7ff fa40 	bl	80050c2 <SWAPBYTE>
 8005c42:	4603      	mov	r3, r0
 8005c44:	461a      	mov	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3301      	adds	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fa33 	bl	80050c2 <SWAPBYTE>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	461a      	mov	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff fa26 	bl	80050c2 <SWAPBYTE>
 8005c76:	4603      	mov	r3, r0
 8005c78:	461a      	mov	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	80da      	strh	r2, [r3, #6]
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c90:	2180      	movs	r1, #128	@ 0x80
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fbf6 	bl	8006484 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005c98:	2100      	movs	r1, #0
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fbf2 	bl	8006484 <USBD_LL_StallEP>
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d042      	beq.n	8005d44 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005cc2:	6938      	ldr	r0, [r7, #16]
 8005cc4:	f000 f842 	bl	8005d4c <USBD_GetLen>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	3301      	adds	r3, #1
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd2:	d808      	bhi.n	8005ce6 <USBD_GetString+0x3e>
 8005cd4:	6938      	ldr	r0, [r7, #16]
 8005cd6:	f000 f839 	bl	8005d4c <USBD_GetLen>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	3301      	adds	r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	e001      	b.n	8005cea <USBD_GetString+0x42>
 8005ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	7812      	ldrb	r2, [r2, #0]
 8005cf8:	701a      	strb	r2, [r3, #0]
  idx++;
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	4413      	add	r3, r2
 8005d06:	2203      	movs	r2, #3
 8005d08:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d10:	e013      	b.n	8005d3a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	4413      	add	r3, r2
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	7812      	ldrb	r2, [r2, #0]
 8005d1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	3301      	adds	r3, #1
 8005d22:	613b      	str	r3, [r7, #16]
    idx++;
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	3301      	adds	r3, #1
 8005d28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	4413      	add	r3, r2
 8005d30:	2200      	movs	r2, #0
 8005d32:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	3301      	adds	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e7      	bne.n	8005d12 <USBD_GetString+0x6a>
 8005d42:	e000      	b.n	8005d46 <USBD_GetString+0x9e>
    return;
 8005d44:	bf00      	nop
  }
}
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d5c:	e005      	b.n	8005d6a <USBD_GetLen+0x1e>
  {
    len++;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	3301      	adds	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f5      	bne.n	8005d5e <USBD_GetLen+0x12>
  }

  return len;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	2100      	movs	r1, #0
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fbf5 	bl	8006596 <USBD_LL_Transmit>

  return USBD_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fbe4 	bl	8006596 <USBD_LL_Transmit>

  return USBD_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	2100      	movs	r1, #0
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fbf4 	bl	80065d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2204      	movs	r2, #4
 8005e06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2100      	movs	r1, #0
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fbc0 	bl	8006596 <USBD_LL_Transmit>

  return USBD_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2205      	movs	r2, #5
 8005e2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e30:	2300      	movs	r3, #0
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fbce 	bl	80065d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	490e      	ldr	r1, [pc, #56]	@ (8005e88 <MX_USB_DEVICE_Init+0x40>)
 8005e50:	480e      	ldr	r0, [pc, #56]	@ (8005e8c <MX_USB_DEVICE_Init+0x44>)
 8005e52:	f7fe fd13 	bl	800487c <USBD_Init>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e5c:	f7fa fce2 	bl	8000824 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005e60:	490b      	ldr	r1, [pc, #44]	@ (8005e90 <MX_USB_DEVICE_Init+0x48>)
 8005e62:	480a      	ldr	r0, [pc, #40]	@ (8005e8c <MX_USB_DEVICE_Init+0x44>)
 8005e64:	f7fe fd3a 	bl	80048dc <USBD_RegisterClass>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e6e:	f7fa fcd9 	bl	8000824 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e72:	4806      	ldr	r0, [pc, #24]	@ (8005e8c <MX_USB_DEVICE_Init+0x44>)
 8005e74:	f7fe fd68 	bl	8004948 <USBD_Start>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005e7e:	f7fa fcd1 	bl	8000824 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e82:	bf00      	nop
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200000a8 	.word	0x200000a8
 8005e8c:	20000124 	.word	0x20000124
 8005e90:	20000010 	.word	0x20000010

08005e94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	6039      	str	r1, [r7, #0]
 8005e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2212      	movs	r2, #18
 8005ea4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005ea6:	4b03      	ldr	r3, [pc, #12]	@ (8005eb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	200000c4 	.word	0x200000c4

08005eb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	6039      	str	r1, [r7, #0]
 8005ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005eca:	4b03      	ldr	r3, [pc, #12]	@ (8005ed8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	200000d8 	.word	0x200000d8

08005edc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	6039      	str	r1, [r7, #0]
 8005ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d105      	bne.n	8005efa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	4907      	ldr	r1, [pc, #28]	@ (8005f10 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ef2:	4808      	ldr	r0, [pc, #32]	@ (8005f14 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ef4:	f7ff fed8 	bl	8005ca8 <USBD_GetString>
 8005ef8:	e004      	b.n	8005f04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	4904      	ldr	r1, [pc, #16]	@ (8005f10 <USBD_FS_ProductStrDescriptor+0x34>)
 8005efe:	4805      	ldr	r0, [pc, #20]	@ (8005f14 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f00:	f7ff fed2 	bl	8005ca8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f04:	4b02      	ldr	r3, [pc, #8]	@ (8005f10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000400 	.word	0x20000400
 8005f14:	08006714 	.word	0x08006714

08005f18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	6039      	str	r1, [r7, #0]
 8005f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	4904      	ldr	r1, [pc, #16]	@ (8005f38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005f28:	4804      	ldr	r0, [pc, #16]	@ (8005f3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005f2a:	f7ff febd 	bl	8005ca8 <USBD_GetString>
  return USBD_StrDesc;
 8005f2e:	4b02      	ldr	r3, [pc, #8]	@ (8005f38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000400 	.word	0x20000400
 8005f3c:	0800672c 	.word	0x0800672c

08005f40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	6039      	str	r1, [r7, #0]
 8005f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	221a      	movs	r2, #26
 8005f50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f52:	f000 f843 	bl	8005fdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f56:	4b02      	ldr	r3, [pc, #8]	@ (8005f60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	200000dc 	.word	0x200000dc

08005f64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	6039      	str	r1, [r7, #0]
 8005f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d105      	bne.n	8005f82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	4907      	ldr	r1, [pc, #28]	@ (8005f98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f7a:	4808      	ldr	r0, [pc, #32]	@ (8005f9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f7c:	f7ff fe94 	bl	8005ca8 <USBD_GetString>
 8005f80:	e004      	b.n	8005f8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	4904      	ldr	r1, [pc, #16]	@ (8005f98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f86:	4805      	ldr	r0, [pc, #20]	@ (8005f9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f88:	f7ff fe8e 	bl	8005ca8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f8c:	4b02      	ldr	r3, [pc, #8]	@ (8005f98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000400 	.word	0x20000400
 8005f9c:	08006740 	.word	0x08006740

08005fa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	6039      	str	r1, [r7, #0]
 8005faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d105      	bne.n	8005fbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4907      	ldr	r1, [pc, #28]	@ (8005fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fb6:	4808      	ldr	r0, [pc, #32]	@ (8005fd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fb8:	f7ff fe76 	bl	8005ca8 <USBD_GetString>
 8005fbc:	e004      	b.n	8005fc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	4904      	ldr	r1, [pc, #16]	@ (8005fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fc2:	4805      	ldr	r0, [pc, #20]	@ (8005fd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fc4:	f7ff fe70 	bl	8005ca8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fc8:	4b02      	ldr	r3, [pc, #8]	@ (8005fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000400 	.word	0x20000400
 8005fd8:	0800674c 	.word	0x0800674c

08005fdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8006020 <Get_SerialNum+0x44>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8006024 <Get_SerialNum+0x48>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005fee:	4b0e      	ldr	r3, [pc, #56]	@ (8006028 <Get_SerialNum+0x4c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006002:	2208      	movs	r2, #8
 8006004:	4909      	ldr	r1, [pc, #36]	@ (800602c <Get_SerialNum+0x50>)
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f814 	bl	8006034 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800600c:	2204      	movs	r2, #4
 800600e:	4908      	ldr	r1, [pc, #32]	@ (8006030 <Get_SerialNum+0x54>)
 8006010:	68b8      	ldr	r0, [r7, #8]
 8006012:	f000 f80f 	bl	8006034 <IntToUnicode>
  }
}
 8006016:	bf00      	nop
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	1fff7a10 	.word	0x1fff7a10
 8006024:	1fff7a14 	.word	0x1fff7a14
 8006028:	1fff7a18 	.word	0x1fff7a18
 800602c:	200000de 	.word	0x200000de
 8006030:	200000ee 	.word	0x200000ee

08006034 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]
 800604a:	e027      	b.n	800609c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	0f1b      	lsrs	r3, r3, #28
 8006050:	2b09      	cmp	r3, #9
 8006052:	d80b      	bhi.n	800606c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	0f1b      	lsrs	r3, r3, #28
 8006058:	b2da      	uxtb	r2, r3
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	4619      	mov	r1, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	440b      	add	r3, r1
 8006064:	3230      	adds	r2, #48	@ 0x30
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e00a      	b.n	8006082 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	0f1b      	lsrs	r3, r3, #28
 8006070:	b2da      	uxtb	r2, r3
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	4619      	mov	r1, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	440b      	add	r3, r1
 800607c:	3237      	adds	r2, #55	@ 0x37
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	3301      	adds	r3, #1
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	4413      	add	r3, r2
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	3301      	adds	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]
 800609c:	7dfa      	ldrb	r2, [r7, #23]
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d3d3      	bcc.n	800604c <IntToUnicode+0x18>
  }
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	@ 0x28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060bc:	f107 0314 	add.w	r3, r7, #20
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	609a      	str	r2, [r3, #8]
 80060c8:	60da      	str	r2, [r3, #12]
 80060ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060d4:	d13a      	bne.n	800614c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	4b1e      	ldr	r3, [pc, #120]	@ (8006154 <HAL_PCD_MspInit+0xa0>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060de:	4a1d      	ldr	r2, [pc, #116]	@ (8006154 <HAL_PCD_MspInit+0xa0>)
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80060e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006154 <HAL_PCD_MspInit+0xa0>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80060f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80060f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f8:	2302      	movs	r3, #2
 80060fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006100:	2303      	movs	r3, #3
 8006102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006104:	230a      	movs	r3, #10
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006108:	f107 0314 	add.w	r3, r7, #20
 800610c:	4619      	mov	r1, r3
 800610e:	4812      	ldr	r0, [pc, #72]	@ (8006158 <HAL_PCD_MspInit+0xa4>)
 8006110:	f7fa fdda 	bl	8000cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006114:	4b0f      	ldr	r3, [pc, #60]	@ (8006154 <HAL_PCD_MspInit+0xa0>)
 8006116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006118:	4a0e      	ldr	r2, [pc, #56]	@ (8006154 <HAL_PCD_MspInit+0xa0>)
 800611a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <HAL_PCD_MspInit+0xa0>)
 8006126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006128:	4a0a      	ldr	r2, [pc, #40]	@ (8006154 <HAL_PCD_MspInit+0xa0>)
 800612a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800612e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006130:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <HAL_PCD_MspInit+0xa0>)
 8006132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800613c:	2200      	movs	r2, #0
 800613e:	2100      	movs	r1, #0
 8006140:	2043      	movs	r0, #67	@ 0x43
 8006142:	f7fa fd8a 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006146:	2043      	movs	r0, #67	@ 0x43
 8006148:	f7fa fda3 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800614c:	bf00      	nop
 800614e:	3728      	adds	r7, #40	@ 0x28
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40023800 	.word	0x40023800
 8006158:	40020000 	.word	0x40020000

0800615c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f7fe fc35 	bl	80049e2 <USBD_LL_SetupStage>
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006192:	78fa      	ldrb	r2, [r7, #3]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	4619      	mov	r1, r3
 80061aa:	f7fe fc6f 	bl	8004a8c <USBD_LL_DataOutStage>
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80061c8:	78fa      	ldrb	r2, [r7, #3]
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	440b      	add	r3, r1
 80061d6:	3320      	adds	r3, #32
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	4619      	mov	r1, r3
 80061de:	f7fe fd08 	bl	8004bf2 <USBD_LL_DataInStage>
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fe42 	bl	8004e82 <USBD_LL_SOF>
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800620e:	2301      	movs	r3, #1
 8006210:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	79db      	ldrb	r3, [r3, #7]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d001      	beq.n	800621e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800621a:	f7fa fb03 	bl	8000824 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006224:	7bfa      	ldrb	r2, [r7, #15]
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fde6 	bl	8004dfa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fd8e 	bl	8004d56 <USBD_LL_Reset>
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fde1 	bl	8004e1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7adb      	ldrb	r3, [r3, #11]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006278:	4b04      	ldr	r3, [pc, #16]	@ (800628c <HAL_PCD_SuspendCallback+0x48>)
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	4a03      	ldr	r2, [pc, #12]	@ (800628c <HAL_PCD_SuspendCallback+0x48>)
 800627e:	f043 0306 	orr.w	r3, r3, #6
 8006282:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	e000ed00 	.word	0xe000ed00

08006290 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe fdd7 	bl	8004e52 <USBD_LL_Resume>
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	4611      	mov	r1, r2
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fe2f 	bl	8004f26 <USBD_LL_IsoOUTIncomplete>
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	4611      	mov	r1, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fdeb 	bl	8004ec2 <USBD_LL_IsoINIncomplete>
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fe41 	bl	8004f8a <USBD_LL_DevConnected>
}
 8006308:	bf00      	nop
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fe3e 	bl	8004fa0 <USBD_LL_DevDisconnected>
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d13c      	bne.n	80063b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800633c:	4a20      	ldr	r2, [pc, #128]	@ (80063c0 <USBD_LL_Init+0x94>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a1e      	ldr	r2, [pc, #120]	@ (80063c0 <USBD_LL_Init+0x94>)
 8006348:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800634c:	4b1c      	ldr	r3, [pc, #112]	@ (80063c0 <USBD_LL_Init+0x94>)
 800634e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006352:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006354:	4b1a      	ldr	r3, [pc, #104]	@ (80063c0 <USBD_LL_Init+0x94>)
 8006356:	2204      	movs	r2, #4
 8006358:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800635a:	4b19      	ldr	r3, [pc, #100]	@ (80063c0 <USBD_LL_Init+0x94>)
 800635c:	2202      	movs	r2, #2
 800635e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006360:	4b17      	ldr	r3, [pc, #92]	@ (80063c0 <USBD_LL_Init+0x94>)
 8006362:	2200      	movs	r2, #0
 8006364:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006366:	4b16      	ldr	r3, [pc, #88]	@ (80063c0 <USBD_LL_Init+0x94>)
 8006368:	2202      	movs	r2, #2
 800636a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800636c:	4b14      	ldr	r3, [pc, #80]	@ (80063c0 <USBD_LL_Init+0x94>)
 800636e:	2200      	movs	r2, #0
 8006370:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006372:	4b13      	ldr	r3, [pc, #76]	@ (80063c0 <USBD_LL_Init+0x94>)
 8006374:	2200      	movs	r2, #0
 8006376:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006378:	4b11      	ldr	r3, [pc, #68]	@ (80063c0 <USBD_LL_Init+0x94>)
 800637a:	2200      	movs	r2, #0
 800637c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800637e:	4b10      	ldr	r3, [pc, #64]	@ (80063c0 <USBD_LL_Init+0x94>)
 8006380:	2200      	movs	r2, #0
 8006382:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006384:	4b0e      	ldr	r3, [pc, #56]	@ (80063c0 <USBD_LL_Init+0x94>)
 8006386:	2200      	movs	r2, #0
 8006388:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800638a:	480d      	ldr	r0, [pc, #52]	@ (80063c0 <USBD_LL_Init+0x94>)
 800638c:	f7fa fe6a 	bl	8001064 <HAL_PCD_Init>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006396:	f7fa fa45 	bl	8000824 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800639a:	2180      	movs	r1, #128	@ 0x80
 800639c:	4808      	ldr	r0, [pc, #32]	@ (80063c0 <USBD_LL_Init+0x94>)
 800639e:	f7fc f87e 	bl	800249e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80063a2:	2240      	movs	r2, #64	@ 0x40
 80063a4:	2100      	movs	r1, #0
 80063a6:	4806      	ldr	r0, [pc, #24]	@ (80063c0 <USBD_LL_Init+0x94>)
 80063a8:	f7fc f832 	bl	8002410 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80063ac:	2280      	movs	r2, #128	@ 0x80
 80063ae:	2101      	movs	r1, #1
 80063b0:	4803      	ldr	r0, [pc, #12]	@ (80063c0 <USBD_LL_Init+0x94>)
 80063b2:	f7fc f82d 	bl	8002410 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000600 	.word	0x20000600

080063c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fa ff51 	bl	8001282 <HAL_PCD_Start>
 80063e0:	4603      	mov	r3, r0
 80063e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 f930 	bl	800664c <USBD_Get_USB_Status>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	4608      	mov	r0, r1
 8006404:	4611      	mov	r1, r2
 8006406:	461a      	mov	r2, r3
 8006408:	4603      	mov	r3, r0
 800640a:	70fb      	strb	r3, [r7, #3]
 800640c:	460b      	mov	r3, r1
 800640e:	70bb      	strb	r3, [r7, #2]
 8006410:	4613      	mov	r3, r2
 8006412:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006422:	78bb      	ldrb	r3, [r7, #2]
 8006424:	883a      	ldrh	r2, [r7, #0]
 8006426:	78f9      	ldrb	r1, [r7, #3]
 8006428:	f7fb fc25 	bl	8001c76 <HAL_PCD_EP_Open>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f90a 	bl	800664c <USBD_Get_USB_Status>
 8006438:	4603      	mov	r3, r0
 800643a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800643c:	7bbb      	ldrb	r3, [r7, #14]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7fb fc70 	bl	8001d4a <HAL_PCD_EP_Close>
 800646a:	4603      	mov	r3, r0
 800646c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 f8eb 	bl	800664c <USBD_Get_USB_Status>
 8006476:	4603      	mov	r3, r0
 8006478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800647a:	7bbb      	ldrb	r3, [r7, #14]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800649e:	78fa      	ldrb	r2, [r7, #3]
 80064a0:	4611      	mov	r1, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fb fd10 	bl	8001ec8 <HAL_PCD_EP_SetStall>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f8cc 	bl	800664c <USBD_Get_USB_Status>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	4611      	mov	r1, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fb fd54 	bl	8001f8e <HAL_PCD_EP_ClrStall>
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f8ad 	bl	800664c <USBD_Get_USB_Status>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006512:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006518:	2b00      	cmp	r3, #0
 800651a:	da0b      	bge.n	8006534 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	4613      	mov	r3, r2
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	3316      	adds	r3, #22
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	e00b      	b.n	800654c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800654a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006572:	78fa      	ldrb	r2, [r7, #3]
 8006574:	4611      	mov	r1, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f7fb fb59 	bl	8001c2e <HAL_PCD_SetAddress>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 f862 	bl	800664c <USBD_Get_USB_Status>
 8006588:	4603      	mov	r3, r0
 800658a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800658c:	7bbb      	ldrb	r3, [r7, #14]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	460b      	mov	r3, r1
 80065a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80065b4:	7af9      	ldrb	r1, [r7, #11]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	f7fb fc4b 	bl	8001e54 <HAL_PCD_EP_Transmit>
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 f841 	bl	800664c <USBD_Get_USB_Status>
 80065ca:	4603      	mov	r3, r0
 80065cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80065ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	607a      	str	r2, [r7, #4]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	460b      	mov	r3, r1
 80065e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80065f6:	7af9      	ldrb	r1, [r7, #11]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	f7fb fbef 	bl	8001dde <HAL_PCD_EP_Receive>
 8006600:	4603      	mov	r3, r0
 8006602:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f820 	bl	800664c <USBD_Get_USB_Status>
 800660c:	4603      	mov	r3, r0
 800660e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006610:	7dbb      	ldrb	r3, [r7, #22]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006624:	4b03      	ldr	r3, [pc, #12]	@ (8006634 <USBD_static_malloc+0x18>)
}
 8006626:	4618      	mov	r0, r3
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20000ae4 	.word	0x20000ae4

08006638 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]

}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d817      	bhi.n	8006690 <USBD_Get_USB_Status+0x44>
 8006660:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <USBD_Get_USB_Status+0x1c>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	08006679 	.word	0x08006679
 800666c:	0800667f 	.word	0x0800667f
 8006670:	08006685 	.word	0x08006685
 8006674:	0800668b 	.word	0x0800668b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]
    break;
 800667c:	e00b      	b.n	8006696 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800667e:	2303      	movs	r3, #3
 8006680:	73fb      	strb	r3, [r7, #15]
    break;
 8006682:	e008      	b.n	8006696 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006684:	2301      	movs	r3, #1
 8006686:	73fb      	strb	r3, [r7, #15]
    break;
 8006688:	e005      	b.n	8006696 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800668a:	2303      	movs	r3, #3
 800668c:	73fb      	strb	r3, [r7, #15]
    break;
 800668e:	e002      	b.n	8006696 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	73fb      	strb	r3, [r7, #15]
    break;
 8006694:	bf00      	nop
  }
  return usb_status;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <memset>:
 80066a4:	4402      	add	r2, r0
 80066a6:	4603      	mov	r3, r0
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d100      	bne.n	80066ae <memset+0xa>
 80066ac:	4770      	bx	lr
 80066ae:	f803 1b01 	strb.w	r1, [r3], #1
 80066b2:	e7f9      	b.n	80066a8 <memset+0x4>

080066b4 <__libc_init_array>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	4d0d      	ldr	r5, [pc, #52]	@ (80066ec <__libc_init_array+0x38>)
 80066b8:	4c0d      	ldr	r4, [pc, #52]	@ (80066f0 <__libc_init_array+0x3c>)
 80066ba:	1b64      	subs	r4, r4, r5
 80066bc:	10a4      	asrs	r4, r4, #2
 80066be:	2600      	movs	r6, #0
 80066c0:	42a6      	cmp	r6, r4
 80066c2:	d109      	bne.n	80066d8 <__libc_init_array+0x24>
 80066c4:	4d0b      	ldr	r5, [pc, #44]	@ (80066f4 <__libc_init_array+0x40>)
 80066c6:	4c0c      	ldr	r4, [pc, #48]	@ (80066f8 <__libc_init_array+0x44>)
 80066c8:	f000 f818 	bl	80066fc <_init>
 80066cc:	1b64      	subs	r4, r4, r5
 80066ce:	10a4      	asrs	r4, r4, #2
 80066d0:	2600      	movs	r6, #0
 80066d2:	42a6      	cmp	r6, r4
 80066d4:	d105      	bne.n	80066e2 <__libc_init_array+0x2e>
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066dc:	4798      	blx	r3
 80066de:	3601      	adds	r6, #1
 80066e0:	e7ee      	b.n	80066c0 <__libc_init_array+0xc>
 80066e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e6:	4798      	blx	r3
 80066e8:	3601      	adds	r6, #1
 80066ea:	e7f2      	b.n	80066d2 <__libc_init_array+0x1e>
 80066ec:	08006774 	.word	0x08006774
 80066f0:	08006774 	.word	0x08006774
 80066f4:	08006774 	.word	0x08006774
 80066f8:	08006778 	.word	0x08006778

080066fc <_init>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr

08006708 <_fini>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr
